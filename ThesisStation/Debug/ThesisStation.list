
ThesisStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeb8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b068  0800b068  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b070  0800b070  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800b078  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000060  0800b0d4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800b0d4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001295c  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216f  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00035bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000211e  00000000  00000000  00036c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013327  00000000  00000000  00038d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c53  00000000  00000000  0004c04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  000ddcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b038 	.word	0x0800b038

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	0800b038 	.word	0x0800b038

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b974 	b.w	8001040 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	9d08      	ldr	r5, [sp, #32]
 8000d76:	4604      	mov	r4, r0
 8000d78:	468e      	mov	lr, r1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d14d      	bne.n	8000e1a <__udivmoddi4+0xaa>
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	4694      	mov	ip, r2
 8000d82:	d969      	bls.n	8000e58 <__udivmoddi4+0xe8>
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	b152      	cbz	r2, 8000da0 <__udivmoddi4+0x30>
 8000d8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d8e:	f1c2 0120 	rsb	r1, r2, #32
 8000d92:	fa20 f101 	lsr.w	r1, r0, r1
 8000d96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000d9e:	4094      	lsls	r4, r2
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	0c21      	lsrs	r1, r4, #16
 8000da6:	fbbe f6f8 	udiv	r6, lr, r8
 8000daa:	fa1f f78c 	uxth.w	r7, ip
 8000dae:	fb08 e316 	mls	r3, r8, r6, lr
 8000db2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000db6:	fb06 f107 	mul.w	r1, r6, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x64>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 811f 	bcs.w	8001008 <__udivmoddi4+0x298>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 811c 	bls.w	8001008 <__udivmoddi4+0x298>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 f707 	mul.w	r7, r0, r7
 8000de8:	42a7      	cmp	r7, r4
 8000dea:	d90a      	bls.n	8000e02 <__udivmoddi4+0x92>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df4:	f080 810a 	bcs.w	800100c <__udivmoddi4+0x29c>
 8000df8:	42a7      	cmp	r7, r4
 8000dfa:	f240 8107 	bls.w	800100c <__udivmoddi4+0x29c>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	1be4      	subs	r4, r4, r7
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa4>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0xc2>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80ef 	beq.w	8001002 <__udivmoddi4+0x292>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x160>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xd4>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80f9 	bhi.w	8001036 <__udivmoddi4+0x2c6>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	469e      	mov	lr, r3
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0e0      	beq.n	8000e14 <__udivmoddi4+0xa4>
 8000e52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e56:	e7dd      	b.n	8000e14 <__udivmoddi4+0xa4>
 8000e58:	b902      	cbnz	r2, 8000e5c <__udivmoddi4+0xec>
 8000e5a:	deff      	udf	#255	; 0xff
 8000e5c:	fab2 f282 	clz	r2, r2
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f040 8092 	bne.w	8000f8a <__udivmoddi4+0x21a>
 8000e66:	eba1 010c 	sub.w	r1, r1, ip
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2601      	movs	r6, #1
 8000e74:	0c20      	lsrs	r0, r4, #16
 8000e76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000e7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e82:	fb0e f003 	mul.w	r0, lr, r3
 8000e86:	4288      	cmp	r0, r1
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x12c>
 8000e8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x12a>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2c0>
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ea8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x156>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x154>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2ca>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x9a>
 8000ed0:	f1c6 0720 	rsb	r7, r6, #32
 8000ed4:	40b3      	lsls	r3, r6
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	40f9      	lsrs	r1, r7
 8000eea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eee:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ef6:	0c20      	lsrs	r0, r4, #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fb09 1118 	mls	r1, r9, r8, r1
 8000f00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f04:	fb08 f00e 	mul.w	r0, r8, lr
 8000f08:	4288      	cmp	r0, r1
 8000f0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b8>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2bc>
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2bc>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4461      	add	r1, ip
 8000f28:	1a09      	subs	r1, r1, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f30:	fb09 1110 	mls	r1, r9, r0, r1
 8000f34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f3c:	458e      	cmp	lr, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1e2>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2b4>
 8000f4a:	458e      	cmp	lr, r1
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2b4>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f56:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5a:	eba1 010e 	sub.w	r1, r1, lr
 8000f5e:	42a1      	cmp	r1, r4
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46a6      	mov	lr, r4
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x2a4>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x2a0>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x212>
 8000f6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000f6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000f72:	fa01 f707 	lsl.w	r7, r1, r7
 8000f76:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7a:	40f1      	lsrs	r1, r6
 8000f7c:	431f      	orrs	r7, r3
 8000f7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	f1c2 0320 	rsb	r3, r2, #32
 8000f8e:	40d8      	lsrs	r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa21 f303 	lsr.w	r3, r1, r3
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	4301      	orrs	r1, r0
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fa8:	fb07 3610 	mls	r6, r7, r0, r3
 8000fac:	0c0b      	lsrs	r3, r1, #16
 8000fae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb2:	fb00 f60e 	mul.w	r6, r0, lr
 8000fb6:	429e      	cmp	r6, r3
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x260>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b8>
 8000fc8:	429e      	cmp	r6, r3
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b8>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1b9b      	subs	r3, r3, r6
 8000fd2:	b289      	uxth	r1, r1
 8000fd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe0:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x28a>
 8000fe8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fec:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2b0>
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2b0>
 8000ff6:	3e02      	subs	r6, #2
 8000ff8:	4461      	add	r1, ip
 8000ffa:	1ac9      	subs	r1, r1, r3
 8000ffc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0x104>
 8001002:	462e      	mov	r6, r5
 8001004:	4628      	mov	r0, r5
 8001006:	e705      	b.n	8000e14 <__udivmoddi4+0xa4>
 8001008:	4606      	mov	r6, r0
 800100a:	e6e3      	b.n	8000dd4 <__udivmoddi4+0x64>
 800100c:	4618      	mov	r0, r3
 800100e:	e6f8      	b.n	8000e02 <__udivmoddi4+0x92>
 8001010:	454b      	cmp	r3, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f8>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb64 0e0c 	sbc.w	lr, r4, ip
 800101c:	3801      	subs	r0, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f8>
 8001020:	4646      	mov	r6, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x28a>
 8001024:	4620      	mov	r0, r4
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1e2>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x260>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b8>
 8001030:	3b02      	subs	r3, #2
 8001032:	4461      	add	r1, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x12c>
 8001036:	4630      	mov	r0, r6
 8001038:	e709      	b.n	8000e4e <__udivmoddi4+0xde>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x156>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <VL6180X_Init>:
 @brief  Initializes VL6180X and check if it is found and resets chip.
 @param  Pointer of i2c
 @returns True if chip found and initialized, False otherwise
 */
/**************************************************************************/
bool VL6180X_Init(I2C_HandleTypeDef *hi2c) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	VL6180X_i2c = hi2c;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <VL6180X_Init+0x38>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
	_i2caddr = VL6180X_DEFAULT_I2C_ADDR;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <VL6180X_Init+0x3c>)
 8001054:	2252      	movs	r2, #82	; 0x52
 8001056:	701a      	strb	r2, [r3, #0]

//	if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
//		return false;
//	}

	 if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) == 0x01) {
 8001058:	2016      	movs	r0, #22
 800105a:	f000 f8e5 	bl	8001228 <read8>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <VL6180X_Init+0x24>
	loadSettings();
 8001064:	f000 f80e 	bl	8001084 <loadSettings>
	}

	write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 8001068:	2100      	movs	r1, #0
 800106a:	2016      	movs	r0, #22
 800106c:	f000 f90c 	bl	8001288 <write8>

	return true;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000080 	.word	0x20000080
 8001080:	2000007c 	.word	0x2000007c

08001084 <loadSettings>:
/*!
 @brief  Load the settings for proximity/distance ranging
 */
/**************************************************************************/

void loadSettings(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	// load settings!

	// private settings from page 24 of app note
	write8(0x0207, 0x01);
 8001088:	2101      	movs	r1, #1
 800108a:	f240 2007 	movw	r0, #519	; 0x207
 800108e:	f000 f8fb 	bl	8001288 <write8>
	write8(0x0208, 0x01);
 8001092:	2101      	movs	r1, #1
 8001094:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001098:	f000 f8f6 	bl	8001288 <write8>
	write8(0x0096, 0x00);
 800109c:	2100      	movs	r1, #0
 800109e:	2096      	movs	r0, #150	; 0x96
 80010a0:	f000 f8f2 	bl	8001288 <write8>
	write8(0x0097, 0xfd);
 80010a4:	21fd      	movs	r1, #253	; 0xfd
 80010a6:	2097      	movs	r0, #151	; 0x97
 80010a8:	f000 f8ee 	bl	8001288 <write8>
	write8(0x00e3, 0x00);
 80010ac:	2100      	movs	r1, #0
 80010ae:	20e3      	movs	r0, #227	; 0xe3
 80010b0:	f000 f8ea 	bl	8001288 <write8>
	write8(0x00e4, 0x04);
 80010b4:	2104      	movs	r1, #4
 80010b6:	20e4      	movs	r0, #228	; 0xe4
 80010b8:	f000 f8e6 	bl	8001288 <write8>
	write8(0x00e5, 0x02);
 80010bc:	2102      	movs	r1, #2
 80010be:	20e5      	movs	r0, #229	; 0xe5
 80010c0:	f000 f8e2 	bl	8001288 <write8>
	write8(0x00e6, 0x01);
 80010c4:	2101      	movs	r1, #1
 80010c6:	20e6      	movs	r0, #230	; 0xe6
 80010c8:	f000 f8de 	bl	8001288 <write8>
	write8(0x00e7, 0x03);
 80010cc:	2103      	movs	r1, #3
 80010ce:	20e7      	movs	r0, #231	; 0xe7
 80010d0:	f000 f8da 	bl	8001288 <write8>
	write8(0x00f5, 0x02);
 80010d4:	2102      	movs	r1, #2
 80010d6:	20f5      	movs	r0, #245	; 0xf5
 80010d8:	f000 f8d6 	bl	8001288 <write8>
	write8(0x00d9, 0x05);
 80010dc:	2105      	movs	r1, #5
 80010de:	20d9      	movs	r0, #217	; 0xd9
 80010e0:	f000 f8d2 	bl	8001288 <write8>
	write8(0x00db, 0xce);
 80010e4:	21ce      	movs	r1, #206	; 0xce
 80010e6:	20db      	movs	r0, #219	; 0xdb
 80010e8:	f000 f8ce 	bl	8001288 <write8>
	write8(0x00dc, 0x03);
 80010ec:	2103      	movs	r1, #3
 80010ee:	20dc      	movs	r0, #220	; 0xdc
 80010f0:	f000 f8ca 	bl	8001288 <write8>
	write8(0x00dd, 0xf8);
 80010f4:	21f8      	movs	r1, #248	; 0xf8
 80010f6:	20dd      	movs	r0, #221	; 0xdd
 80010f8:	f000 f8c6 	bl	8001288 <write8>
	write8(0x009f, 0x00);
 80010fc:	2100      	movs	r1, #0
 80010fe:	209f      	movs	r0, #159	; 0x9f
 8001100:	f000 f8c2 	bl	8001288 <write8>
	write8(0x00a3, 0x3c);
 8001104:	213c      	movs	r1, #60	; 0x3c
 8001106:	20a3      	movs	r0, #163	; 0xa3
 8001108:	f000 f8be 	bl	8001288 <write8>
	write8(0x00b7, 0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	20b7      	movs	r0, #183	; 0xb7
 8001110:	f000 f8ba 	bl	8001288 <write8>
	write8(0x00bb, 0x3c);
 8001114:	213c      	movs	r1, #60	; 0x3c
 8001116:	20bb      	movs	r0, #187	; 0xbb
 8001118:	f000 f8b6 	bl	8001288 <write8>
	write8(0x00b2, 0x09);
 800111c:	2109      	movs	r1, #9
 800111e:	20b2      	movs	r0, #178	; 0xb2
 8001120:	f000 f8b2 	bl	8001288 <write8>
	write8(0x00ca, 0x09);
 8001124:	2109      	movs	r1, #9
 8001126:	20ca      	movs	r0, #202	; 0xca
 8001128:	f000 f8ae 	bl	8001288 <write8>
	write8(0x0198, 0x01);
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8001132:	f000 f8a9 	bl	8001288 <write8>
	write8(0x01b0, 0x17);
 8001136:	2117      	movs	r1, #23
 8001138:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 800113c:	f000 f8a4 	bl	8001288 <write8>
	write8(0x01ad, 0x00);
 8001140:	2100      	movs	r1, #0
 8001142:	f240 10ad 	movw	r0, #429	; 0x1ad
 8001146:	f000 f89f 	bl	8001288 <write8>
	write8(0x00ff, 0x05);
 800114a:	2105      	movs	r1, #5
 800114c:	20ff      	movs	r0, #255	; 0xff
 800114e:	f000 f89b 	bl	8001288 <write8>
	write8(0x0100, 0x05);
 8001152:	2105      	movs	r1, #5
 8001154:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001158:	f000 f896 	bl	8001288 <write8>
	write8(0x0199, 0x05);
 800115c:	2105      	movs	r1, #5
 800115e:	f240 1099 	movw	r0, #409	; 0x199
 8001162:	f000 f891 	bl	8001288 <write8>
	write8(0x01a6, 0x1b);
 8001166:	211b      	movs	r1, #27
 8001168:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 800116c:	f000 f88c 	bl	8001288 <write8>
	write8(0x01ac, 0x3e);
 8001170:	213e      	movs	r1, #62	; 0x3e
 8001172:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 8001176:	f000 f887 	bl	8001288 <write8>
	write8(0x01a7, 0x1f);
 800117a:	211f      	movs	r1, #31
 800117c:	f240 10a7 	movw	r0, #423	; 0x1a7
 8001180:	f000 f882 	bl	8001288 <write8>
	write8(0x0030, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	2030      	movs	r0, #48	; 0x30
 8001188:	f000 f87e 	bl	8001288 <write8>

	// Recommended _ Public registers - See data sheet for more detail
	write8(0x0011, 0x10); // Enables polling for 'New Sample ready' when measurement completes
 800118c:	2110      	movs	r1, #16
 800118e:	2011      	movs	r0, #17
 8001190:	f000 f87a 	bl	8001288 <write8>
	write8(0x010a, 0x30); // Set the averaging sample period (compromise between lower noise and increased execution time)
 8001194:	2130      	movs	r1, #48	; 0x30
 8001196:	f44f 7085 	mov.w	r0, #266	; 0x10a
 800119a:	f000 f875 	bl	8001288 <write8>
	write8(0x003f, 0x46); // Sets the light and dark gain (upper nibble). Dark gain should not be changed.
 800119e:	2146      	movs	r1, #70	; 0x46
 80011a0:	203f      	movs	r0, #63	; 0x3f
 80011a2:	f000 f871 	bl	8001288 <write8>
	write8(0x0031, 0xFF); // sets the # of range measurements after which auto calibration of system is performed
 80011a6:	21ff      	movs	r1, #255	; 0xff
 80011a8:	2031      	movs	r0, #49	; 0x31
 80011aa:	f000 f86d 	bl	8001288 <write8>
	write8(0x0040, 0x63); // Set ALS integration time to 100ms
 80011ae:	2163      	movs	r1, #99	; 0x63
 80011b0:	2040      	movs	r0, #64	; 0x40
 80011b2:	f000 f869 	bl	8001288 <write8>
	write8(0x002e, 0x01); // perform a single temperature calibration of the ranging sensor
 80011b6:	2101      	movs	r1, #1
 80011b8:	202e      	movs	r0, #46	; 0x2e
 80011ba:	f000 f865 	bl	8001288 <write8>

	// Optional_ Public registers - See data sheet for more detail
	write8(SYSRANGE_INTERMEASUREMENT_PERIOD, 0x09); // Set default ranging inter-measurement period to 100ms
 80011be:	2109      	movs	r1, #9
 80011c0:	201b      	movs	r0, #27
 80011c2:	f000 f861 	bl	8001288 <write8>
	write8(0x003e, 0x31); 	// Set default ALS inter-measurement period to 500ms
 80011c6:	2131      	movs	r1, #49	; 0x31
 80011c8:	203e      	movs	r0, #62	; 0x3e
 80011ca:	f000 f85d 	bl	8001288 <write8>
	write8(0x0014, 0x24); // Configures interrupt on 'New Sample Ready threshold event'
 80011ce:	2124      	movs	r1, #36	; 0x24
 80011d0:	2014      	movs	r0, #20
 80011d2:	f000 f859 	bl	8001288 <write8>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <VL6180X_readRange>:
 readRangeStatus} to before using the return value!
 @return Distance in millimeters if valid
 */
/**************************************************************************/

uint8_t VL6180X_readRange(void) {
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
	// wait for device to be ready for range measurement
	while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80011e0:	bf00      	nop
 80011e2:	204d      	movs	r0, #77	; 0x4d
 80011e4:	f000 f820 	bl	8001228 <read8>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f7      	beq.n	80011e2 <VL6180X_readRange+0x8>
		;

	// Start a range measurement
	write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80011f2:	2101      	movs	r1, #1
 80011f4:	2018      	movs	r0, #24
 80011f6:	f000 f847 	bl	8001288 <write8>

	// Poll until bit 2 is set
	while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80011fa:	bf00      	nop
 80011fc:	204f      	movs	r0, #79	; 0x4f
 80011fe:	f000 f813 	bl	8001228 <read8>
 8001202:	4603      	mov	r3, r0
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f7      	beq.n	80011fc <VL6180X_readRange+0x22>
		;

	// read range in mm
	uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 800120c:	2062      	movs	r0, #98	; 0x62
 800120e:	f000 f80b 	bl	8001228 <read8>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]

	// clear interrupt
	write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8001216:	2107      	movs	r1, #7
 8001218:	2015      	movs	r0, #21
 800121a:	f000 f835 	bl	8001288 <write8>

	return range;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <read8>:
 @brief  I2C low level interfacing
 */
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t read8(uint16_t address) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	uint8_t pData[2] = { address >> 8, address };
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29b      	uxth	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 2, 10);
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <read8+0x58>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <read8+0x5c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b299      	uxth	r1, r3
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	230a      	movs	r3, #10
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	f004 fd9d 	bl	8005d94 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_IT(VL6180X_i2c, _i2caddr, pData, 2);
	HAL_I2C_Master_Receive(VL6180X_i2c, _i2caddr, pData, 1, 10);
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <read8+0x58>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <read8+0x5c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b299      	uxth	r1, r3
 8001264:	f107 020c 	add.w	r2, r7, #12
 8001268:	230a      	movs	r3, #10
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	f004 fe8f 	bl	8005f90 <HAL_I2C_Master_Receive>
//	HAL_I2C_Master_Receive_IT(VL6180X_i2c, _i2caddr, pData, 1);

	data = pData[0];
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	73fb      	strb	r3, [r7, #15]
	return data;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000080 	.word	0x20000080
 8001284:	2000007c 	.word	0x2000007c

08001288 <write8>:
	data |= pData[1];
	return data;
}

// write 1 byte
void write8(uint16_t address, uint8_t data) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4613      	mov	r3, r2
 8001296:	717b      	strb	r3, [r7, #5]
	uint8_t pData[3] = { address >> 8, address, data };
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	733b      	strb	r3, [r7, #12]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	737b      	strb	r3, [r7, #13]
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 3, 10);
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <write8+0x44>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <write8+0x48>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b299      	uxth	r1, r3
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	230a      	movs	r3, #10
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2303      	movs	r3, #3
 80012c0:	f004 fd68 	bl	8005d94 <HAL_I2C_Master_Transmit>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000080 	.word	0x20000080
 80012d0:	2000007c 	.word	0x2000007c
 80012d4:	00000000 	.word	0x00000000

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012dc:	b08f      	sub	sp, #60	; 0x3c
 80012de:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f003 fffe 	bl	80052e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 ffa2 	bl	800222c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f001 fa64 	bl	80027b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012ec:	f001 fa0e 	bl	800270c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012f0:	f001 f832 	bl	8002358 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012f4:	f001 f888 	bl	8002408 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012f8:	f001 f8da 	bl	80024b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012fc:	f001 f92c 	bl	8002558 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001300:	f001 f9b6 	bl	8002670 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001304:	f001 fa2c 	bl	8002760 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001308:	f000 fff8 	bl	80022fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800130c:	2201      	movs	r2, #1
 800130e:	2104      	movs	r1, #4
 8001310:	48e9      	ldr	r0, [pc, #932]	; (80016b8 <main+0x3e0>)
 8001312:	f004 fbc9 	bl	8005aa8 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 8001316:	2064      	movs	r0, #100	; 0x64
 8001318:	f004 f854 	bl	80053c4 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	48e5      	ldr	r0, [pc, #916]	; (80016b8 <main+0x3e0>)
 8001322:	f004 fbc1 	bl	8005aa8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 8001326:	48e5      	ldr	r0, [pc, #916]	; (80016bc <main+0x3e4>)
 8001328:	f007 fd3e 	bl	8008da8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800132c:	48e4      	ldr	r0, [pc, #912]	; (80016c0 <main+0x3e8>)
 800132e:	f007 fd3b 	bl	8008da8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001332:	48e4      	ldr	r0, [pc, #912]	; (80016c4 <main+0x3ec>)
 8001334:	f007 fd38 	bl	8008da8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001338:	48e3      	ldr	r0, [pc, #908]	; (80016c8 <main+0x3f0>)
 800133a:	f007 fd35 	bl	8008da8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800133e:	213c      	movs	r1, #60	; 0x3c
 8001340:	48e2      	ldr	r0, [pc, #904]	; (80016cc <main+0x3f4>)
 8001342:	f007 ff43 	bl	80091cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001346:	213c      	movs	r1, #60	; 0x3c
 8001348:	48dc      	ldr	r0, [pc, #880]	; (80016bc <main+0x3e4>)
 800134a:	f007 ff3f 	bl	80091cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800134e:	213c      	movs	r1, #60	; 0x3c
 8001350:	48db      	ldr	r0, [pc, #876]	; (80016c0 <main+0x3e8>)
 8001352:	f007 ff3b 	bl	80091cc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	48da      	ldr	r0, [pc, #872]	; (80016c4 <main+0x3ec>)
 800135a:	f007 fde1 	bl	8008f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800135e:	2104      	movs	r1, #4
 8001360:	48d8      	ldr	r0, [pc, #864]	; (80016c4 <main+0x3ec>)
 8001362:	f007 fddd 	bl	8008f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001366:	2108      	movs	r1, #8
 8001368:	48d6      	ldr	r0, [pc, #856]	; (80016c4 <main+0x3ec>)
 800136a:	f007 fdd9 	bl	8008f20 <HAL_TIM_PWM_Start>
	hx711_init(&loadcell, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1);
 800136e:	2302      	movs	r3, #2
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4bd7      	ldr	r3, [pc, #860]	; (80016d0 <main+0x3f8>)
 8001374:	2201      	movs	r2, #1
 8001376:	49d6      	ldr	r1, [pc, #856]	; (80016d0 <main+0x3f8>)
 8001378:	48d6      	ldr	r0, [pc, #856]	; (80016d4 <main+0x3fc>)
 800137a:	f002 f81b 	bl	80033b4 <hx711_init>
	hx711_coef_set(&loadcell, 1, 1); // read after calibration
 800137e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001382:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001386:	48d3      	ldr	r0, [pc, #844]	; (80016d4 <main+0x3fc>)
 8001388:	f002 fcae 	bl	8003ce8 <hx711_coef_set>
	hx711_init(&loadcell2, GPIOC, GPIO_PIN_2, GPIOC, GPIO_PIN_3);
 800138c:	2308      	movs	r3, #8
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4bcf      	ldr	r3, [pc, #828]	; (80016d0 <main+0x3f8>)
 8001392:	2204      	movs	r2, #4
 8001394:	49ce      	ldr	r1, [pc, #824]	; (80016d0 <main+0x3f8>)
 8001396:	48d0      	ldr	r0, [pc, #832]	; (80016d8 <main+0x400>)
 8001398:	f002 f80c 	bl	80033b4 <hx711_init>
	hx711_coef_set(&loadcell2, 1, 1); // read after calibration
 800139c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80013a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013a4:	48cc      	ldr	r0, [pc, #816]	; (80016d8 <main+0x400>)
 80013a6:	f002 fc9f 	bl	8003ce8 <hx711_coef_set>
//  AutoFox_INA226_Constructor(&ina226);
//  AutoFox_INA226_Init(&ina226,INA226_IC2_ADDRESS,SHUNT_RESISTOR_OHMS,10);
//  AutoFox_INA226_setupCalibration(&ina226,SHUNT_RESISTOR_OHMS,10);
	tcaselect(0);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f002 fcb0 	bl	8003d10 <tcaselect>
	HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f004 f807 	bl	80053c4 <HAL_Delay>
	VL6180X_Init(&hi2c2);
 80013b6:	48c9      	ldr	r0, [pc, #804]	; (80016dc <main+0x404>)
 80013b8:	f7ff fe44 	bl	8001044 <VL6180X_Init>
	HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f004 f801 	bl	80053c4 <HAL_Delay>
	tcaselect(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f002 fca4 	bl	8003d10 <tcaselect>
	HAL_Delay(10);
 80013c8:	200a      	movs	r0, #10
 80013ca:	f003 fffb 	bl	80053c4 <HAL_Delay>
	VL6180X_Init(&hi2c2);
 80013ce:	48c3      	ldr	r0, [pc, #780]	; (80016dc <main+0x404>)
 80013d0:	f7ff fe38 	bl	8001044 <VL6180X_Init>
	xr[0] = (m*(h-x[5])*(w-x[4]))/(h*w);
 80013d4:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8001714 <main+0x43c>
 80013d8:	eddf 7ac1 	vldr	s15, [pc, #772]	; 80016e0 <main+0x408>
 80013dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e0:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80016e4 <main+0x40c>
 80013e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e8:	eddf 6acb 	vldr	s13, [pc, #812]	; 8001718 <main+0x440>
 80013ec:	eddf 7abe 	vldr	s15, [pc, #760]	; 80016e8 <main+0x410>
 80013f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013f8:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001714 <main+0x43c>
 80013fc:	eddf 7ac6 	vldr	s15, [pc, #792]	; 8001718 <main+0x440>
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001408:	4bb8      	ldr	r3, [pc, #736]	; (80016ec <main+0x414>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
	xr[1] = (m*(h-x[5])*x[4])/(h*w);
 800140e:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001714 <main+0x43c>
 8001412:	eddf 7ab3 	vldr	s15, [pc, #716]	; 80016e0 <main+0x408>
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80016e4 <main+0x40c>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80016e8 <main+0x410>
 8001426:	ee67 6a87 	vmul.f32	s13, s15, s14
 800142a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001714 <main+0x43c>
 800142e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8001718 <main+0x440>
 8001432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143a:	4bac      	ldr	r3, [pc, #688]	; (80016ec <main+0x414>)
 800143c:	edc3 7a01 	vstr	s15, [r3, #4]
	xr[2] = (m*x[5]*(w-x[4]))/(h*w);
 8001440:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80016e0 <main+0x408>
 8001444:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80016e4 <main+0x40c>
 8001448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144c:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8001718 <main+0x440>
 8001450:	eddf 7aa5 	vldr	s15, [pc, #660]	; 80016e8 <main+0x410>
 8001454:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001458:	ee67 6a27 	vmul.f32	s13, s14, s15
 800145c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001714 <main+0x43c>
 8001460:	eddf 7aad 	vldr	s15, [pc, #692]	; 8001718 <main+0x440>
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <main+0x414>)
 800146e:	edc3 7a02 	vstr	s15, [r3, #8]
	xr[3] = (m*x[5]*x[4])/(h*w);
 8001472:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80016e0 <main+0x408>
 8001476:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80016e4 <main+0x40c>
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80016e8 <main+0x410>
 8001482:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001486:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001714 <main+0x43c>
 800148a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8001718 <main+0x440>
 800148e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	4b95      	ldr	r3, [pc, #596]	; (80016ec <main+0x414>)
 8001498:	edc3 7a03 	vstr	s15, [r3, #12]
	yr[0] = (m*(h-y[5])*(w-y[4]))/(h*w);
 800149c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001714 <main+0x43c>
 80014a0:	eddf 7a93 	vldr	s15, [pc, #588]	; 80016f0 <main+0x418>
 80014a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a8:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80016e4 <main+0x40c>
 80014ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b0:	eddf 6a99 	vldr	s13, [pc, #612]	; 8001718 <main+0x440>
 80014b4:	eddf 7a8f 	vldr	s15, [pc, #572]	; 80016f4 <main+0x41c>
 80014b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014c0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001714 <main+0x43c>
 80014c4:	eddf 7a94 	vldr	s15, [pc, #592]	; 8001718 <main+0x440>
 80014c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <main+0x420>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
	yr[1] = (m*(h-y[5])*y[4])/(h*w);
 80014d6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001714 <main+0x43c>
 80014da:	eddf 7a85 	vldr	s15, [pc, #532]	; 80016f0 <main+0x418>
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80016e4 <main+0x40c>
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ea:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80016f4 <main+0x41c>
 80014ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014f2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001714 <main+0x43c>
 80014f6:	eddf 7a88 	vldr	s15, [pc, #544]	; 8001718 <main+0x440>
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <main+0x420>)
 8001504:	edc3 7a01 	vstr	s15, [r3, #4]
	yr[2] = (m*y[5]*(w-y[4]))/(h*w);
 8001508:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80016f0 <main+0x418>
 800150c:	eddf 7a75 	vldr	s15, [pc, #468]	; 80016e4 <main+0x40c>
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001718 <main+0x440>
 8001518:	eddf 7a76 	vldr	s15, [pc, #472]	; 80016f4 <main+0x41c>
 800151c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001520:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001524:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001714 <main+0x43c>
 8001528:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001718 <main+0x440>
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <main+0x420>)
 8001536:	edc3 7a02 	vstr	s15, [r3, #8]
	yr[3] = (m*y[5]*y[4])/(h*w);
 800153a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80016f0 <main+0x418>
 800153e:	eddf 7a69 	vldr	s15, [pc, #420]	; 80016e4 <main+0x40c>
 8001542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001546:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80016f4 <main+0x41c>
 800154a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800154e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001714 <main+0x43c>
 8001552:	eddf 7a71 	vldr	s15, [pc, #452]	; 8001718 <main+0x440>
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <main+0x420>)
 8001560:	edc3 7a03 	vstr	s15, [r3, #12]
	zr[0] = (m*(h-z[5])*(w-z[4]))/(h*w);
 8001564:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001714 <main+0x43c>
 8001568:	eddf 7a64 	vldr	s15, [pc, #400]	; 80016fc <main+0x424>
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80016e4 <main+0x40c>
 8001574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001578:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001718 <main+0x440>
 800157c:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001700 <main+0x428>
 8001580:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001584:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001588:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001714 <main+0x43c>
 800158c:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001718 <main+0x440>
 8001590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <main+0x42c>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
	zr[1] = (m*(h-z[5])*z[4])/(h*w);
 800159e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001714 <main+0x43c>
 80015a2:	eddf 7a56 	vldr	s15, [pc, #344]	; 80016fc <main+0x424>
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80016e4 <main+0x40c>
 80015ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001700 <main+0x428>
 80015b6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015ba:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001714 <main+0x43c>
 80015be:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001718 <main+0x440>
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <main+0x42c>)
 80015cc:	edc3 7a01 	vstr	s15, [r3, #4]
	zr[2] = (m*z[5]*(w-z[4]))/(h*w);
 80015d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80016fc <main+0x424>
 80015d4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80016e4 <main+0x40c>
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001718 <main+0x440>
 80015e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001700 <main+0x428>
 80015e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001714 <main+0x43c>
 80015f0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8001718 <main+0x440>
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <main+0x42c>)
 80015fe:	edc3 7a02 	vstr	s15, [r3, #8]
	zr[3] = (m*z[5]*z[4])/(h*w);
 8001602:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80016fc <main+0x424>
 8001606:	eddf 7a37 	vldr	s15, [pc, #220]	; 80016e4 <main+0x40c>
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001700 <main+0x428>
 8001612:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001616:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001714 <main+0x43c>
 800161a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8001718 <main+0x440>
 800161e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <main+0x42c>)
 8001628:	edc3 7a03 	vstr	s15, [r3, #12]
	pr[0] = (m*(h-p[5])*(w-p[4]))/(h*w);
 800162c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001714 <main+0x43c>
 8001630:	eddf 7a35 	vldr	s15, [pc, #212]	; 8001708 <main+0x430>
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80016e4 <main+0x40c>
 800163c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001640:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001718 <main+0x440>
 8001644:	eddf 7a31 	vldr	s15, [pc, #196]	; 800170c <main+0x434>
 8001648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001650:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001714 <main+0x43c>
 8001654:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001718 <main+0x440>
 8001658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <main+0x438>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
	pr[1] = (m*(h-p[5])*p[4])/(h*w);
 8001666:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001714 <main+0x43c>
 800166a:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001708 <main+0x430>
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016e4 <main+0x40c>
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800170c <main+0x434>
 800167e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001682:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001714 <main+0x43c>
 8001686:	eddf 7a24 	vldr	s15, [pc, #144]	; 8001718 <main+0x440>
 800168a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <main+0x438>)
 8001694:	edc3 7a01 	vstr	s15, [r3, #4]
	pr[2] = (m*p[5]*(w-p[4]))/(h*w);
 8001698:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001708 <main+0x430>
 800169c:	eddf 7a11 	vldr	s15, [pc, #68]	; 80016e4 <main+0x40c>
 80016a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001718 <main+0x440>
 80016a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800170c <main+0x434>
 80016ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016b4:	e032      	b.n	800171c <main+0x444>
 80016b6:	bf00      	nop
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	20000120 	.word	0x20000120
 80016c0:	20000168 	.word	0x20000168
 80016c4:	200001b0 	.word	0x200001b0
 80016c8:	200001f8 	.word	0x200001f8
 80016cc:	200000d8 	.word	0x200000d8
 80016d0:	40020800 	.word	0x40020800
 80016d4:	20000304 	.word	0x20000304
 80016d8:	2000032c 	.word	0x2000032c
 80016dc:	20000084 	.word	0x20000084
 80016e0:	43d78000 	.word	0x43d78000
 80016e4:	3fc7ae14 	.word	0x3fc7ae14
 80016e8:	440dd333 	.word	0x440dd333
 80016ec:	200004e8 	.word	0x200004e8
 80016f0:	44002000 	.word	0x44002000
 80016f4:	44124000 	.word	0x44124000
 80016f8:	20000500 	.word	0x20000500
 80016fc:	440c799a 	.word	0x440c799a
 8001700:	43b8c28f 	.word	0x43b8c28f
 8001704:	20000518 	.word	0x20000518
 8001708:	4422f333 	.word	0x4422f333
 800170c:	44351333 	.word	0x44351333
 8001710:	20000530 	.word	0x20000530
 8001714:	44852000 	.word	0x44852000
 8001718:	44924000 	.word	0x44924000
 800171c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001714 <main+0x43c>
 8001720:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8001718 <main+0x440>
 8001724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172c:	4bba      	ldr	r3, [pc, #744]	; (8001a18 <main+0x740>)
 800172e:	edc3 7a02 	vstr	s15, [r3, #8]
	pr[3] = (m*p[5]*p[4])/(h*w);
 8001732:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001a1c <main+0x744>
 8001736:	eddf 7aba 	vldr	s15, [pc, #744]	; 8001a20 <main+0x748>
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001a24 <main+0x74c>
 8001742:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001746:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001a28 <main+0x750>
 800174a:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8001a2c <main+0x754>
 800174e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001756:	4bb0      	ldr	r3, [pc, #704]	; (8001a18 <main+0x740>)
 8001758:	edc3 7a03 	vstr	s15, [r3, #12]
	xc[0] = x[0]/xr[0];
 800175c:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8001a30 <main+0x758>
 8001760:	4bb4      	ldr	r3, [pc, #720]	; (8001a34 <main+0x75c>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176a:	4bb3      	ldr	r3, [pc, #716]	; (8001a38 <main+0x760>)
 800176c:	edc3 7a00 	vstr	s15, [r3]
	xc[1] = x[1]/xr[1];
 8001770:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8001a3c <main+0x764>
 8001774:	4baf      	ldr	r3, [pc, #700]	; (8001a34 <main+0x75c>)
 8001776:	ed93 7a01 	vldr	s14, [r3, #4]
 800177a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177e:	4bae      	ldr	r3, [pc, #696]	; (8001a38 <main+0x760>)
 8001780:	edc3 7a01 	vstr	s15, [r3, #4]
	xc[2] = x[2]/xr[2];
 8001784:	eddf 6aae 	vldr	s13, [pc, #696]	; 8001a40 <main+0x768>
 8001788:	4baa      	ldr	r3, [pc, #680]	; (8001a34 <main+0x75c>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001792:	4ba9      	ldr	r3, [pc, #676]	; (8001a38 <main+0x760>)
 8001794:	edc3 7a02 	vstr	s15, [r3, #8]
	xc[3] = x[3]/xr[3];
 8001798:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001a44 <main+0x76c>
 800179c:	4ba5      	ldr	r3, [pc, #660]	; (8001a34 <main+0x75c>)
 800179e:	ed93 7a03 	vldr	s14, [r3, #12]
 80017a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a6:	4ba4      	ldr	r3, [pc, #656]	; (8001a38 <main+0x760>)
 80017a8:	edc3 7a03 	vstr	s15, [r3, #12]
	yc[0] = y[0]/yr[0];
 80017ac:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8001a48 <main+0x770>
 80017b0:	4ba6      	ldr	r3, [pc, #664]	; (8001a4c <main+0x774>)
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	4ba5      	ldr	r3, [pc, #660]	; (8001a50 <main+0x778>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]
	yc[1] = y[1]/yr[1];
 80017c0:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8001a54 <main+0x77c>
 80017c4:	4ba1      	ldr	r3, [pc, #644]	; (8001a4c <main+0x774>)
 80017c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ce:	4ba0      	ldr	r3, [pc, #640]	; (8001a50 <main+0x778>)
 80017d0:	edc3 7a01 	vstr	s15, [r3, #4]
	yc[2] = y[2]/yr[2];
 80017d4:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8001a58 <main+0x780>
 80017d8:	4b9c      	ldr	r3, [pc, #624]	; (8001a4c <main+0x774>)
 80017da:	ed93 7a02 	vldr	s14, [r3, #8]
 80017de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e2:	4b9b      	ldr	r3, [pc, #620]	; (8001a50 <main+0x778>)
 80017e4:	edc3 7a02 	vstr	s15, [r3, #8]
	yc[3] = y[3]/yr[3];
 80017e8:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8001a5c <main+0x784>
 80017ec:	4b97      	ldr	r3, [pc, #604]	; (8001a4c <main+0x774>)
 80017ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80017f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f6:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <main+0x778>)
 80017f8:	edc3 7a03 	vstr	s15, [r3, #12]
	zc[0] = z[0]/zr[0];
 80017fc:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001a60 <main+0x788>
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <main+0x78c>)
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	4b97      	ldr	r3, [pc, #604]	; (8001a68 <main+0x790>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
	zc[1] = z[1]/zr[1];
 8001810:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001a6c <main+0x794>
 8001814:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <main+0x78c>)
 8001816:	ed93 7a01 	vldr	s14, [r3, #4]
 800181a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181e:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <main+0x790>)
 8001820:	edc3 7a01 	vstr	s15, [r3, #4]
	zc[2] = z[2]/zr[2];
 8001824:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001a70 <main+0x798>
 8001828:	4b8e      	ldr	r3, [pc, #568]	; (8001a64 <main+0x78c>)
 800182a:	ed93 7a02 	vldr	s14, [r3, #8]
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <main+0x790>)
 8001834:	edc3 7a02 	vstr	s15, [r3, #8]
	zc[3] = z[3]/zr[3];
 8001838:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8001a74 <main+0x79c>
 800183c:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <main+0x78c>)
 800183e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001846:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <main+0x790>)
 8001848:	edc3 7a03 	vstr	s15, [r3, #12]
	pc[0] = p[0]/pr[0];
 800184c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001a78 <main+0x7a0>
 8001850:	4b71      	ldr	r3, [pc, #452]	; (8001a18 <main+0x740>)
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <main+0x7a4>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
	pc[1] = p[1]/pr[1];
 8001860:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001a80 <main+0x7a8>
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <main+0x740>)
 8001866:	ed93 7a01 	vldr	s14, [r3, #4]
 800186a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186e:	4b83      	ldr	r3, [pc, #524]	; (8001a7c <main+0x7a4>)
 8001870:	edc3 7a01 	vstr	s15, [r3, #4]
	pc[2] = p[2]/pr[2];
 8001874:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001a84 <main+0x7ac>
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <main+0x740>)
 800187a:	ed93 7a02 	vldr	s14, [r3, #8]
 800187e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001882:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <main+0x7a4>)
 8001884:	edc3 7a02 	vstr	s15, [r3, #8]
	pc[3] = p[3]/pr[3];
 8001888:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001a88 <main+0x7b0>
 800188c:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <main+0x740>)
 800188e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001896:	4b79      	ldr	r3, [pc, #484]	; (8001a7c <main+0x7a4>)
 8001898:	edc3 7a03 	vstr	s15, [r3, #12]
	rc[0] = 27306.9453;
 800189c:	4a7b      	ldr	r2, [pc, #492]	; (8001a8c <main+0x7b4>)
 800189e:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <main+0x7b8>)
 80018a0:	6013      	str	r3, [r2, #0]
	rc[1] = 23035.0215;
 80018a2:	4a7a      	ldr	r2, [pc, #488]	; (8001a8c <main+0x7b4>)
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <main+0x7bc>)
 80018a6:	6053      	str	r3, [r2, #4]
	rc[2] = 100504.188;
 80018a8:	4a78      	ldr	r2, [pc, #480]	; (8001a8c <main+0x7b4>)
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <main+0x7c0>)
 80018ac:	6093      	str	r3, [r2, #8]
	rc[3] = 124988.211;
 80018ae:	4a77      	ldr	r2, [pc, #476]	; (8001a8c <main+0x7b4>)
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <main+0x7c4>)
 80018b2:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 80018b4:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <main+0x7c8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f240 538e 	movw	r3, #1422	; 0x58e
 80018bc:	429a      	cmp	r2, r3
 80018be:	f000 82b7 	beq.w	8001e30 <main+0xb58>
 80018c2:	f240 538e 	movw	r3, #1422	; 0x58e
 80018c6:	429a      	cmp	r2, r3
 80018c8:	f300 830c 	bgt.w	8001ee4 <main+0xc0c>
 80018cc:	f240 5384 	movw	r3, #1412	; 0x584
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f000 829a 	beq.w	8001e0a <main+0xb32>
 80018d6:	f240 5384 	movw	r3, #1412	; 0x584
 80018da:	429a      	cmp	r2, r3
 80018dc:	f300 8302 	bgt.w	8001ee4 <main+0xc0c>
 80018e0:	2a13      	cmp	r2, #19
 80018e2:	dc79      	bgt.n	80019d8 <main+0x700>
 80018e4:	f112 0f03 	cmn.w	r2, #3
 80018e8:	da40      	bge.n	800196c <main+0x694>
				zerostate = 1;
				state = 0;
			}
			break;
		default:
			break;
 80018ea:	e2fb      	b.n	8001ee4 <main+0xc0c>
		switch (state) {
 80018ec:	f1a2 0373 	sub.w	r3, r2, #115	; 0x73
 80018f0:	2b1b      	cmp	r3, #27
 80018f2:	f200 82f7 	bhi.w	8001ee4 <main+0xc0c>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <main+0x624>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001c73 	.word	0x08001c73
 8001900:	08001ee5 	.word	0x08001ee5
 8001904:	08001ee5 	.word	0x08001ee5
 8001908:	08001ee5 	.word	0x08001ee5
 800190c:	08001ee5 	.word	0x08001ee5
 8001910:	08001ee5 	.word	0x08001ee5
 8001914:	08001ee5 	.word	0x08001ee5
 8001918:	08001ee5 	.word	0x08001ee5
 800191c:	08001ee5 	.word	0x08001ee5
 8001920:	08001ee5 	.word	0x08001ee5
 8001924:	08001ee5 	.word	0x08001ee5
 8001928:	08001ee5 	.word	0x08001ee5
 800192c:	08001ee5 	.word	0x08001ee5
 8001930:	08001ee5 	.word	0x08001ee5
 8001934:	08001ee5 	.word	0x08001ee5
 8001938:	08001ee5 	.word	0x08001ee5
 800193c:	08001ee5 	.word	0x08001ee5
 8001940:	08001d6d 	.word	0x08001d6d
 8001944:	08001ee5 	.word	0x08001ee5
 8001948:	08001ee5 	.word	0x08001ee5
 800194c:	08001ee5 	.word	0x08001ee5
 8001950:	08001ee5 	.word	0x08001ee5
 8001954:	08001ee5 	.word	0x08001ee5
 8001958:	08001ee5 	.word	0x08001ee5
 800195c:	08001ee5 	.word	0x08001ee5
 8001960:	08001ee5 	.word	0x08001ee5
 8001964:	08001df5 	.word	0x08001df5
 8001968:	08001e1b 	.word	0x08001e1b
 800196c:	1cd3      	adds	r3, r2, #3
 800196e:	2b16      	cmp	r3, #22
 8001970:	f200 82b8 	bhi.w	8001ee4 <main+0xc0c>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <main+0x6a4>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	08001aad 	.word	0x08001aad
 8001980:	080019f5 	.word	0x080019f5
 8001984:	080019e5 	.word	0x080019e5
 8001988:	08001b2f 	.word	0x08001b2f
 800198c:	08001b83 	.word	0x08001b83
 8001990:	08001c03 	.word	0x08001c03
 8001994:	08001ee5 	.word	0x08001ee5
 8001998:	08001ee5 	.word	0x08001ee5
 800199c:	08001ee5 	.word	0x08001ee5
 80019a0:	08001ee5 	.word	0x08001ee5
 80019a4:	08001ee5 	.word	0x08001ee5
 80019a8:	08001ee5 	.word	0x08001ee5
 80019ac:	08001ee5 	.word	0x08001ee5
 80019b0:	08001ee5 	.word	0x08001ee5
 80019b4:	08001c5f 	.word	0x08001c5f
 80019b8:	08001c91 	.word	0x08001c91
 80019bc:	08001caf 	.word	0x08001caf
 80019c0:	08001ee5 	.word	0x08001ee5
 80019c4:	08001ee5 	.word	0x08001ee5
 80019c8:	08001e41 	.word	0x08001e41
 80019cc:	08001e57 	.word	0x08001e57
 80019d0:	08001e83 	.word	0x08001e83
 80019d4:	08001ecf 	.word	0x08001ecf
 80019d8:	2a8e      	cmp	r2, #142	; 0x8e
 80019da:	f300 8283 	bgt.w	8001ee4 <main+0xc0c>
 80019de:	2a73      	cmp	r2, #115	; 0x73
 80019e0:	da84      	bge.n	80018ec <main+0x614>
			break;
 80019e2:	e27f      	b.n	8001ee4 <main+0xc0c>
			zerostate = 1;
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <main+0x7cc>)
 80019e6:	2301      	movs	r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
			state = -2;
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <main+0x7c8>)
 80019ec:	f06f 0301 	mvn.w	r3, #1
 80019f0:	6013      	str	r3, [r2, #0]
			break;
 80019f2:	e28c      	b.n	8001f0e <main+0xc36>
			if(zerostate == 0){
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <main+0x7cc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8275 	bne.w	8001ee8 <main+0xc10>
				initial_time = micros();
 80019fe:	f001 fc95 	bl	800332c <micros>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4928      	ldr	r1, [pc, #160]	; (8001aa8 <main+0x7d0>)
 8001a08:	e9c1 2300 	strd	r2, r3, [r1]
				state = -3;
 8001a0c:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <main+0x7c8>)
 8001a0e:	f06f 0302 	mvn.w	r3, #2
 8001a12:	6013      	str	r3, [r2, #0]
			break;
 8001a14:	e268      	b.n	8001ee8 <main+0xc10>
 8001a16:	bf00      	nop
 8001a18:	20000530 	.word	0x20000530
 8001a1c:	4422f333 	.word	0x4422f333
 8001a20:	3fc7ae14 	.word	0x3fc7ae14
 8001a24:	44351333 	.word	0x44351333
 8001a28:	44852000 	.word	0x44852000
 8001a2c:	44924000 	.word	0x44924000
 8001a30:	464c7400 	.word	0x464c7400
 8001a34:	200004e8 	.word	0x200004e8
 8001a38:	20000548 	.word	0x20000548
 8001a3c:	46276400 	.word	0x46276400
 8001a40:	46fc5800 	.word	0x46fc5800
 8001a44:	4716fa00 	.word	0x4716fa00
 8001a48:	4637e000 	.word	0x4637e000
 8001a4c:	20000500 	.word	0x20000500
 8001a50:	20000558 	.word	0x20000558
 8001a54:	46066000 	.word	0x46066000
 8001a58:	47091c00 	.word	0x47091c00
 8001a5c:	473cac00 	.word	0x473cac00
 8001a60:	4648c800 	.word	0x4648c800
 8001a64:	20000518 	.word	0x20000518
 8001a68:	20000568 	.word	0x20000568
 8001a6c:	45af0000 	.word	0x45af0000
 8001a70:	476f1000 	.word	0x476f1000
 8001a74:	46f3c000 	.word	0x46f3c000
 8001a78:	45fd2000 	.word	0x45fd2000
 8001a7c:	20000578 	.word	0x20000578
 8001a80:	45cb2000 	.word	0x45cb2000
 8001a84:	46ee4800 	.word	0x46ee4800
 8001a88:	478a2080 	.word	0x478a2080
 8001a8c:	20000588 	.word	0x20000588
 8001a90:	46d555e4 	.word	0x46d555e4
 8001a94:	46b3f60b 	.word	0x46b3f60b
 8001a98:	47c44c18 	.word	0x47c44c18
 8001a9c:	47f41e1b 	.word	0x47f41e1b
 8001aa0:	2000004c 	.word	0x2000004c
 8001aa4:	200004b0 	.word	0x200004b0
 8001aa8:	20000598 	.word	0x20000598
			if(micros() - initial_time >= 10000000){
 8001aac:	f001 fc3e 	bl	800332c <micros>
 8001ab0:	4bb5      	ldr	r3, [pc, #724]	; (8001d88 <main+0xab0>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	ebb0 0a02 	subs.w	sl, r0, r2
 8001aba:	eb61 0b03 	sbc.w	fp, r1, r3
 8001abe:	4bb3      	ldr	r3, [pc, #716]	; (8001d8c <main+0xab4>)
 8001ac0:	459a      	cmp	sl, r3
 8001ac2:	f17b 0300 	sbcs.w	r3, fp, #0
 8001ac6:	f0c0 8211 	bcc.w	8001eec <main+0xc14>
				hx711_tare(&loadcell, 4, 1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2104      	movs	r1, #4
 8001ace:	48b0      	ldr	r0, [pc, #704]	; (8001d90 <main+0xab8>)
 8001ad0:	f001 fd5c 	bl	800358c <hx711_tare>
				hx711_tare(&loadcell2, 4, 2);
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	48ae      	ldr	r0, [pc, #696]	; (8001d94 <main+0xabc>)
 8001ada:	f001 fd57 	bl	800358c <hx711_tare>
				hx711_calibration(&loadcell, 2, rc[0]);
 8001ade:	4bae      	ldr	r3, [pc, #696]	; (8001d98 <main+0xac0>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	2102      	movs	r1, #2
 8001aea:	48a9      	ldr	r0, [pc, #676]	; (8001d90 <main+0xab8>)
 8001aec:	f001 fe1c 	bl	8003728 <hx711_calibration>
				hx711_calibration(&loadcell2, 2,  rc[1]);
 8001af0:	4ba9      	ldr	r3, [pc, #676]	; (8001d98 <main+0xac0>)
 8001af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	2102      	movs	r1, #2
 8001afc:	48a5      	ldr	r0, [pc, #660]	; (8001d94 <main+0xabc>)
 8001afe:	f001 fe13 	bl	8003728 <hx711_calibration>
				hx711_calibration(&loadcell, 1,  rc[2]);
 8001b02:	4ba5      	ldr	r3, [pc, #660]	; (8001d98 <main+0xac0>)
 8001b04:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	48a0      	ldr	r0, [pc, #640]	; (8001d90 <main+0xab8>)
 8001b10:	f001 fe0a 	bl	8003728 <hx711_calibration>
				hx711_calibration(&loadcell2, 1,  rc[3]);
 8001b14:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <main+0xac0>)
 8001b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	2101      	movs	r1, #1
 8001b20:	489c      	ldr	r0, [pc, #624]	; (8001d94 <main+0xabc>)
 8001b22:	f001 fe01 	bl	8003728 <hx711_calibration>
				state = 0;
 8001b26:	4a9d      	ldr	r2, [pc, #628]	; (8001d9c <main+0xac4>)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6013      	str	r3, [r2, #0]
			break;
 8001b2c:	e1de      	b.n	8001eec <main+0xc14>
			if(loadcell.weightB + loadcell2.weightB + loadcell.weightA + loadcell2.weightA >= 1.80){
 8001b2e:	4b98      	ldr	r3, [pc, #608]	; (8001d90 <main+0xab8>)
 8001b30:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001b34:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <main+0xabc>)
 8001b36:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3e:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <main+0xab8>)
 8001b40:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <main+0xabc>)
 8001b4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	ee17 0a90 	vmov	r0, s15
 8001b56:	f7fe fca3 	bl	80004a0 <__aeabi_f2d>
 8001b5a:	a389      	add	r3, pc, #548	; (adr r3, 8001d80 <main+0xaa8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe ff7c 	bl	8000a5c <__aeabi_dcmpge>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <main+0x894>
			break;
 8001b6a:	e1d0      	b.n	8001f0e <main+0xc36>
				weight_time = micros();
 8001b6c:	f001 fbde 	bl	800332c <micros>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	498a      	ldr	r1, [pc, #552]	; (8001da0 <main+0xac8>)
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
				state = 1;
 8001b7a:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <main+0xac4>)
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]
			break;
 8001b80:	e1c5      	b.n	8001f0e <main+0xc36>
			if(loadcell.weightB + loadcell2.weightB + loadcell.weightA + loadcell2.weightA <= 1.80){
 8001b82:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <main+0xab8>)
 8001b84:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001b88:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <main+0xabc>)
 8001b8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <main+0xab8>)
 8001b94:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9c:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <main+0xabc>)
 8001b9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	ee17 0a90 	vmov	r0, s15
 8001baa:	f7fe fc79 	bl	80004a0 <__aeabi_f2d>
 8001bae:	a374      	add	r3, pc, #464	; (adr r3, 8001d80 <main+0xaa8>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe ff48 	bl	8000a48 <__aeabi_dcmple>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <main+0x8ec>
				state = 0;
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <main+0xac4>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6013      	str	r3, [r2, #0]
			if(micros() - weight_time >= 5000000){
 8001bc4:	f001 fbb2 	bl	800332c <micros>
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <main+0xac8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	1a86      	subs	r6, r0, r2
 8001bd0:	623e      	str	r6, [r7, #32]
 8001bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <main+0xacc>)
 8001bda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bde:	4602      	mov	r2, r0
 8001be0:	429a      	cmp	r2, r3
 8001be2:	460b      	mov	r3, r1
 8001be4:	f173 0300 	sbcs.w	r3, r3, #0
 8001be8:	f0c0 8182 	bcc.w	8001ef0 <main+0xc18>
				state = 2;
 8001bec:	4a6b      	ldr	r2, [pc, #428]	; (8001d9c <main+0xac4>)
 8001bee:	2302      	movs	r3, #2
 8001bf0:	6013      	str	r3, [r2, #0]
				bluetooth_time = micros();
 8001bf2:	f001 fb9b 	bl	800332c <micros>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	496b      	ldr	r1, [pc, #428]	; (8001da8 <main+0xad0>)
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001c00:	e176      	b.n	8001ef0 <main+0xc18>
			TX_BUFFER[0] = '1';
 8001c02:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <main+0xad4>)
 8001c04:	2331      	movs	r3, #49	; 0x31
 8001c06:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 10);
 8001c08:	230a      	movs	r3, #10
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4967      	ldr	r1, [pc, #412]	; (8001dac <main+0xad4>)
 8001c0e:	4868      	ldr	r0, [pc, #416]	; (8001db0 <main+0xad8>)
 8001c10:	f008 f9bf 	bl	8009f92 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8001c14:	2201      	movs	r2, #1
 8001c16:	4967      	ldr	r1, [pc, #412]	; (8001db4 <main+0xadc>)
 8001c18:	4865      	ldr	r0, [pc, #404]	; (8001db0 <main+0xad8>)
 8001c1a:	f008 fa4c 	bl	800a0b6 <HAL_UART_Receive_IT>
			if(inputchar == '1'){
 8001c1e:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <main+0xae0>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	2b31      	cmp	r3, #49	; 0x31
 8001c26:	d102      	bne.n	8001c2e <main+0x956>
				state = 11;
 8001c28:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <main+0xac4>)
 8001c2a:	230b      	movs	r3, #11
 8001c2c:	6013      	str	r3, [r2, #0]
			if(micros() - bluetooth_time >= 5000000){
 8001c2e:	f001 fb7d 	bl	800332c <micros>
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <main+0xad0>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	1a86      	subs	r6, r0, r2
 8001c3a:	61be      	str	r6, [r7, #24]
 8001c3c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <main+0xacc>)
 8001c44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c48:	4602      	mov	r2, r0
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	f173 0300 	sbcs.w	r3, r3, #0
 8001c52:	f0c0 814f 	bcc.w	8001ef4 <main+0xc1c>
				state = 0;
 8001c56:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <main+0xac4>)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6013      	str	r3, [r2, #0]
			break;
 8001c5c:	e14a      	b.n	8001ef4 <main+0xc1c>
			ptg1 = 597;
 8001c5e:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <main+0xae4>)
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <main+0xae8>)
 8001c62:	6013      	str	r3, [r2, #0]
			activate1 = 1;
 8001c64:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <main+0xaec>)
 8001c66:	2301      	movs	r3, #1
 8001c68:	6013      	str	r3, [r2, #0]
			state = 115;
 8001c6a:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <main+0xac4>)
 8001c6c:	2373      	movs	r3, #115	; 0x73
 8001c6e:	6013      	str	r3, [r2, #0]
			break;
 8001c70:	e14d      	b.n	8001f0e <main+0xc36>
			if (activate1 == 0) {
 8001c72:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <main+0xaec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 813e 	bne.w	8001ef8 <main+0xc20>
				ptg1 = 588;
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <main+0xae4>)
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <main+0xaf0>)
 8001c80:	6013      	str	r3, [r2, #0]
				activate1 = 1;
 8001c82:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <main+0xaec>)
 8001c84:	2301      	movs	r3, #1
 8001c86:	6013      	str	r3, [r2, #0]
				state = 12;
 8001c88:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <main+0xac4>)
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	6013      	str	r3, [r2, #0]
			break;
 8001c8e:	e133      	b.n	8001ef8 <main+0xc20>
			if (activate1 == 0) {
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <main+0xaec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8131 	bne.w	8001efc <main+0xc24>
				ptg2 = 617;
 8001c9a:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <main+0xaf4>)
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <main+0xaf8>)
 8001c9e:	6013      	str	r3, [r2, #0]
				activate2 = 1;
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <main+0xafc>)
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	6013      	str	r3, [r2, #0]
				state = 13;
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <main+0xac4>)
 8001ca8:	230d      	movs	r3, #13
 8001caa:	6013      	str	r3, [r2, #0]
			break;
 8001cac:	e126      	b.n	8001efc <main+0xc24>
			if (activate2 == 0) {
 8001cae:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <main+0xafc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 8124 	bne.w	8001f00 <main+0xc28>
				if (range1 <= 180 && range2 >= 200) {
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <main+0xb00>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001ddc <main+0xb04>
 8001cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d80c      	bhi.n	8001ce6 <main+0xa0e>
 8001ccc:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <main+0xb08>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001de4 <main+0xb0c>
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	db02      	blt.n	8001ce6 <main+0xa0e>
					state = 142;
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <main+0xac4>)
 8001ce2:	238e      	movs	r3, #142	; 0x8e
 8001ce4:	6013      	str	r3, [r2, #0]
				if (range2 <= 180 && range1 >= 200) {
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <main+0xb08>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ddc <main+0xb04>
 8001cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d80d      	bhi.n	8001d16 <main+0xa3e>
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <main+0xb00>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001de4 <main+0xb0c>
 8001d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	db03      	blt.n	8001d16 <main+0xa3e>
					state = 141;
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <main+0xac4>)
 8001d10:	238d      	movs	r3, #141	; 0x8d
 8001d12:	6013      	str	r3, [r2, #0]
			break;
 8001d14:	e0f4      	b.n	8001f00 <main+0xc28>
					if(chance == 0){
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <main+0xb10>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d106      	bne.n	8001d2e <main+0xa56>
						chance = micros();
 8001d20:	f001 fb04 	bl	800332c <micros>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	492f      	ldr	r1, [pc, #188]	; (8001de8 <main+0xb10>)
 8001d2a:	e9c1 2300 	strd	r2, r3, [r1]
					if(micros() - chance >= 3000000){
 8001d2e:	f001 fafd 	bl	800332c <micros>
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <main+0xb10>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	1a86      	subs	r6, r0, r2
 8001d3a:	613e      	str	r6, [r7, #16]
 8001d3c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <main+0xb14>)
 8001d44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d48:	4602      	mov	r2, r0
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	f173 0300 	sbcs.w	r3, r3, #0
 8001d52:	f0c0 80d5 	bcc.w	8001f00 <main+0xc28>
						state = 132;
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <main+0xac4>)
 8001d58:	2384      	movs	r3, #132	; 0x84
 8001d5a:	6013      	str	r3, [r2, #0]
						chance = 0;
 8001d5c:	4922      	ldr	r1, [pc, #136]	; (8001de8 <main+0xb10>)
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001d6a:	e0c9      	b.n	8001f00 <main+0xc28>
			zerostate = 1;
 8001d6c:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <main+0xb18>)
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
			state = 0;
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <main+0xac4>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	6013      	str	r3, [r2, #0]
		    break;
 8001d78:	e0c9      	b.n	8001f0e <main+0xc36>
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	cccccccd 	.word	0xcccccccd
 8001d84:	3ffccccc 	.word	0x3ffccccc
 8001d88:	20000598 	.word	0x20000598
 8001d8c:	00989680 	.word	0x00989680
 8001d90:	20000304 	.word	0x20000304
 8001d94:	2000032c 	.word	0x2000032c
 8001d98:	20000588 	.word	0x20000588
 8001d9c:	2000004c 	.word	0x2000004c
 8001da0:	200005a0 	.word	0x200005a0
 8001da4:	004c4b40 	.word	0x004c4b40
 8001da8:	200005a8 	.word	0x200005a8
 8001dac:	200002cc 	.word	0x200002cc
 8001db0:	20000240 	.word	0x20000240
 8001db4:	200002c8 	.word	0x200002c8
 8001db8:	200002ce 	.word	0x200002ce
 8001dbc:	200004c4 	.word	0x200004c4
 8001dc0:	44154000 	.word	0x44154000
 8001dc4:	200004b8 	.word	0x200004b8
 8001dc8:	44130000 	.word	0x44130000
 8001dcc:	200004c8 	.word	0x200004c8
 8001dd0:	441a4000 	.word	0x441a4000
 8001dd4:	200004bc 	.word	0x200004bc
 8001dd8:	200004a8 	.word	0x200004a8
 8001ddc:	43340000 	.word	0x43340000
 8001de0:	200004ac 	.word	0x200004ac
 8001de4:	43480000 	.word	0x43480000
 8001de8:	200004e0 	.word	0x200004e0
 8001dec:	002dc6c0 	.word	0x002dc6c0
 8001df0:	200004b0 	.word	0x200004b0
			ptg2 = 680;
 8001df4:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <main+0xcf4>)
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <main+0xcf8>)
 8001df8:	6013      	str	r3, [r2, #0]
			activate2 = 1;
 8001dfa:	4a76      	ldr	r2, [pc, #472]	; (8001fd4 <main+0xcfc>)
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
			state = 1412;
 8001e00:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <main+0xd00>)
 8001e02:	f240 5384 	movw	r3, #1412	; 0x584
 8001e06:	6013      	str	r3, [r2, #0]
			break;
 8001e08:	e081      	b.n	8001f0e <main+0xc36>
			if (activate2 == 0) {
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <main+0xcfc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d178      	bne.n	8001f04 <main+0xc2c>
				state = 15;
 8001e12:	4a71      	ldr	r2, [pc, #452]	; (8001fd8 <main+0xd00>)
 8001e14:	230f      	movs	r3, #15
 8001e16:	6013      	str	r3, [r2, #0]
			break;
 8001e18:	e074      	b.n	8001f04 <main+0xc2c>
			ptg1 = 655;
 8001e1a:	4a70      	ldr	r2, [pc, #448]	; (8001fdc <main+0xd04>)
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <main+0xd08>)
 8001e1e:	6013      	str	r3, [r2, #0]
			activate1 = 1;
 8001e20:	4a70      	ldr	r2, [pc, #448]	; (8001fe4 <main+0xd0c>)
 8001e22:	2301      	movs	r3, #1
 8001e24:	6013      	str	r3, [r2, #0]
			state = 1422;
 8001e26:	4a6c      	ldr	r2, [pc, #432]	; (8001fd8 <main+0xd00>)
 8001e28:	f240 538e 	movw	r3, #1422	; 0x58e
 8001e2c:	6013      	str	r3, [r2, #0]
			break;
 8001e2e:	e06e      	b.n	8001f0e <main+0xc36>
			if (activate1 == 0) {
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <main+0xd0c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d167      	bne.n	8001f08 <main+0xc30>
				state = 15;
 8001e38:	4a67      	ldr	r2, [pc, #412]	; (8001fd8 <main+0xd00>)
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	6013      	str	r3, [r2, #0]
			break;
 8001e3e:	e063      	b.n	8001f08 <main+0xc30>
			ptg1 = 0;
 8001e40:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <main+0xd04>)
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	6013      	str	r3, [r2, #0]
			activate1 = 1;
 8001e48:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <main+0xd0c>)
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
			state = 17;
 8001e4e:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <main+0xd00>)
 8001e50:	2311      	movs	r3, #17
 8001e52:	6013      	str	r3, [r2, #0]
			break;
 8001e54:	e05b      	b.n	8001f0e <main+0xc36>
			if (distancemetre1 <= 500) {
 8001e56:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <main+0xd10>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001fec <main+0xd14>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d900      	bls.n	8001e6c <main+0xb94>
			break;
 8001e6a:	e050      	b.n	8001f0e <main+0xc36>
				ptg2 = 0;
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <main+0xcf4>)
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	6013      	str	r3, [r2, #0]
				activate2 = 1;
 8001e74:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <main+0xcfc>)
 8001e76:	2301      	movs	r3, #1
 8001e78:	6013      	str	r3, [r2, #0]
				state = 18;
 8001e7a:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <main+0xd00>)
 8001e7c:	2312      	movs	r3, #18
 8001e7e:	6013      	str	r3, [r2, #0]
			break;
 8001e80:	e045      	b.n	8001f0e <main+0xc36>
			if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 8001e82:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <main+0xd10>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001fec <main+0xd14>
 8001e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	d900      	bls.n	8001e98 <main+0xbc0>
			break;
 8001e96:	e03a      	b.n	8001f0e <main+0xc36>
			if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <main+0xd18>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001ff4 <main+0xd1c>
 8001ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	d900      	bls.n	8001eae <main+0xbd6>
			break;
 8001eac:	e02f      	b.n	8001f0e <main+0xc36>
				ptg3 = 635;
 8001eae:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <main+0xd20>)
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <main+0xd24>)
 8001eb2:	6013      	str	r3, [r2, #0]
				in5 = 1;
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <main+0xd28>)
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]
				in6 = 0;
 8001eba:	4a52      	ldr	r2, [pc, #328]	; (8002004 <main+0xd2c>)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6013      	str	r3, [r2, #0]
				activate3 = 1;
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <main+0xd30>)
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]
				state = 19;
 8001ec6:	4a44      	ldr	r2, [pc, #272]	; (8001fd8 <main+0xd00>)
 8001ec8:	2313      	movs	r3, #19
 8001eca:	6013      	str	r3, [r2, #0]
			break;
 8001ecc:	e01f      	b.n	8001f0e <main+0xc36>
			if (activate3 == 0) {
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <main+0xd30>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d11a      	bne.n	8001f0c <main+0xc34>
				zerostate = 1;
 8001ed6:	4a4d      	ldr	r2, [pc, #308]	; (800200c <main+0xd34>)
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6013      	str	r3, [r2, #0]
				state = 0;
 8001edc:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <main+0xd00>)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6013      	str	r3, [r2, #0]
			break;
 8001ee2:	e013      	b.n	8001f0c <main+0xc34>
			break;
 8001ee4:	bf00      	nop
 8001ee6:	e012      	b.n	8001f0e <main+0xc36>
			break;
 8001ee8:	bf00      	nop
 8001eea:	e010      	b.n	8001f0e <main+0xc36>
			break;
 8001eec:	bf00      	nop
 8001eee:	e00e      	b.n	8001f0e <main+0xc36>
			break;
 8001ef0:	bf00      	nop
 8001ef2:	e00c      	b.n	8001f0e <main+0xc36>
			break;
 8001ef4:	bf00      	nop
 8001ef6:	e00a      	b.n	8001f0e <main+0xc36>
			break;
 8001ef8:	bf00      	nop
 8001efa:	e008      	b.n	8001f0e <main+0xc36>
			break;
 8001efc:	bf00      	nop
 8001efe:	e006      	b.n	8001f0e <main+0xc36>
			break;
 8001f00:	bf00      	nop
 8001f02:	e004      	b.n	8001f0e <main+0xc36>
			break;
 8001f04:	bf00      	nop
 8001f06:	e002      	b.n	8001f0e <main+0xc36>
			break;
 8001f08:	bf00      	nop
 8001f0a:	e000      	b.n	8001f0e <main+0xc36>
			break;
 8001f0c:	bf00      	nop
		}
		if (emergency == 1) {
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <main+0xd38>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <main+0xc4a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f16:	2201      	movs	r2, #1
 8001f18:	2120      	movs	r1, #32
 8001f1a:	483e      	ldr	r0, [pc, #248]	; (8002014 <main+0xd3c>)
 8001f1c:	f003 fdc4 	bl	8005aa8 <HAL_GPIO_WritePin>
 8001f20:	e004      	b.n	8001f2c <main+0xc54>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	483b      	ldr	r0, [pc, #236]	; (8002014 <main+0xd3c>)
 8001f28:	f003 fdbe 	bl	8005aa8 <HAL_GPIO_WritePin>
		}
//	  Limit switch
		limitswitchlowpass();
 8001f2c:	f002 f802 	bl	8003f34 <limitswitchlowpass>
//	  set zero
		setzero();
 8001f30:	f002 fd3a 	bl	80049a8 <setzero>
//	  Distance measurement
		distancemeasurement();
 8001f34:	f002 f8b0 	bl	8004098 <distancemeasurement>
//	  velocity measurement
		if (micros() - Timestamp_Encoder >= 100) {
 8001f38:	f001 f9f8 	bl	800332c <micros>
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <main+0xd40>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	1a84      	subs	r4, r0, r2
 8001f44:	eb61 0503 	sbc.w	r5, r1, r3
 8001f48:	2c64      	cmp	r4, #100	; 0x64
 8001f4a:	f175 0300 	sbcs.w	r3, r5, #0
 8001f4e:	d301      	bcc.n	8001f54 <main+0xc7c>
			velocitymeasurement();
 8001f50:	f002 fa92 	bl	8004478 <velocitymeasurement>
		}
//	  go to position
		if (activate1 == 1 && zerostate == 0) {
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <main+0xd0c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <main+0xc94>
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <main+0xd34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <main+0xc94>
			gotoposition(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f002 fbc3 	bl	80046f0 <gotoposition>
 8001f6a:	e00b      	b.n	8001f84 <main+0xcac>
		} else if (activate1 == 1 && zerostate == 0) {
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <main+0xd0c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <main+0xcac>
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <main+0xd34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <main+0xcac>
			require1 = 0;
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <main+0xd44>)
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	6013      	str	r3, [r2, #0]
		}
		if (activate2 == 1 && zerostate == 0) {
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <main+0xcfc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <main+0xcc4>
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <main+0xd34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <main+0xcc4>
			gotoposition(2);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f002 fbab 	bl	80046f0 <gotoposition>
 8001f9a:	e00b      	b.n	8001fb4 <main+0xcdc>
		} else if (activate2 == 1 && zerostate == 0) {
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <main+0xcfc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <main+0xcdc>
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <main+0xd34>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <main+0xcdc>
			require2 = 0;
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <main+0xd48>)
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
		}
		if (activate3 == 1 && zerostate == 0) {
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <main+0xd30>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d133      	bne.n	8002024 <main+0xd4c>
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <main+0xd34>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d12f      	bne.n	8002024 <main+0xd4c>
			gotoposition(3);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f002 fb93 	bl	80046f0 <gotoposition>
 8001fca:	e037      	b.n	800203c <main+0xd64>
 8001fcc:	200004c8 	.word	0x200004c8
 8001fd0:	442a0000 	.word	0x442a0000
 8001fd4:	200004bc 	.word	0x200004bc
 8001fd8:	2000004c 	.word	0x2000004c
 8001fdc:	200004c4 	.word	0x200004c4
 8001fe0:	4423c000 	.word	0x4423c000
 8001fe4:	200004b8 	.word	0x200004b8
 8001fe8:	20000430 	.word	0x20000430
 8001fec:	43fa0000 	.word	0x43fa0000
 8001ff0:	20000434 	.word	0x20000434
 8001ff4:	437a0000 	.word	0x437a0000
 8001ff8:	200004cc 	.word	0x200004cc
 8001ffc:	441ec000 	.word	0x441ec000
 8002000:	200002f8 	.word	0x200002f8
 8002004:	200002fc 	.word	0x200002fc
 8002008:	200004c0 	.word	0x200004c0
 800200c:	200004b0 	.word	0x200004b0
 8002010:	200004d8 	.word	0x200004d8
 8002014:	40020000 	.word	0x40020000
 8002018:	200004d0 	.word	0x200004d0
 800201c:	200003e4 	.word	0x200003e4
 8002020:	200003fc 	.word	0x200003fc
		} else if (activate3 == 1 && zerostate == 0) {
 8002024:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <main+0xefc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <main+0xd64>
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <main+0xf00>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <main+0xd64>
			require3 = 0;
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <main+0xf04>)
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
		}

//	  PWM drive
		pwmdrive();
 800203c:	f002 fdc8 	bl	8004bd0 <pwmdrive>
		//	  Load cell
		if (micros() - hx_711timestamp >= 500000) {
 8002040:	f001 f974 	bl	800332c <micros>
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <main+0xf08>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	1a86      	subs	r6, r0, r2
 800204c:	60be      	str	r6, [r7, #8]
 800204e:	eb61 0303 	sbc.w	r3, r1, r3
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <main+0xf0c>)
 8002056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205a:	4602      	mov	r2, r0
 800205c:	429a      	cmp	r2, r3
 800205e:	460b      	mov	r3, r1
 8002060:	f173 0300 	sbcs.w	r3, r3, #0
 8002064:	d32e      	bcc.n	80020c4 <main+0xdec>
			if (loadcellc1 == 10 && loadcellc2 == 10 && loadcellc3 == 10
 8002066:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <main+0xf10>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d12a      	bne.n	80020c4 <main+0xdec>
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <main+0xf14>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d126      	bne.n	80020c4 <main+0xdec>
 8002076:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <main+0xf18>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d122      	bne.n	80020c4 <main+0xdec>
					&& loadcellc4 == 10) {
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <main+0xf1c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b0a      	cmp	r3, #10
 8002084:	d11e      	bne.n	80020c4 <main+0xdec>
				hx_711timestamp = micros();
 8002086:	f001 f951 	bl	800332c <micros>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4954      	ldr	r1, [pc, #336]	; (80021e0 <main+0xf08>)
 8002090:	e9c1 2300 	strd	r2, r3, [r1]
				loadcellc1 = 4;
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <main+0xf10>)
 8002096:	2304      	movs	r3, #4
 8002098:	7013      	strb	r3, [r2, #0]
				loadcellc2 = 4;
 800209a:	4a54      	ldr	r2, [pc, #336]	; (80021ec <main+0xf14>)
 800209c:	2304      	movs	r3, #4
 800209e:	7013      	strb	r3, [r2, #0]
				loadcellc3 = 4;
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <main+0xf18>)
 80020a2:	2304      	movs	r3, #4
 80020a4:	7013      	strb	r3, [r2, #0]
				loadcellc4 = 4;
 80020a6:	4a53      	ldr	r2, [pc, #332]	; (80021f4 <main+0xf1c>)
 80020a8:	2304      	movs	r3, #4
 80020aa:	7013      	strb	r3, [r2, #0]
				ave1 = 0;
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <main+0xf20>)
 80020ae:	2300      	movs	r3, #0
 80020b0:	6013      	str	r3, [r2, #0]
				ave2 = 0;
 80020b2:	4a52      	ldr	r2, [pc, #328]	; (80021fc <main+0xf24>)
 80020b4:	2300      	movs	r3, #0
 80020b6:	6013      	str	r3, [r2, #0]
				ave3 = 0;
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <main+0xf28>)
 80020ba:	2300      	movs	r3, #0
 80020bc:	6013      	str	r3, [r2, #0]
				ave4 = 0;
 80020be:	4a51      	ldr	r2, [pc, #324]	; (8002204 <main+0xf2c>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	6013      	str	r3, [r2, #0]
			}
		}
		hx711_weight(&loadcell, 4, 1);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2104      	movs	r1, #4
 80020c8:	484f      	ldr	r0, [pc, #316]	; (8002208 <main+0xf30>)
 80020ca:	f001 fb47 	bl	800375c <hx711_weight>
		hx711_weight(&loadcell2, 4, 2);
 80020ce:	2202      	movs	r2, #2
 80020d0:	2104      	movs	r1, #4
 80020d2:	484e      	ldr	r0, [pc, #312]	; (800220c <main+0xf34>)
 80020d4:	f001 fb42 	bl	800375c <hx711_weight>
		sclk[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80020d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020dc:	484c      	ldr	r0, [pc, #304]	; (8002210 <main+0xf38>)
 80020de:	f003 fccb 	bl	8005a78 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <main+0xf3c>)
 80020e8:	601a      	str	r2, [r3, #0]
		if (sclk[0] == 0 && sclk[1] == 1) {
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <main+0xf3c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d112      	bne.n	8002118 <main+0xe40>
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <main+0xf3c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10e      	bne.n	8002118 <main+0xe40>
			hx711_tare(&loadcell, 4, 1);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2104      	movs	r1, #4
 80020fe:	4842      	ldr	r0, [pc, #264]	; (8002208 <main+0xf30>)
 8002100:	f001 fa44 	bl	800358c <hx711_tare>
			hx711_tare(&loadcell2, 4, 2);
 8002104:	2202      	movs	r2, #2
 8002106:	2104      	movs	r1, #4
 8002108:	4840      	ldr	r0, [pc, #256]	; (800220c <main+0xf34>)
 800210a:	f001 fa3f 	bl	800358c <hx711_tare>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800210e:	2201      	movs	r2, #1
 8002110:	2120      	movs	r1, #32
 8002112:	4841      	ldr	r0, [pc, #260]	; (8002218 <main+0xf40>)
 8002114:	f003 fcc8 	bl	8005aa8 <HAL_GPIO_WritePin>
//	 HAL_Delay (100);
//	 thePower_mA = AutoFox_INA226_GetPower_uW(&ina226);
//	 HAL_Delay (100);

		//laser sensor
		if(HAL_GetTick()-lasertime>=3)
 8002118:	f003 f948 	bl	80053ac <HAL_GetTick>
 800211c:	4603      	mov	r3, r0
 800211e:	2200      	movs	r2, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <main+0xf44>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800212c:	ebb1 0802 	subs.w	r8, r1, r2
 8002130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002132:	eb61 0903 	sbc.w	r9, r1, r3
 8002136:	f1b8 0f03 	cmp.w	r8, #3
 800213a:	f179 0300 	sbcs.w	r3, r9, #0
 800213e:	d345      	bcc.n	80021cc <main+0xef4>
		{
			lasertime= HAL_GetTick();
 8002140:	f003 f934 	bl	80053ac <HAL_GetTick>
 8002144:	4603      	mov	r3, r0
 8002146:	2200      	movs	r2, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	4b33      	ldr	r3, [pc, #204]	; (800221c <main+0xf44>)
 800214e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002152:	e9c3 1200 	strd	r1, r2, [r3]
			switch (fllaser){
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <main+0xf48>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	2b03      	cmp	r3, #3
 800215c:	f63f abaa 	bhi.w	80018b4 <main+0x5dc>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <main+0xe90>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	08002179 	.word	0x08002179
 800216c:	08002187 	.word	0x08002187
 8002170:	080021a3 	.word	0x080021a3
 8002174:	080021b1 	.word	0x080021b1
			case 0:
				tcaselect(0);
 8002178:	2000      	movs	r0, #0
 800217a:	f001 fdc9 	bl	8003d10 <tcaselect>
				fllaser=1;
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <main+0xf48>)
 8002180:	2301      	movs	r3, #1
 8002182:	8013      	strh	r3, [r2, #0]
				break;
 8002184:	e023      	b.n	80021ce <main+0xef6>
			case 1:
				range1= VL6180X_readRange();
 8002186:	f7ff f828 	bl	80011da <VL6180X_readRange>
 800218a:	4603      	mov	r3, r0
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <main+0xf4c>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
				fllaser=2;
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <main+0xf48>)
 800219c:	2302      	movs	r3, #2
 800219e:	8013      	strh	r3, [r2, #0]
				break;
 80021a0:	e015      	b.n	80021ce <main+0xef6>
			case 2 :
				tcaselect(1);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f001 fdb4 	bl	8003d10 <tcaselect>
				fllaser=3;
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <main+0xf48>)
 80021aa:	2303      	movs	r3, #3
 80021ac:	8013      	strh	r3, [r2, #0]
				break;
 80021ae:	e00e      	b.n	80021ce <main+0xef6>
			case 3 :
				range2 = VL6180X_readRange();
 80021b0:	f7ff f813 	bl	80011da <VL6180X_readRange>
 80021b4:	4603      	mov	r3, r0
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <main+0xf50>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
				fllaser=0;
 80021c4:	4a16      	ldr	r2, [pc, #88]	; (8002220 <main+0xf48>)
 80021c6:	2300      	movs	r3, #0
 80021c8:	8013      	strh	r3, [r2, #0]
				break;
 80021ca:	e000      	b.n	80021ce <main+0xef6>
			}


		}
 80021cc:	bf00      	nop
		switch (state) {
 80021ce:	f7ff bb71 	b.w	80018b4 <main+0x5dc>
 80021d2:	bf00      	nop
 80021d4:	200004c0 	.word	0x200004c0
 80021d8:	200004b0 	.word	0x200004b0
 80021dc:	20000414 	.word	0x20000414
 80021e0:	20000358 	.word	0x20000358
 80021e4:	0007a120 	.word	0x0007a120
 80021e8:	20000368 	.word	0x20000368
 80021ec:	20000369 	.word	0x20000369
 80021f0:	2000036a 	.word	0x2000036a
 80021f4:	2000036b 	.word	0x2000036b
 80021f8:	200003bc 	.word	0x200003bc
 80021fc:	200003c0 	.word	0x200003c0
 8002200:	200003c4 	.word	0x200003c4
 8002204:	200003c8 	.word	0x200003c8
 8002208:	20000304 	.word	0x20000304
 800220c:	2000032c 	.word	0x2000032c
 8002210:	40020800 	.word	0x40020800
 8002214:	200002d0 	.word	0x200002d0
 8002218:	40020000 	.word	0x40020000
 800221c:	200002d8 	.word	0x200002d8
 8002220:	20000354 	.word	0x20000354
 8002224:	200004a8 	.word	0x200004a8
 8002228:	200004ac 	.word	0x200004ac

0800222c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b094      	sub	sp, #80	; 0x50
 8002230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	2230      	movs	r2, #48	; 0x30
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f008 fef4 	bl	800b028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <SystemClock_Config+0xc8>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <SystemClock_Config+0xc8>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <SystemClock_Config+0xc8>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	2300      	movs	r3, #0
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <SystemClock_Config+0xcc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <SystemClock_Config+0xcc>)
 8002276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <SystemClock_Config+0xcc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800228c:	2301      	movs	r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002290:	2310      	movs	r3, #16
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002294:	2302      	movs	r3, #2
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800229c:	2308      	movs	r3, #8
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022a0:	2364      	movs	r3, #100	; 0x64
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022a8:	2304      	movs	r3, #4
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ac:	f107 0320 	add.w	r3, r7, #32
 80022b0:	4618      	mov	r0, r3
 80022b2:	f006 f891 	bl	80083d8 <HAL_RCC_OscConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022bc:	f002 fce6 	bl	8004c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c0:	230f      	movs	r3, #15
 80022c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c4:	2302      	movs	r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2103      	movs	r1, #3
 80022dc:	4618      	mov	r0, r3
 80022de:	f006 faf3 	bl	80088c8 <HAL_RCC_ClockConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022e8:	f002 fcd0 	bl	8004c8c <Error_Handler>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3750      	adds	r7, #80	; 0x50
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000

080022fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_I2C2_Init+0x50>)
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <MX_I2C2_Init+0x54>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_I2C2_Init+0x50>)
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_I2C2_Init+0x58>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_I2C2_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_I2C2_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_I2C2_Init+0x50>)
 800231a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_I2C2_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_I2C2_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_I2C2_Init+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_I2C2_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_I2C2_Init+0x50>)
 800233a:	f003 fbe7 	bl	8005b0c <HAL_I2C_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002344:	f002 fca2 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000084 	.word	0x20000084
 8002350:	40005800 	.word	0x40005800
 8002354:	000186a0 	.word	0x000186a0

08002358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f008 fe5e 	bl	800b028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <MX_TIM1_Init+0xac>)
 8002378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <MX_TIM1_Init+0xa8>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <MX_TIM1_Init+0xa8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023a0:	2303      	movs	r3, #3
 80023a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a8:	2301      	movs	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b8:	2301      	movs	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_TIM1_Init+0xa8>)
 80023cc:	f006 fe58 	bl	8009080 <HAL_TIM_Encoder_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023d6:	f002 fc59 	bl	8004c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <MX_TIM1_Init+0xa8>)
 80023e8:	f007 fd04 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023f2:	f002 fc4b 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	; 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200000d8 	.word	0x200000d8
 8002404:	40010000 	.word	0x40010000

08002408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f008 fe06 	bl	800b028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <MX_TIM2_Init+0xa4>)
 800242e:	2200      	movs	r2, #0
 8002430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MX_TIM2_Init+0xa4>)
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800244c:	2303      	movs	r3, #3
 800244e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002464:	2301      	movs	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002478:	f006 fe02 	bl	8009080 <HAL_TIM_Encoder_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002482:	f002 fc03 	bl	8004c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002494:	f007 fcae 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800249e:	f002 fbf5 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000120 	.word	0x20000120

080024b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 fdb2 	bl	800b028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_TIM3_Init+0xa0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024f2:	2303      	movs	r3, #3
 80024f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024fa:	2301      	movs	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800250a:	2301      	movs	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_TIM3_Init+0xa0>)
 800251e:	f006 fdaf 	bl	8009080 <HAL_TIM_Encoder_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002528:	f002 fbb0 	bl	8004c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_TIM3_Init+0xa0>)
 800253a:	f007 fc5b 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002544:	f002 fba2 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	3730      	adds	r7, #48	; 0x30
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000168 	.word	0x20000168
 8002554:	40000400 	.word	0x40000400

08002558 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002588:	4b37      	ldr	r3, [pc, #220]	; (8002668 <MX_TIM4_Init+0x110>)
 800258a:	4a38      	ldr	r2, [pc, #224]	; (800266c <MX_TIM4_Init+0x114>)
 800258c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <MX_TIM4_Init+0x110>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <MX_TIM4_Init+0x110>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <MX_TIM4_Init+0x110>)
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <MX_TIM4_Init+0x110>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <MX_TIM4_Init+0x110>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ae:	482e      	ldr	r0, [pc, #184]	; (8002668 <MX_TIM4_Init+0x110>)
 80025b0:	f006 fbaa 	bl	8008d08 <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80025ba:	f002 fb67 	bl	8004c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c8:	4619      	mov	r1, r3
 80025ca:	4827      	ldr	r0, [pc, #156]	; (8002668 <MX_TIM4_Init+0x110>)
 80025cc:	f007 f856 	bl	800967c <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80025d6:	f002 fb59 	bl	8004c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025da:	4823      	ldr	r0, [pc, #140]	; (8002668 <MX_TIM4_Init+0x110>)
 80025dc:	f006 fc46 	bl	8008e6c <HAL_TIM_PWM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80025e6:	f002 fb51 	bl	8004c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	4619      	mov	r1, r3
 80025f8:	481b      	ldr	r0, [pc, #108]	; (8002668 <MX_TIM4_Init+0x110>)
 80025fa:	f007 fbfb 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002604:	f002 fb42 	bl	8004c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002608:	2360      	movs	r3, #96	; 0x60
 800260a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	4619      	mov	r1, r3
 800261e:	4812      	ldr	r0, [pc, #72]	; (8002668 <MX_TIM4_Init+0x110>)
 8002620:	f006 ff6a 	bl	80094f8 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800262a:	f002 fb2f 	bl	8004c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2204      	movs	r2, #4
 8002632:	4619      	mov	r1, r3
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <MX_TIM4_Init+0x110>)
 8002636:	f006 ff5f 	bl	80094f8 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002640:	f002 fb24 	bl	8004c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2208      	movs	r2, #8
 8002648:	4619      	mov	r1, r3
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <MX_TIM4_Init+0x110>)
 800264c:	f006 ff54 	bl	80094f8 <HAL_TIM_PWM_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002656:	f002 fb19 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <MX_TIM4_Init+0x110>)
 800265c:	f002 fcba 	bl	8004fd4 <HAL_TIM_MspPostInit>

}
 8002660:	bf00      	nop
 8002662:	3738      	adds	r7, #56	; 0x38
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001b0 	.word	0x200001b0
 800266c:	40000800 	.word	0x40000800

08002670 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	463b      	mov	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_TIM5_Init+0x94>)
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <MX_TIM5_Init+0x98>)
 8002690:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_TIM5_Init+0x94>)
 8002694:	2263      	movs	r2, #99	; 0x63
 8002696:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_TIM5_Init+0x94>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM5_Init+0x94>)
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_TIM5_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_TIM5_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <MX_TIM5_Init+0x94>)
 80026b4:	f006 fb28 	bl	8008d08 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80026be:	f002 fae5 	bl	8004c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM5_Init+0x94>)
 80026d0:	f006 ffd4 	bl	800967c <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80026da:	f002 fad7 	bl	8004c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM5_Init+0x94>)
 80026ec:	f007 fb82 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80026f6:	f002 fac9 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200001f8 	.word	0x200001f8
 8002708:	40000c00 	.word	0x40000c00

0800270c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <MX_USART1_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800271c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_USART1_UART_Init+0x4c>)
 8002744:	f007 fbd8 	bl	8009ef8 <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f002 fa9d 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000240 	.word	0x20000240
 800275c:	40011000 	.word	0x40011000

08002760 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <MX_USART6_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_USART6_UART_Init+0x4c>)
 8002798:	f007 fbae 	bl	8009ef8 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027a2:	f002 fa73 	bl	8004c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000284 	.word	0x20000284
 80027b0:	40011400 	.word	0x40011400

080027b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a74      	ldr	r2, [pc, #464]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a6d      	ldr	r2, [pc, #436]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b64      	ldr	r3, [pc, #400]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a5f      	ldr	r2, [pc, #380]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b5d      	ldr	r3, [pc, #372]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <MX_GPIO_Init+0x1f0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8002856:	2200      	movs	r2, #0
 8002858:	f641 4105 	movw	r1, #7173	; 0x1c05
 800285c:	4852      	ldr	r0, [pc, #328]	; (80029a8 <MX_GPIO_Init+0x1f4>)
 800285e:	f003 f923 	bl	8005aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|LD2_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	4851      	ldr	r0, [pc, #324]	; (80029ac <MX_GPIO_Init+0x1f8>)
 8002868:	f003 f91e 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15
 800286c:	2200      	movs	r2, #0
 800286e:	f248 013f 	movw	r1, #32831	; 0x803f
 8002872:	484f      	ldr	r0, [pc, #316]	; (80029b0 <MX_GPIO_Init+0x1fc>)
 8002874:	f003 f918 	bl	8005aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	2104      	movs	r1, #4
 800287c:	484d      	ldr	r0, [pc, #308]	; (80029b4 <MX_GPIO_Init+0x200>)
 800287e:	f003 f913 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800288c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	4843      	ldr	r0, [pc, #268]	; (80029a8 <MX_GPIO_Init+0x1f4>)
 800289a:	f002 ff69 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800289e:	f641 4305 	movw	r3, #7173	; 0x1c05
 80028a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	483c      	ldr	r0, [pc, #240]	; (80029a8 <MX_GPIO_Init+0x1f4>)
 80028b8:	f002 ff5a 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 80028bc:	f240 338a 	movw	r3, #906	; 0x38a
 80028c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4835      	ldr	r0, [pc, #212]	; (80029a8 <MX_GPIO_Init+0x1f4>)
 80028d2:	f002 ff4d 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD2_Pin;
 80028d6:	232c      	movs	r3, #44	; 0x2c
 80028d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	482f      	ldr	r0, [pc, #188]	; (80029ac <MX_GPIO_Init+0x1f8>)
 80028ee:	f002 ff3f 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB15
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15
 80028f2:	f248 0327 	movw	r3, #32807	; 0x8027
 80028f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4829      	ldr	r0, [pc, #164]	; (80029b0 <MX_GPIO_Init+0x1fc>)
 800290c:	f002 ff30 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4822      	ldr	r0, [pc, #136]	; (80029b0 <MX_GPIO_Init+0x1fc>)
 8002926:	f002 ff23 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800292e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	481a      	ldr	r0, [pc, #104]	; (80029a8 <MX_GPIO_Init+0x1f4>)
 8002940:	f002 ff16 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002944:	2304      	movs	r3, #4
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	2301      	movs	r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4816      	ldr	r0, [pc, #88]	; (80029b4 <MX_GPIO_Init+0x200>)
 800295c:	f002 ff08 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002960:	2318      	movs	r3, #24
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002968:	2302      	movs	r3, #2
 800296a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	480e      	ldr	r0, [pc, #56]	; (80029b0 <MX_GPIO_Init+0x1fc>)
 8002978:	f002 fefa 	bl	8005770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2017      	movs	r0, #23
 8002982:	f002 fe1e 	bl	80055c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002986:	2017      	movs	r0, #23
 8002988:	f002 fe37 	bl	80055fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2028      	movs	r0, #40	; 0x28
 8002992:	f002 fe16 	bl	80055c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002996:	2028      	movs	r0, #40	; 0x28
 8002998:	f002 fe2f 	bl	80055fa <HAL_NVIC_EnableIRQ>

}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020c00 	.word	0x40020c00

080029b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	inputchar = *RX_BUFFER;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_UART_RxCpltCallback+0x20>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_UART_RxCpltCallback+0x24>)
 80029c8:	801a      	strh	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200002c8 	.word	0x200002c8
 80029dc:	200002ce 	.word	0x200002ce

080029e0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d10d      	bne.n	8002a0c <HAL_GPIO_EXTI_Callback+0x2c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1) {
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	4808      	ldr	r0, [pc, #32]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x34>)
 80029f4:	f003 f840 	bl	8005a78 <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d103      	bne.n	8002a06 <HAL_GPIO_EXTI_Callback+0x26>
			emergency = 1;
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x38>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
		} else {
			emergency = 0;
		}
	}
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_EXTI_Callback+0x2c>
			emergency = 0;
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x38>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40020800 	.word	0x40020800
 8002a18:	200004d8 	.word	0x200004d8
 8002a1c:	00000000 	.word	0x00000000

08002a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += 4294967295;
 8002a30:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	1e54      	subs	r4, r2, #1
 8002a38:	f143 0500 	adc.w	r5, r3, #0
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002a3e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d114      	bne.n	8002a74 <HAL_TIM_PeriodElapsedCallback+0x54>
		if ((TIM2->CNT) <= 32000) {
 8002a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002a54:	d807      	bhi.n	8002a66 <HAL_TIM_PeriodElapsedCallback+0x46>
			distancestamp2 += 65535;
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002a5e:	33ff      	adds	r3, #255	; 0xff
 8002a60:	4a47      	ldr	r2, [pc, #284]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e006      	b.n	8002a74 <HAL_TIM_PeriodElapsedCallback+0x54>
		} else {
			distancestamp2 -= 65535;
 8002a66:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002a6e:	3bff      	subs	r3, #255	; 0xff
 8002a70:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002a72:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim3) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d113      	bne.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0x84>
		if ((TIM3->CNT) <= 32000) {
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002a84:	d807      	bhi.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x76>
			distancestamp3 += 65535;
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002a8e:	33ff      	adds	r3, #255	; 0xff
 8002a90:	4a3e      	ldr	r2, [pc, #248]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e006      	b.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0x84>
		} else {
			distancestamp3 -= 65535;
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002a9e:	3bff      	subs	r3, #255	; 0xff
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002aa2:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim4) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	f040 8415 	bne.w	80032d8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
		if (require1 == 0) {
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	d104      	bne.n	8002ac8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			errorpid1[0] = 0;
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e0ce      	b.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x246>
		} else if (require1 <= 0) {
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d86f      	bhi.n	8002bb8 <HAL_TIM_PeriodElapsedCallback+0x198>
			errorpid1[0] = velocitypulse1
					- require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fcdf 	bl	80004a0 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fcd8 	bl	80004a0 <__aeabi_f2d>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002af6:	f7fd fd2b 	bl	8000550 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b08:	f7fd fd22 	bl	8000550 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b1a:	f7fd fd19 	bl	8000550 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b2c:	f7fd fd10 	bl	8000550 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b3e:	f7fd fe31 	bl	80007a4 <__aeabi_ddiv>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002b50:	f7fd fe28 	bl	80007a4 <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7fd fb40 	bl	80001e0 <__aeabi_dsub>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ff8c 	bl	8000a84 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
			errorpid1[0] = velocitypulse1
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e078      	b.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x246>
 8002b74:	200001f8 	.word	0x200001f8
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000120 	.word	0x20000120
 8002b80:	20000044 	.word	0x20000044
 8002b84:	20000168 	.word	0x20000168
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	20000048 	.word	0x20000048
 8002b90:	200001b0 	.word	0x200001b0
 8002b94:	200003e4 	.word	0x200003e4
 8002b98:	200003dc 	.word	0x200003dc
 8002b9c:	20000454 	.word	0x20000454
 8002ba0:	40280000 	.word	0x40280000
 8002ba4:	40500000 	.word	0x40500000
 8002ba8:	40100000 	.word	0x40100000
 8002bac:	40340000 	.word	0x40340000
 8002bb0:	402e0000 	.word	0x402e0000
 8002bb4:	40200000 	.word	0x40200000
		} else if (require1 > 0) {
 8002bb8:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	dd4e      	ble.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x246>
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002bc8:	4b93      	ldr	r3, [pc, #588]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc67 	bl	80004a0 <__aeabi_f2d>
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002bd8:	f7fd fcba 	bl	8000550 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	4b8d      	ldr	r3, [pc, #564]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002bea:	f7fd fcb1 	bl	8000550 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b8a      	ldr	r3, [pc, #552]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002bfc:	f7fd fca8 	bl	8000550 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b86      	ldr	r3, [pc, #536]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002c0e:	f7fd fc9f 	bl	8000550 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	4b83      	ldr	r3, [pc, #524]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002c20:	f7fd fdc0 	bl	80007a4 <__aeabi_ddiv>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002c32:	f7fd fdb7 	bl	80007a4 <__aeabi_ddiv>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	461d      	mov	r5, r3
					- velocitypulse1;
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc2c 	bl	80004a0 <__aeabi_f2d>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fac6 	bl	80001e0 <__aeabi_dsub>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ff12 	bl	8000a84 <__aeabi_d2f>
 8002c60:	4603      	mov	r3, r0
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002c64:	6013      	str	r3, [r2, #0]
		}
		sumpid1 = sumpid1 + errorpid1[0];
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002c68:	ed93 7a00 	vldr	s14, [r3]
 8002c6c:	4b73      	ldr	r3, [pc, #460]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	4b71      	ldr	r3, [pc, #452]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002c78:	edc3 7a00 	vstr	s15, [r3]
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 8002c7c:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002c7e:	ed93 7a00 	vldr	s14, [r3]
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8c:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8002c8e:	edd3 6a00 	vldr	s13, [r3]
 8002c92:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd1 * (errorpid1[0] - errorpid1[1]));
 8002ca0:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002ca2:	edd3 6a00 	vldr	s13, [r3]
 8002ca6:	4b64      	ldr	r3, [pc, #400]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002ca8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cb0:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 8002cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc2:	ee17 2a90 	vmov	r2, s15
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002cc8:	601a      	str	r2, [r3, #0]
		errorpid1[1] = errorpid1[0];
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5a      	ldr	r2, [pc, #360]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002cd0:	6053      	str	r3, [r2, #4]
		if (pwm1 < 0) {
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da18      	bge.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0x2ec>
			pwm1 = -pwm1;
 8002cda:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	425b      	negs	r3, r3
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002ce2:	6013      	str	r3, [r2, #0]
			in1 = !in1;
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002cf6:	601a      	str	r2, [r3, #0]
			in2 = !in2;
 8002cf8:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002d0a:	601a      	str	r2, [r3, #0]
		}
		if (pwm1 > 5000)
 8002d0c:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	dd03      	ble.n	8002d20 <HAL_TIM_PeriodElapsedCallback+0x300>
			pwm1 = 5000;
 8002d18:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	601a      	str	r2, [r3, #0]
		if ((limitswitch1 == 1 && in1 == 0 && in2 == 1) || emergency == 1) {
 8002d20:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x318>
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x318>
 8002d30:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d003      	beq.n	8002d40 <HAL_TIM_PeriodElapsedCallback+0x320>
 8002d38:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d108      	bne.n	8002d52 <HAL_TIM_PeriodElapsedCallback+0x332>
			pwm1 = 0;
 8002d40:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
			in1 = 0;
 8002d46:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
			in2 = 0;
 8002d4c:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
		}
		if (require2 == 0) {
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d104      	bne.n	8002d6c <HAL_TIM_PeriodElapsedCallback+0x34c>
			errorpid2[0] = 0;
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e0d6      	b.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x4fa>
		} else if (require2 <= 0) {
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	d877      	bhi.n	8002e6c <HAL_TIM_PeriodElapsedCallback+0x44c>
			errorpid2[0] = velocitypulse2
					- require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fb8d 	bl	80004a0 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fb86 	bl	80004a0 <__aeabi_f2d>
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002d9a:	f7fd fbd9 	bl	8000550 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002dac:	f7fd fbd0 	bl	8000550 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002dbe:	f7fd fbc7 	bl	8000550 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002dd0:	f7fd fbbe 	bl	8000550 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002de2:	f7fd fcdf 	bl	80007a4 <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002df4:	f7fd fcd6 	bl	80007a4 <__aeabi_ddiv>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd f9ee 	bl	80001e0 <__aeabi_dsub>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe3a 	bl	8000a84 <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
			errorpid2[0] = velocitypulse2
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e080      	b.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x4fa>
 8002e18:	200003e4 	.word	0x200003e4
 8002e1c:	40280000 	.word	0x40280000
 8002e20:	40500000 	.word	0x40500000
 8002e24:	40100000 	.word	0x40100000
 8002e28:	40340000 	.word	0x40340000
 8002e2c:	402e0000 	.word	0x402e0000
 8002e30:	40200000 	.word	0x40200000
 8002e34:	20000454 	.word	0x20000454
 8002e38:	200003dc 	.word	0x200003dc
 8002e3c:	200003d8 	.word	0x200003d8
 8002e40:	20000038 	.word	0x20000038
 8002e44:	200003d4 	.word	0x200003d4
 8002e48:	200003d0 	.word	0x200003d0
 8002e4c:	200002e8 	.word	0x200002e8
 8002e50:	200002e0 	.word	0x200002e0
 8002e54:	200002e4 	.word	0x200002e4
 8002e58:	20000418 	.word	0x20000418
 8002e5c:	200004d8 	.word	0x200004d8
 8002e60:	200003fc 	.word	0x200003fc
 8002e64:	200003f4 	.word	0x200003f4
 8002e68:	20000458 	.word	0x20000458
		} else if (require2 > 0) {
 8002e6c:	4b9c      	ldr	r3, [pc, #624]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd4e      	ble.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x4fa>
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002e7c:	4b98      	ldr	r3, [pc, #608]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb0d 	bl	80004a0 <__aeabi_f2d>
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002e8c:	f7fd fb60 	bl	8000550 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8002e9e:	f7fd fb57 	bl	8000550 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4b8f      	ldr	r3, [pc, #572]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8002eb0:	f7fd fb4e 	bl	8000550 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	4b8b      	ldr	r3, [pc, #556]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8002ec2:	f7fd fb45 	bl	8000550 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8002ed4:	f7fd fc66 	bl	80007a4 <__aeabi_ddiv>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	4b84      	ldr	r3, [pc, #528]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8002ee6:	f7fd fc5d 	bl	80007a4 <__aeabi_ddiv>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4614      	mov	r4, r2
 8002ef0:	461d      	mov	r5, r3
					- velocitypulse2;
 8002ef2:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fad2 	bl	80004a0 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f96c 	bl	80001e0 <__aeabi_dsub>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fdb8 	bl	8000a84 <__aeabi_d2f>
 8002f14:	4603      	mov	r3, r0
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002f16:	4a7a      	ldr	r2, [pc, #488]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f18:	6013      	str	r3, [r2, #0]
		}
		sumpid2 = sumpid2 + errorpid2[0];
 8002f1a:	4b79      	ldr	r3, [pc, #484]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	4b78      	ldr	r3, [pc, #480]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 8002f30:	4b73      	ldr	r3, [pc, #460]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	4b74      	ldr	r3, [pc, #464]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f40:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8002f42:	edd3 6a00 	vldr	s13, [r3]
 8002f46:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd2 * (errorpid2[0] - errorpid2[1]));
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f56:	edd3 6a00 	vldr	s13, [r3]
 8002f5a:	4b69      	ldr	r3, [pc, #420]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 8002f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f76:	ee17 2a90 	vmov	r2, s15
 8002f7a:	4b66      	ldr	r3, [pc, #408]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002f7c:	601a      	str	r2, [r3, #0]
		errorpid2[1] = errorpid2[0];
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5f      	ldr	r2, [pc, #380]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002f84:	6053      	str	r3, [r2, #4]
		if (pwm2 < 0) {
 8002f86:	4b63      	ldr	r3, [pc, #396]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da18      	bge.n	8002fc0 <HAL_TIM_PeriodElapsedCallback+0x5a0>
			pwm2 = -pwm2;
 8002f8e:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	425b      	negs	r3, r3
 8002f94:	4a5f      	ldr	r2, [pc, #380]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002f96:	6013      	str	r3, [r2, #0]
			in3 = !in3;
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002faa:	601a      	str	r2, [r3, #0]
			in4 = !in4;
 8002fac:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b57      	ldr	r3, [pc, #348]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002fbe:	601a      	str	r2, [r3, #0]
		}
		if (pwm2 > 5000)
 8002fc0:	4b54      	ldr	r3, [pc, #336]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	dd03      	ble.n	8002fd4 <HAL_TIM_PeriodElapsedCallback+0x5b4>
			pwm2 = 5000;
 8002fcc:	4b51      	ldr	r3, [pc, #324]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	601a      	str	r2, [r3, #0]
		if ((limitswitch2 == 1 && in3 == 0 && in4 == 1) || emergency == 1) {
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8002fdc:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d003      	beq.n	8002ff4 <HAL_TIM_PeriodElapsedCallback+0x5d4>
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_TIM_PeriodElapsedCallback+0x5da>
			pwm2 = 0;
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
		}
		if (require3 == 0) {
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003008:	d104      	bne.n	8003014 <HAL_TIM_PeriodElapsedCallback+0x5f4>
			errorpid3[0] = 0;
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e0f1      	b.n	80031f8 <HAL_TIM_PeriodElapsedCallback+0x7d8>
		} else if (require3 <= 0) {
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	f200 8089 	bhi.w	8003138 <HAL_TIM_PeriodElapsedCallback+0x718>
			errorpid3[0] = velocitypulse3
					- require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0 / 5.08;
 8003026:	4b42      	ldr	r3, [pc, #264]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa38 	bl	80004a0 <__aeabi_f2d>
 8003030:	4604      	mov	r4, r0
 8003032:	460d      	mov	r5, r1
 8003034:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa31 	bl	80004a0 <__aeabi_f2d>
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003044:	f7fd fa84 	bl	8000550 <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003056:	f7fd fa7b 	bl	8000550 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003068:	f7fd fa72 	bl	8000550 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 800307a:	f7fd fa69 	bl	8000550 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800308c:	f7fd fb8a 	bl	80007a4 <__aeabi_ddiv>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800309e:	f7fd fb81 	bl	80007a4 <__aeabi_ddiv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	a30b      	add	r3, pc, #44	; (adr r3, 80030d8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fb78 	bl	80007a4 <__aeabi_ddiv>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd f890 	bl	80001e0 <__aeabi_dsub>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fcdc 	bl	8000a84 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
			errorpid3[0] = velocitypulse3
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e091      	b.n	80031f8 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 80030d4:	f3af 8000 	nop.w
 80030d8:	851eb852 	.word	0x851eb852
 80030dc:	401451eb 	.word	0x401451eb
 80030e0:	200003fc 	.word	0x200003fc
 80030e4:	40280000 	.word	0x40280000
 80030e8:	40500000 	.word	0x40500000
 80030ec:	40100000 	.word	0x40100000
 80030f0:	40340000 	.word	0x40340000
 80030f4:	402e0000 	.word	0x402e0000
 80030f8:	40200000 	.word	0x40200000
 80030fc:	20000458 	.word	0x20000458
 8003100:	200003f4 	.word	0x200003f4
 8003104:	200003f0 	.word	0x200003f0
 8003108:	2000003c 	.word	0x2000003c
 800310c:	200003ec 	.word	0x200003ec
 8003110:	200003e8 	.word	0x200003e8
 8003114:	200002f4 	.word	0x200002f4
 8003118:	200002ec 	.word	0x200002ec
 800311c:	200002f0 	.word	0x200002f0
 8003120:	2000041c 	.word	0x2000041c
 8003124:	200004d8 	.word	0x200004d8
 8003128:	20000414 	.word	0x20000414
 800312c:	2000040c 	.word	0x2000040c
 8003130:	2000045c 	.word	0x2000045c
 8003134:	40240000 	.word	0x40240000
		} else if (require3 > 0) {
 8003138:	4b6b      	ldr	r3, [pc, #428]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	dd57      	ble.n	80031f8 <HAL_TIM_PeriodElapsedCallback+0x7d8>
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0/5.08
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9a7 	bl	80004a0 <__aeabi_f2d>
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4b65      	ldr	r3, [pc, #404]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8003158:	f7fd f9fa 	bl	8000550 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800316a:	f7fd f9f1 	bl	8000550 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800317c:	f7fd f9e8 	bl	8000550 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800318e:	f7fd f9df 	bl	8000550 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80031a0:	f7fd fb00 	bl	80007a4 <__aeabi_ddiv>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80031b2:	f7fd faf7 	bl	80007a4 <__aeabi_ddiv>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	a348      	add	r3, pc, #288	; (adr r3, 80032e0 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd faee 	bl	80007a4 <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	461d      	mov	r5, r3
					- velocitypulse3;
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f963 	bl	80004a0 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4620      	mov	r0, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	f7fc fffd 	bl	80001e0 <__aeabi_dsub>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd fc49 	bl	8000a84 <__aeabi_d2f>
 80031f2:	4603      	mov	r3, r0
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0/5.08
 80031f4:	4a43      	ldr	r2, [pc, #268]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80031f6:	6013      	str	r3, [r2, #0]
		}
		sumpid3 = sumpid3 + errorpid3[0];
 80031f8:	4b42      	ldr	r3, [pc, #264]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80031fa:	ed93 7a00 	vldr	s14, [r3]
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003200:	edd3 7a00 	vldr	s15, [r3]
 8003204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003208:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800320a:	edc3 7a00 	vstr	s15, [r3]
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003220:	edd3 6a00 	vldr	s13, [r3]
 8003224:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800322e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd3 * (errorpid3[0] - errorpid3[1]));
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003234:	edd3 6a00 	vldr	s13, [r3]
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800323a:	edd3 7a01 	vldr	s15, [r3, #4]
 800323e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 8003250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003254:	ee17 2a90 	vmov	r2, s15
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800325a:	601a      	str	r2, [r3, #0]
		errorpid3[1] = errorpid3[0];
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003262:	6053      	str	r3, [r2, #4]
		if (pwm3 < 0) {
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	da18      	bge.n	800329e <HAL_TIM_PeriodElapsedCallback+0x87e>
							pwm3 = -pwm3;
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	425b      	negs	r3, r3
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003274:	6013      	str	r3, [r2, #0]
							in5 = !in5;
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003288:	601a      	str	r2, [r3, #0]
							in6 = !in6;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800329c:	601a      	str	r2, [r3, #0]
						}
		if (pwm3 > 2300)
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80032a6:	4293      	cmp	r3, r2
 80032a8:	dd03      	ble.n	80032b2 <HAL_TIM_PeriodElapsedCallback+0x892>
			pwm3 = 2300;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80032ac:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80032b0:	601a      	str	r2, [r3, #0]
		if ((limitswitch3 == 1 && in5 == 0 && in6 == 1) || emergency == 1) {
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x8aa>
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x8aa>
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_PeriodElapsedCallback+0x8b2>
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
			pwm3 = 0;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	851eb852 	.word	0x851eb852
 80032e4:	401451eb 	.word	0x401451eb
 80032e8:	20000414 	.word	0x20000414
 80032ec:	40280000 	.word	0x40280000
 80032f0:	40500000 	.word	0x40500000
 80032f4:	40100000 	.word	0x40100000
 80032f8:	402e0000 	.word	0x402e0000
 80032fc:	40240000 	.word	0x40240000
 8003300:	2000045c 	.word	0x2000045c
 8003304:	2000040c 	.word	0x2000040c
 8003308:	20000408 	.word	0x20000408
 800330c:	20000040 	.word	0x20000040
 8003310:	20000404 	.word	0x20000404
 8003314:	20000400 	.word	0x20000400
 8003318:	20000300 	.word	0x20000300
 800331c:	200002f8 	.word	0x200002f8
 8003320:	200002fc 	.word	0x200002fc
 8003324:	20000420 	.word	0x20000420
 8003328:	200004d8 	.word	0x200004d8

0800332c <micros>:

uint64_t micros() {
 800332c:	b4b0      	push	{r4, r5, r7}
 800332e:	af00      	add	r7, sp, #0
	return _micros + htim5.Instance->CNT;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <micros+0x2c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2200      	movs	r2, #0
 8003338:	4618      	mov	r0, r3
 800333a:	4611      	mov	r1, r2
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <micros+0x30>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	1884      	adds	r4, r0, r2
 8003344:	eb41 0503 	adc.w	r5, r1, r3
 8003348:	4622      	mov	r2, r4
 800334a:	462b      	mov	r3, r5
}
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bcb0      	pop	{r4, r5, r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200001f8 	.word	0x200001f8
 800335c:	20000000 	.word	0x20000000

08003360 <hx711_delay_us>:
//#############################################################################################
void hx711_delay_us(void) {
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
	uint64_t delay = micros();
 8003366:	f7ff ffe1 	bl	800332c <micros>
 800336a:	e9c7 0100 	strd	r0, r1, [r7]
	while (delay - micros() <= 1)
 800336e:	bf00      	nop
 8003370:	f7ff ffdc 	bl	800332c <micros>
 8003374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003378:	1a14      	subs	r4, r2, r0
 800337a:	eb63 0501 	sbc.w	r5, r3, r1
 800337e:	2c02      	cmp	r4, #2
 8003380:	f175 0300 	sbcs.w	r3, r5, #0
 8003384:	d3f4      	bcc.n	8003370 <hx711_delay_us+0x10>
		;
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bdb0      	pop	{r4, r5, r7, pc}

08003390 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711) {
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	while (hx711->lock)
 8003398:	bf00      	nop
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7f1b      	ldrb	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1fb      	bne.n	800339a <hx711_lock+0xa>
		;
	hx711->lock = 1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	771a      	strb	r2, [r3, #28]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <hx711_init>:
void hx711_unlock(hx711_t *hx711) {
	hx711->lock = 0;
}
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin,
		GPIO_TypeDef *dat_gpio, uint16_t dat_pin) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
	hx711_lock(hx711);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff ffe3 	bl	8003390 <hx711_lock>
	hx711->clk_gpio = clk_gpio;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]
	hx711->clk_pin = clk_pin;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	811a      	strh	r2, [r3, #8]
	hx711->dat_gpio = dat_gpio;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	605a      	str	r2, [r3, #4]
	hx711->dat_pin = dat_pin;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80033e0:	815a      	strh	r2, [r3, #10]

	GPIO_InitTypeDef gpio = { 0 };
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	611a      	str	r2, [r3, #16]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fa:	2302      	movs	r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
	gpio.Pin = clk_pin;
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(clk_gpio, &gpio);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	f002 f9b1 	bl	8005770 <HAL_GPIO_Init>
	gpio.Mode = GPIO_MODE_INPUT;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_PULLUP;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8003416:	2302      	movs	r3, #2
 8003418:	623b      	str	r3, [r7, #32]
	gpio.Pin = dat_pin;
 800341a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800341c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dat_gpio, &gpio);
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4619      	mov	r1, r3
 8003424:	6838      	ldr	r0, [r7, #0]
 8003426:	f002 f9a3 	bl	8005770 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	891b      	ldrh	r3, [r3, #8]
 8003432:	2201      	movs	r2, #1
 8003434:	4619      	mov	r1, r3
 8003436:	f002 fb37 	bl	8005aa8 <HAL_GPIO_WritePin>
	hx711_delay(10);
 800343a:	200a      	movs	r0, #10
 800343c:	f001 ffc2 	bl	80053c4 <HAL_Delay>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	891b      	ldrh	r3, [r3, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	4619      	mov	r1, r3
 800344c:	f002 fb2c 	bl	8005aa8 <HAL_GPIO_WritePin>
	hx711_delay(10);
 8003450:	200a      	movs	r0, #10
 8003452:	f001 ffb7 	bl	80053c4 <HAL_Delay>
}
 8003456:	bf00      	nop
 8003458:	3728      	adds	r7, #40	; 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
	if (tare == 1) {
 800346c:	4b44      	ldr	r3, [pc, #272]	; (8003580 <hx711_value+0x120>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d11a      	bne.n	80034aa <hx711_value+0x4a>
		uint32_t startTime = HAL_GetTick();
 8003474:	f001 ff9a 	bl	80053ac <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 800347a:	e008      	b.n	800348e <hx711_value+0x2e>
			if (HAL_GetTick() - startTime > 150)
 800347c:	f001 ff96 	bl	80053ac <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b96      	cmp	r3, #150	; 0x96
 8003488:	d901      	bls.n	800348e <hx711_value+0x2e>
				return 0;
 800348a:	2300      	movs	r3, #0
 800348c:	e074      	b.n	8003578 <hx711_value+0x118>
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	895b      	ldrh	r3, [r3, #10]
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f002 faed 	bl	8005a78 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d0eb      	beq.n	800347c <hx711_value+0x1c>
		}
		tare = 0;
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <hx711_value+0x120>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	895b      	ldrh	r3, [r3, #10]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f002 fadf 	bl	8005a78 <HAL_GPIO_ReadPin>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d15a      	bne.n	8003576 <hx711_value+0x116>
		for (int8_t i = 0; i < 24; i++) {
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
 80034c4:	e02a      	b.n	800351c <hx711_value+0xbc>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	891b      	ldrh	r3, [r3, #8]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4619      	mov	r1, r3
 80034d2:	f002 fae9 	bl	8005aa8 <HAL_GPIO_WritePin>
			hx711_delay_us();
 80034d6:	f7ff ff43 	bl	8003360 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	891b      	ldrh	r3, [r3, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	f002 fadf 	bl	8005aa8 <HAL_GPIO_WritePin>
			hx711_delay_us();
 80034ea:	f7ff ff39 	bl	8003360 <hx711_delay_us>
			data = data << 1;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
			if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	895b      	ldrh	r3, [r3, #10]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f002 faba 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <hx711_value+0xb0>
					== GPIO_PIN_SET)
				data++;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
		for (int8_t i = 0; i < 24; i++) {
 8003510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	74fb      	strb	r3, [r7, #19]
 800351c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003520:	2b17      	cmp	r3, #23
 8003522:	ddd0      	ble.n	80034c6 <hx711_value+0x66>
		}
		for (int8_t i = 0; i < hx711_channel; i++) {
 8003524:	2300      	movs	r3, #0
 8003526:	74bb      	strb	r3, [r7, #18]
 8003528:	e019      	b.n	800355e <hx711_value+0xfe>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	891b      	ldrh	r3, [r3, #8]
 8003532:	2201      	movs	r2, #1
 8003534:	4619      	mov	r1, r3
 8003536:	f002 fab7 	bl	8005aa8 <HAL_GPIO_WritePin>
			hx711_delay_us();
 800353a:	f7ff ff11 	bl	8003360 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	891b      	ldrh	r3, [r3, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	4619      	mov	r1, r3
 800354a:	f002 faad 	bl	8005aa8 <HAL_GPIO_WritePin>
			hx711_delay_us();
 800354e:	f7ff ff07 	bl	8003360 <hx711_delay_us>
		for (int8_t i = 0; i < hx711_channel; i++) {
 8003552:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	74bb      	strb	r3, [r7, #18]
 800355e:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <hx711_value+0x124>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	dbdf      	blt.n	800352a <hx711_value+0xca>
		}
		data = data ^ 0x800000;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8003570:	617b      	str	r3, [r7, #20]
		return data;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	e000      	b.n	8003578 <hx711_value+0x118>
	} else {
		return 100000;
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <hx711_value+0x128>)
	}
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200003cc 	.word	0x200003cc
 8003584:	20000008 	.word	0x20000008
 8003588:	000186a0 	.word	0x000186a0

0800358c <hx711_tare>:
	int32_t answer = (int32_t) (ave / sample);
	hx711_unlock(hx711);
	return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample, int unit) {
 800358c:	b480      	push	{r7}
 800358e:	b08b      	sub	sp, #44	; 0x2c
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	460b      	mov	r3, r1
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	817b      	strh	r3, [r7, #10]
	if (unit == 1) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d158      	bne.n	8003652 <hx711_tare+0xc6>
		float w1 = 0;
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
		float w2 = 0;
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
		for (int i = 1; i < 5; i++) {
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e01a      	b.n	80035e8 <hx711_tare+0x5c>
			w1 += tareweight1[i];
 80035b2:	4a59      	ldr	r2, [pc, #356]	; (8003718 <hx711_tare+0x18c>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			w2 += tareweight2[i];
 80035ca:	4a54      	ldr	r2, [pc, #336]	; (800371c <hx711_tare+0x190>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80035da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035de:	edc7 7a08 	vstr	s15, [r7, #32]
		for (int i = 1; i < 5; i++) {
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3301      	adds	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	dde1      	ble.n	80035b2 <hx711_tare+0x26>
		}
		hx711->offsetA = (w1 * (hx711->coefA)) / 4 + (hx711->offsetA);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80035f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003618:	ee17 2a90 	vmov	r2, s15
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w2 * (hx711->coefB)) / 4 + (hx711->offsetB);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	ed93 7a06 	vldr	s14, [r3, #24]
 8003626:	edd7 7a08 	vldr	s15, [r7, #32]
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003632:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800364a:	ee17 2a90 	vmov	r2, s15
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	615a      	str	r2, [r3, #20]
	}
	if (unit == 2) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d158      	bne.n	800370a <hx711_tare+0x17e>
		float w3 = 0;
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
		float w4 = 0;
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
		for (int i = 1; i < 5; i++) {
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e01a      	b.n	80036a0 <hx711_tare+0x114>
			w3 += tareweight3[i];
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <hx711_tare+0x194>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ed97 7a06 	vldr	s14, [r7, #24]
 800367a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367e:	edc7 7a06 	vstr	s15, [r7, #24]
			w4 += tareweight4[i];
 8003682:	4a28      	ldr	r2, [pc, #160]	; (8003724 <hx711_tare+0x198>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 1; i < 5; i++) {
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3301      	adds	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	dde1      	ble.n	800366a <hx711_tare+0xde>
		}
		hx711->offsetA = (w3 * (hx711->coefA)) / 4 + (hx711->offsetA);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80036ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80036b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80036b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d0:	ee17 2a90 	vmov	r2, s15
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w4 * (hx711->coefB)) / 4 + (hx711->offsetB);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	ed93 7a06 	vldr	s14, [r3, #24]
 80036de:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80036ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	615a      	str	r2, [r3, #20]
	}

}
 800370a:	bf00      	nop
 800370c:	372c      	adds	r7, #44	; 0x2c
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000036c 	.word	0x2000036c
 800371c:	20000380 	.word	0x20000380
 8003720:	20000394 	.word	0x20000394
 8003724:	200003a8 	.word	0x200003a8

08003728 <hx711_calibration>:
//#############################################################################################
void hx711_calibration(hx711_t *hx711, int32_t channel, float scale) {
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	ed87 0a01 	vstr	s0, [r7, #4]

	if (channel == 1) {
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <hx711_calibration+0x1a>
		hx711->coefA = scale;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]
	}
	if (channel == 2) {
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d102      	bne.n	800374e <hx711_calibration+0x26>
		hx711->coefB = scale;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	619a      	str	r2, [r3, #24]
	}

}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <hx711_weight>:
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample, uint8_t num) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
	if (hx_711readtimestamp[1] == 1 && num == 1) {
 800376c:	4b83      	ldr	r3, [pc, #524]	; (800397c <hx711_weight+0x220>)
 800376e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003772:	1e51      	subs	r1, r2, #1
 8003774:	430b      	orrs	r3, r1
 8003776:	d143      	bne.n	8003800 <hx711_weight+0xa4>
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d140      	bne.n	8003800 <hx711_weight+0xa4>
		if (loadcellc1 > 0 && loadcellc1 < 10) {
 800377e:	4b80      	ldr	r3, [pc, #512]	; (8003980 <hx711_weight+0x224>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03c      	beq.n	8003800 <hx711_weight+0xa4>
 8003786:	4b7e      	ldr	r3, [pc, #504]	; (8003980 <hx711_weight+0x224>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b09      	cmp	r3, #9
 800378c:	d838      	bhi.n	8003800 <hx711_weight+0xa4>
			hx711_channel = 1;
 800378e:	4b7d      	ldr	r3, [pc, #500]	; (8003984 <hx711_weight+0x228>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]
			int value = hx711_value(hx711);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fe63 	bl	8003460 <hx711_value>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24
			if (value != 100000) {
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <hx711_weight+0x22c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02d      	beq.n	8003800 <hx711_weight+0xa4>
				if (start == 1)
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <hx711_weight+0x230>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d103      	bne.n	80037b4 <hx711_weight+0x58>
					start = 0;
 80037ac:	4b77      	ldr	r3, [pc, #476]	; (800398c <hx711_weight+0x230>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e025      	b.n	8003800 <hx711_weight+0xa4>
				else {
					loadcellc1 -= 1;
 80037b4:	4b72      	ldr	r3, [pc, #456]	; (8003980 <hx711_weight+0x224>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <hx711_weight+0x224>)
 80037be:	701a      	strb	r2, [r3, #0]
					timecheck[1] += 1;
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <hx711_weight+0x234>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <hx711_weight+0x234>)
 80037c8:	6053      	str	r3, [r2, #4]
					ave1 += value;
 80037ca:	4b72      	ldr	r3, [pc, #456]	; (8003994 <hx711_weight+0x238>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	4413      	add	r3, r2
 80037d2:	4a70      	ldr	r2, [pc, #448]	; (8003994 <hx711_weight+0x238>)
 80037d4:	6013      	str	r3, [r2, #0]
					if (loadcellc1 == 0) {
 80037d6:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <hx711_weight+0x224>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d110      	bne.n	8003800 <hx711_weight+0xa4>
						hx_711readtimestamp[1] = 2;
 80037de:	4967      	ldr	r1, [pc, #412]	; (800397c <hx711_weight+0x220>)
 80037e0:	f04f 0202 	mov.w	r2, #2
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 80037ec:	f7ff fd9e 	bl	800332c <micros>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4961      	ldr	r1, [pc, #388]	; (800397c <hx711_weight+0x220>)
 80037f6:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 80037fa:	4b64      	ldr	r3, [pc, #400]	; (800398c <hx711_weight+0x230>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp[1] == 2 && num == 1) {
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <hx711_weight+0x220>)
 8003802:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003806:	1e91      	subs	r1, r2, #2
 8003808:	430b      	orrs	r3, r1
 800380a:	d14e      	bne.n	80038aa <hx711_weight+0x14e>
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d14b      	bne.n	80038aa <hx711_weight+0x14e>
		if (loadcellc2 > 0 && loadcellc2 < 10) {
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <hx711_weight+0x23c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d047      	beq.n	80038aa <hx711_weight+0x14e>
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <hx711_weight+0x23c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b09      	cmp	r3, #9
 8003820:	d843      	bhi.n	80038aa <hx711_weight+0x14e>
			hx711_channel = 2;
 8003822:	4b58      	ldr	r3, [pc, #352]	; (8003984 <hx711_weight+0x228>)
 8003824:	2202      	movs	r2, #2
 8003826:	601a      	str	r2, [r3, #0]
			int value2 = hx711_value(hx711);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fe19 	bl	8003460 <hx711_value>
 800382e:	6238      	str	r0, [r7, #32]
			if (value2 != 100000) {
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	4a55      	ldr	r2, [pc, #340]	; (8003988 <hx711_weight+0x22c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d038      	beq.n	80038aa <hx711_weight+0x14e>
				if (start == 1) {
 8003838:	4b54      	ldr	r3, [pc, #336]	; (800398c <hx711_weight+0x230>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d109      	bne.n	8003854 <hx711_weight+0xf8>
					start = 0;
 8003840:	4b52      	ldr	r3, [pc, #328]	; (800398c <hx711_weight+0x230>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
					timecheck[0] = micros();
 8003846:	f7ff fd71 	bl	800332c <micros>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <hx711_weight+0x234>)
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e02a      	b.n	80038aa <hx711_weight+0x14e>
				} else {
					timecheck[1] = micros() - timecheck[0];
 8003854:	f7ff fd6a 	bl	800332c <micros>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <hx711_weight+0x234>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	461a      	mov	r2, r3
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <hx711_weight+0x234>)
 8003866:	605a      	str	r2, [r3, #4]
					loadcellc2 -= 1;
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <hx711_weight+0x23c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <hx711_weight+0x23c>)
 8003872:	701a      	strb	r2, [r3, #0]
					ave2 += value2;
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <hx711_weight+0x240>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	4413      	add	r3, r2
 800387c:	4a47      	ldr	r2, [pc, #284]	; (800399c <hx711_weight+0x240>)
 800387e:	6013      	str	r3, [r2, #0]
					if (loadcellc2 == 0) {
 8003880:	4b45      	ldr	r3, [pc, #276]	; (8003998 <hx711_weight+0x23c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d110      	bne.n	80038aa <hx711_weight+0x14e>
						hx_711readtimestamp[1] = 1;
 8003888:	493c      	ldr	r1, [pc, #240]	; (800397c <hx711_weight+0x220>)
 800388a:	f04f 0201 	mov.w	r2, #1
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 8003896:	f7ff fd49 	bl	800332c <micros>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4937      	ldr	r1, [pc, #220]	; (800397c <hx711_weight+0x220>)
 80038a0:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <hx711_weight+0x230>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 1 && num == 2) {
 80038aa:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <hx711_weight+0x244>)
 80038ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038b0:	1e51      	subs	r1, r2, #1
 80038b2:	430b      	orrs	r3, r1
 80038b4:	d13e      	bne.n	8003934 <hx711_weight+0x1d8>
 80038b6:	787b      	ldrb	r3, [r7, #1]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d13b      	bne.n	8003934 <hx711_weight+0x1d8>
		if (loadcellc3 > 0 && loadcellc3 < 10) {
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <hx711_weight+0x248>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d037      	beq.n	8003934 <hx711_weight+0x1d8>
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <hx711_weight+0x248>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d833      	bhi.n	8003934 <hx711_weight+0x1d8>
			hx711_channel = 1;
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <hx711_weight+0x228>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
			int value3 = hx711_value(hx711);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fdc4 	bl	8003460 <hx711_value>
 80038d8:	61f8      	str	r0, [r7, #28]
			if (value3 != 100000) {
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <hx711_weight+0x22c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d028      	beq.n	8003934 <hx711_weight+0x1d8>
				if (start2 == 1)
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <hx711_weight+0x24c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d103      	bne.n	80038f2 <hx711_weight+0x196>
					start2 = 0;
 80038ea:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <hx711_weight+0x24c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e020      	b.n	8003934 <hx711_weight+0x1d8>
				else {
					loadcellc3 -= 1;
 80038f2:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <hx711_weight+0x248>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <hx711_weight+0x248>)
 80038fc:	701a      	strb	r2, [r3, #0]
					ave3 += value3;
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <hx711_weight+0x250>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	4a29      	ldr	r2, [pc, #164]	; (80039ac <hx711_weight+0x250>)
 8003908:	6013      	str	r3, [r2, #0]
					if (loadcellc3 == 0) {
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <hx711_weight+0x248>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d110      	bne.n	8003934 <hx711_weight+0x1d8>
						hx_711readtimestamp2[1] = 2;
 8003912:	4923      	ldr	r1, [pc, #140]	; (80039a0 <hx711_weight+0x244>)
 8003914:	f04f 0202 	mov.w	r2, #2
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 8003920:	f7ff fd04 	bl	800332c <micros>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	491d      	ldr	r1, [pc, #116]	; (80039a0 <hx711_weight+0x244>)
 800392a:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <hx711_weight+0x24c>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 2 && num == 2) {
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <hx711_weight+0x244>)
 8003936:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800393a:	1e91      	subs	r1, r2, #2
 800393c:	430b      	orrs	r3, r1
 800393e:	d15a      	bne.n	80039f6 <hx711_weight+0x29a>
 8003940:	787b      	ldrb	r3, [r7, #1]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d157      	bne.n	80039f6 <hx711_weight+0x29a>
		if (loadcellc4 > 0 && loadcellc4 < 10) {
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <hx711_weight+0x254>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d053      	beq.n	80039f6 <hx711_weight+0x29a>
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <hx711_weight+0x254>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b09      	cmp	r3, #9
 8003954:	d84f      	bhi.n	80039f6 <hx711_weight+0x29a>
			hx711_channel = 2;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <hx711_weight+0x228>)
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
			int value4 = hx711_value(hx711);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fd7f 	bl	8003460 <hx711_value>
 8003962:	61b8      	str	r0, [r7, #24]
			if (value4 != 100000) {
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <hx711_weight+0x22c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d044      	beq.n	80039f6 <hx711_weight+0x29a>
				if (start2 == 1)
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <hx711_weight+0x24c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d11f      	bne.n	80039b4 <hx711_weight+0x258>
					start2 = 0;
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <hx711_weight+0x24c>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e03c      	b.n	80039f6 <hx711_weight+0x29a>
 800397c:	20000010 	.word	0x20000010
 8003980:	20000368 	.word	0x20000368
 8003984:	20000008 	.word	0x20000008
 8003988:	000186a0 	.word	0x000186a0
 800398c:	20000030 	.word	0x20000030
 8003990:	20000360 	.word	0x20000360
 8003994:	200003bc 	.word	0x200003bc
 8003998:	20000369 	.word	0x20000369
 800399c:	200003c0 	.word	0x200003c0
 80039a0:	20000020 	.word	0x20000020
 80039a4:	2000036a 	.word	0x2000036a
 80039a8:	20000034 	.word	0x20000034
 80039ac:	200003c4 	.word	0x200003c4
 80039b0:	2000036b 	.word	0x2000036b
				else {
					loadcellc4 -= 1;
 80039b4:	4bb1      	ldr	r3, [pc, #708]	; (8003c7c <hx711_weight+0x520>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4baf      	ldr	r3, [pc, #700]	; (8003c7c <hx711_weight+0x520>)
 80039be:	701a      	strb	r2, [r3, #0]
					ave4 += value4;
 80039c0:	4baf      	ldr	r3, [pc, #700]	; (8003c80 <hx711_weight+0x524>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	4413      	add	r3, r2
 80039c8:	4aad      	ldr	r2, [pc, #692]	; (8003c80 <hx711_weight+0x524>)
 80039ca:	6013      	str	r3, [r2, #0]
					if (loadcellc4 == 0) {
 80039cc:	4bab      	ldr	r3, [pc, #684]	; (8003c7c <hx711_weight+0x520>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d110      	bne.n	80039f6 <hx711_weight+0x29a>
						hx_711readtimestamp2[1] = 1;
 80039d4:	49ab      	ldr	r1, [pc, #684]	; (8003c84 <hx711_weight+0x528>)
 80039d6:	f04f 0201 	mov.w	r2, #1
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 80039e2:	f7ff fca3 	bl	800332c <micros>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	49a6      	ldr	r1, [pc, #664]	; (8003c84 <hx711_weight+0x528>)
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 80039f0:	4ba5      	ldr	r3, [pc, #660]	; (8003c88 <hx711_weight+0x52c>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	if ((loadcellc1 <= 0 || loadcellc1 >= 5) && loadcellc1 != 10 && num == 1) {
 80039f6:	4ba5      	ldr	r3, [pc, #660]	; (8003c8c <hx711_weight+0x530>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <hx711_weight+0x2aa>
 80039fe:	4ba3      	ldr	r3, [pc, #652]	; (8003c8c <hx711_weight+0x530>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d94c      	bls.n	8003aa0 <hx711_weight+0x344>
 8003a06:	4ba1      	ldr	r3, [pc, #644]	; (8003c8c <hx711_weight+0x530>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d048      	beq.n	8003aa0 <hx711_weight+0x344>
 8003a0e:	787b      	ldrb	r3, [r7, #1]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d145      	bne.n	8003aa0 <hx711_weight+0x344>
		int32_t data = (int32_t) (ave1 / sample);
 8003a14:	4b9e      	ldr	r3, [pc, #632]	; (8003c90 <hx711_weight+0x534>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a1e:	617b      	str	r3, [r7, #20]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc1 = 10;
 8003a40:	4b92      	ldr	r3, [pc, #584]	; (8003c8c <hx711_weight+0x530>)
 8003a42:	220a      	movs	r2, #10
 8003a44:	701a      	strb	r2, [r3, #0]
		tareweight1[(int) tareweight1[0] + 1] = hx711->weightA;
 8003a46:	4b93      	ldr	r3, [pc, #588]	; (8003c94 <hx711_weight+0x538>)
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a50:	ee17 3a90 	vmov	r3, s15
 8003a54:	3301      	adds	r3, #1
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a12      	ldr	r2, [r2, #32]
 8003a5a:	498e      	ldr	r1, [pc, #568]	; (8003c94 <hx711_weight+0x538>)
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	601a      	str	r2, [r3, #0]
		tareweight1[0] = fabs(((int) tareweight1[0] + 1) % 4);
 8003a62:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <hx711_weight+0x538>)
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a6c:	ee17 3a90 	vmov	r3, s15
 8003a70:	3301      	adds	r3, #1
 8003a72:	425a      	negs	r2, r3
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	bf58      	it	pl
 8003a7e:	4253      	negpl	r3, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fcfb 	bl	800047c <__aeabi_i2d>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f7fc fff9 	bl	8000a84 <__aeabi_d2f>
 8003a92:	ee07 0a90 	vmov	s15, r0
 8003a96:	eef0 7ae7 	vabs.f32	s15, s15
 8003a9a:	4b7e      	ldr	r3, [pc, #504]	; (8003c94 <hx711_weight+0x538>)
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc2 <= 0 || loadcellc2 >= 5) && loadcellc2 != 10 && num == 1) {
 8003aa0:	4b7d      	ldr	r3, [pc, #500]	; (8003c98 <hx711_weight+0x53c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <hx711_weight+0x354>
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <hx711_weight+0x53c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d94c      	bls.n	8003b4a <hx711_weight+0x3ee>
 8003ab0:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <hx711_weight+0x53c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b0a      	cmp	r3, #10
 8003ab6:	d048      	beq.n	8003b4a <hx711_weight+0x3ee>
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d145      	bne.n	8003b4a <hx711_weight+0x3ee>
		int32_t data = (int32_t) (ave2 / sample);
 8003abe:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <hx711_weight+0x540>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ac8:	613b      	str	r3, [r7, #16]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	ed93 7a06 	vldr	s14, [r3, #24]
 8003ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc2 = 10;
 8003aea:	4b6b      	ldr	r3, [pc, #428]	; (8003c98 <hx711_weight+0x53c>)
 8003aec:	220a      	movs	r2, #10
 8003aee:	701a      	strb	r2, [r3, #0]
		tareweight2[(int) tareweight2[0] + 1] = hx711->weightB;
 8003af0:	4b6b      	ldr	r3, [pc, #428]	; (8003ca0 <hx711_weight+0x544>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003afa:	ee17 3a90 	vmov	r3, s15
 8003afe:	3301      	adds	r3, #1
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b04:	4966      	ldr	r1, [pc, #408]	; (8003ca0 <hx711_weight+0x544>)
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	601a      	str	r2, [r3, #0]
		tareweight2[0] = fabs(((int) tareweight2[0] + 1) % 4);
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <hx711_weight+0x544>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b16:	ee17 3a90 	vmov	r3, s15
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	425a      	negs	r2, r3
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	f002 0203 	and.w	r2, r2, #3
 8003b26:	bf58      	it	pl
 8003b28:	4253      	negpl	r3, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fca6 	bl	800047c <__aeabi_i2d>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7fc ffa4 	bl	8000a84 <__aeabi_d2f>
 8003b3c:	ee07 0a90 	vmov	s15, r0
 8003b40:	eef0 7ae7 	vabs.f32	s15, s15
 8003b44:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <hx711_weight+0x544>)
 8003b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc3 <= 0 || loadcellc3 >= 5) && loadcellc3 != 10 && num == 2) {
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <hx711_weight+0x548>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <hx711_weight+0x3fe>
 8003b52:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <hx711_weight+0x548>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d94c      	bls.n	8003bf4 <hx711_weight+0x498>
 8003b5a:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <hx711_weight+0x548>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	d048      	beq.n	8003bf4 <hx711_weight+0x498>
 8003b62:	787b      	ldrb	r3, [r7, #1]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d145      	bne.n	8003bf4 <hx711_weight+0x498>
		int32_t data = (int32_t) (ave3 / sample);
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <hx711_weight+0x54c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b72:	60fb      	str	r3, [r7, #12]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc3 = 10;
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <hx711_weight+0x548>)
 8003b96:	220a      	movs	r2, #10
 8003b98:	701a      	strb	r2, [r3, #0]
		tareweight3[(int) tareweight3[0] + 1] = hx711->weightA;
 8003b9a:	4b44      	ldr	r3, [pc, #272]	; (8003cac <hx711_weight+0x550>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	ee17 3a90 	vmov	r3, s15
 8003ba8:	3301      	adds	r3, #1
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6a12      	ldr	r2, [r2, #32]
 8003bae:	493f      	ldr	r1, [pc, #252]	; (8003cac <hx711_weight+0x550>)
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	601a      	str	r2, [r3, #0]
		tareweight3[0] = fabs(((int) tareweight3[0] + 1) % 4);
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <hx711_weight+0x550>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	f002 0203 	and.w	r2, r2, #3
 8003bd0:	bf58      	it	pl
 8003bd2:	4253      	negpl	r3, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fc51 	bl	800047c <__aeabi_i2d>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fc ff4f 	bl	8000a84 <__aeabi_d2f>
 8003be6:	ee07 0a90 	vmov	s15, r0
 8003bea:	eef0 7ae7 	vabs.f32	s15, s15
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <hx711_weight+0x550>)
 8003bf0:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc4 <= 0 || loadcellc4 >= 5) && loadcellc4 != 10 && num == 2) {
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <hx711_weight+0x520>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <hx711_weight+0x4a8>
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <hx711_weight+0x520>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d969      	bls.n	8003cd8 <hx711_weight+0x57c>
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <hx711_weight+0x520>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b0a      	cmp	r3, #10
 8003c0a:	d065      	beq.n	8003cd8 <hx711_weight+0x57c>
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d162      	bne.n	8003cd8 <hx711_weight+0x57c>
		int32_t data = (int32_t) (ave4 / sample);
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <hx711_weight+0x524>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	ed93 7a06 	vldr	s14, [r3, #24]
 8003c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc4 = 10;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <hx711_weight+0x520>)
 8003c40:	220a      	movs	r2, #10
 8003c42:	701a      	strb	r2, [r3, #0]
		tareweight4[(int) tareweight4[0] + 1] = hx711->weightB;
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <hx711_weight+0x554>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4e:	ee17 3a90 	vmov	r3, s15
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	4915      	ldr	r1, [pc, #84]	; (8003cb0 <hx711_weight+0x554>)
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	601a      	str	r2, [r3, #0]
		tareweight4[0] = fabs(((int) tareweight4[0] + 1) % 4);
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <hx711_weight+0x554>)
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c6a:	ee17 3a90 	vmov	r3, s15
 8003c6e:	3301      	adds	r3, #1
 8003c70:	425a      	negs	r2, r3
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	f002 0203 	and.w	r2, r2, #3
 8003c7a:	e01b      	b.n	8003cb4 <hx711_weight+0x558>
 8003c7c:	2000036b 	.word	0x2000036b
 8003c80:	200003c8 	.word	0x200003c8
 8003c84:	20000020 	.word	0x20000020
 8003c88:	20000034 	.word	0x20000034
 8003c8c:	20000368 	.word	0x20000368
 8003c90:	200003bc 	.word	0x200003bc
 8003c94:	2000036c 	.word	0x2000036c
 8003c98:	20000369 	.word	0x20000369
 8003c9c:	200003c0 	.word	0x200003c0
 8003ca0:	20000380 	.word	0x20000380
 8003ca4:	2000036a 	.word	0x2000036a
 8003ca8:	200003c4 	.word	0x200003c4
 8003cac:	20000394 	.word	0x20000394
 8003cb0:	200003a8 	.word	0x200003a8
 8003cb4:	bf58      	it	pl
 8003cb6:	4253      	negpl	r3, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fbdf 	bl	800047c <__aeabi_i2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc fedd 	bl	8000a84 <__aeabi_d2f>
 8003cca:	ee07 0a90 	vmov	s15, r0
 8003cce:	eef0 7ae7 	vabs.f32	s15, s15
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <hx711_weight+0x588>)
 8003cd4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003cd8:	bf00      	nop
 8003cda:	eeb0 0a67 	vmov.f32	s0, s15
 8003cde:	3728      	adds	r7, #40	; 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200003a8 	.word	0x200003a8

08003ce8 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coefA, float coefB) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cf4:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->coefA = coefA;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	611a      	str	r2, [r3, #16]
	hx711->coefB = coefB;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <tcaselect>:
//#############################################################################################
void hx711_power_up(hx711_t *hx711) {
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
}
//#############################################################################################
void tcaselect(uint8_t i) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
	if (i > 7)
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	d80f      	bhi.n	8003d40 <tcaselect+0x30>
		return;
	uint8_t pData[1] = { 1 << i };
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, TCAADDR, pData, 1, 10);
 8003d2c:	f107 020c 	add.w	r2, r7, #12
 8003d30:	230a      	movs	r3, #10
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2301      	movs	r3, #1
 8003d36:	21e0      	movs	r1, #224	; 0xe0
 8003d38:	4803      	ldr	r0, [pc, #12]	; (8003d48 <tcaselect+0x38>)
 8003d3a:	f002 f82b 	bl	8005d94 <HAL_I2C_Master_Transmit>
 8003d3e:	e000      	b.n	8003d42 <tcaselect+0x32>
		return;
 8003d40:	bf00      	nop
}
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000084 	.word	0x20000084

08003d4c <EncoderVelocity_Update>:
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
}

float EncoderVelocity_Update(int unit) {
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	ed2d 8b02 	vpush	{d8}
 8003d54:	b08e      	sub	sp, #56	; 0x38
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
	static uint32_t EncoderLastPosition2 = 0;
	static uint64_t EncoderLastTimestamp2 = 0;
	static uint32_t EncoderLastPosition3 = 0;
	static uint64_t EncoderLastTimestamp3 = 0;
	//read data
	if (unit == 1) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d13e      	bne.n	8003dde <EncoderVelocity_Update+0x92>
		uint32_t EncoderNowPosition1 = distancepulse1;
 8003d60:	4b64      	ldr	r3, [pc, #400]	; (8003ef4 <EncoderVelocity_Update+0x1a8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	617b      	str	r3, [r7, #20]
		uint64_t EncoderNowTimestamp1 = micros() / 10;
 8003d66:	f7ff fae1 	bl	800332c <micros>
 8003d6a:	f04f 020a 	mov.w	r2, #10
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f7fc ffe5 	bl	8000d40 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		EncoderTimeDiff1 = EncoderNowTimestamp1 - EncoderLastTimestamp1;
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <EncoderVelocity_Update+0x1ac>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d88:	ebb0 0a02 	subs.w	sl, r0, r2
 8003d8c:	eb61 0b03 	sbc.w	fp, r1, r3
 8003d90:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <EncoderVelocity_Update+0x1b0>)
 8003d92:	e9c3 ab00 	strd	sl, fp, [r3]
		EncoderPositionDiff1 = EncoderNowPosition1 - EncoderLastPosition1;
 8003d96:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <EncoderVelocity_Update+0x1b4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b58      	ldr	r3, [pc, #352]	; (8003f04 <EncoderVelocity_Update+0x1b8>)
 8003da2:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition1 = EncoderNowPosition1;
 8003da4:	4a56      	ldr	r2, [pc, #344]	; (8003f00 <EncoderVelocity_Update+0x1b4>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp1 = EncoderNowTimestamp1;
 8003daa:	4953      	ldr	r1, [pc, #332]	; (8003ef8 <EncoderVelocity_Update+0x1ac>)
 8003dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db0:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff1 * 100000) / (float) EncoderTimeDiff1;
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <EncoderVelocity_Update+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a53      	ldr	r2, [pc, #332]	; (8003f08 <EncoderVelocity_Update+0x1bc>)
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <EncoderVelocity_Update+0x1b0>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc ff70 	bl	8000cb4 <__aeabi_ul2f>
 8003dd4:	ee07 0a10 	vmov	s14, r0
 8003dd8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003ddc:	e082      	b.n	8003ee4 <EncoderVelocity_Update+0x198>
	}
	if (unit == 2) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d13e      	bne.n	8003e62 <EncoderVelocity_Update+0x116>
		uint32_t EncoderNowPosition2 = distancepulse2;
 8003de4:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <EncoderVelocity_Update+0x1c0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
		uint64_t EncoderNowTimestamp2 = micros() / 10;
 8003dea:	f7ff fa9f 	bl	800332c <micros>
 8003dee:	f04f 020a 	mov.w	r2, #10
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	f7fc ffa3 	bl	8000d40 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
		EncoderTimeDiff2 = EncoderNowTimestamp2 - EncoderLastTimestamp2;
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <EncoderVelocity_Update+0x1c4>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e0c:	ebb0 0802 	subs.w	r8, r0, r2
 8003e10:	eb61 0903 	sbc.w	r9, r1, r3
 8003e14:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <EncoderVelocity_Update+0x1c8>)
 8003e16:	e9c3 8900 	strd	r8, r9, [r3]
		EncoderPositionDiff2 = EncoderNowPosition2 - EncoderLastPosition2;
 8003e1a:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <EncoderVelocity_Update+0x1cc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <EncoderVelocity_Update+0x1d0>)
 8003e26:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition2 = EncoderNowPosition2;
 8003e28:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <EncoderVelocity_Update+0x1cc>)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp2 = EncoderNowTimestamp2;
 8003e2e:	4938      	ldr	r1, [pc, #224]	; (8003f10 <EncoderVelocity_Update+0x1c4>)
 8003e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e34:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff2 * 100000) / (float) EncoderTimeDiff2;
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <EncoderVelocity_Update+0x1d0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a32      	ldr	r2, [pc, #200]	; (8003f08 <EncoderVelocity_Update+0x1bc>)
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <EncoderVelocity_Update+0x1c8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc ff2e 	bl	8000cb4 <__aeabi_ul2f>
 8003e58:	ee07 0a10 	vmov	s14, r0
 8003e5c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003e60:	e040      	b.n	8003ee4 <EncoderVelocity_Update+0x198>
	}
	if (unit == 3) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d13d      	bne.n	8003ee4 <EncoderVelocity_Update+0x198>
		uint32_t EncoderNowPosition3 = distancepulse3;
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <EncoderVelocity_Update+0x1d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
		uint64_t EncoderNowTimestamp3 = micros() / 10;
 8003e6e:	f7ff fa5d 	bl	800332c <micros>
 8003e72:	f04f 020a 	mov.w	r2, #10
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	f7fc ff61 	bl	8000d40 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		EncoderTimeDiff3 = EncoderNowTimestamp3 - EncoderLastTimestamp3;
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <EncoderVelocity_Update+0x1d8>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e90:	1a84      	subs	r4, r0, r2
 8003e92:	eb61 0503 	sbc.w	r5, r1, r3
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <EncoderVelocity_Update+0x1dc>)
 8003e98:	e9c3 4500 	strd	r4, r5, [r3]
		EncoderPositionDiff3 = EncoderNowPosition3 - EncoderLastPosition3;
 8003e9c:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <EncoderVelocity_Update+0x1e0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <EncoderVelocity_Update+0x1e4>)
 8003ea8:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition3 = EncoderNowPosition3;
 8003eaa:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <EncoderVelocity_Update+0x1e0>)
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp3 = EncoderNowTimestamp3;
 8003eb0:	491c      	ldr	r1, [pc, #112]	; (8003f24 <EncoderVelocity_Update+0x1d8>)
 8003eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb6:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff3 * 100000) / (float) EncoderTimeDiff3;
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <EncoderVelocity_Update+0x1e4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <EncoderVelocity_Update+0x1bc>)
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <EncoderVelocity_Update+0x1dc>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fc feed 	bl	8000cb4 <__aeabi_ul2f>
 8003eda:	ee07 0a10 	vmov	s14, r0
 8003ede:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003ee2:	e7ff      	b.n	8003ee4 <EncoderVelocity_Update+0x198>
	}
}
 8003ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee8:	3738      	adds	r7, #56	; 0x38
 8003eea:	46bd      	mov	sp, r7
 8003eec:	ecbd 8b02 	vpop	{d8}
 8003ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef4:	20000448 	.word	0x20000448
 8003ef8:	200005b0 	.word	0x200005b0
 8003efc:	20000480 	.word	0x20000480
 8003f00:	200005b8 	.word	0x200005b8
 8003f04:	2000047c 	.word	0x2000047c
 8003f08:	000186a0 	.word	0x000186a0
 8003f0c:	2000044c 	.word	0x2000044c
 8003f10:	200005c0 	.word	0x200005c0
 8003f14:	20000490 	.word	0x20000490
 8003f18:	200005c8 	.word	0x200005c8
 8003f1c:	20000488 	.word	0x20000488
 8003f20:	20000450 	.word	0x20000450
 8003f24:	200005d0 	.word	0x200005d0
 8003f28:	200004a0 	.word	0x200004a0
 8003f2c:	200005d8 	.word	0x200005d8
 8003f30:	20000498 	.word	0x20000498

08003f34 <limitswitchlowpass>:
void limitswitchlowpass() {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
	if (limitswitch1 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0) {
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <limitswitchlowpass+0x148>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10d      	bne.n	8003f5c <limitswitchlowpass+0x28>
 8003f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f44:	484e      	ldr	r0, [pc, #312]	; (8004080 <limitswitchlowpass+0x14c>)
 8003f46:	f001 fd97 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <limitswitchlowpass+0x28>
		limitswitchc1 += 1;
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <limitswitchlowpass+0x150>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <limitswitchlowpass+0x150>)
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e014      	b.n	8003f86 <limitswitchlowpass+0x52>
	} else if (limitswitch1 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1) {
 8003f5c:	4b47      	ldr	r3, [pc, #284]	; (800407c <limitswitchlowpass+0x148>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <limitswitchlowpass+0x4c>
 8003f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f68:	4845      	ldr	r0, [pc, #276]	; (8004080 <limitswitchlowpass+0x14c>)
 8003f6a:	f001 fd85 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <limitswitchlowpass+0x4c>
		limitswitchc1 -= 1;
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <limitswitchlowpass+0x150>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4a42      	ldr	r2, [pc, #264]	; (8004084 <limitswitchlowpass+0x150>)
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e002      	b.n	8003f86 <limitswitchlowpass+0x52>
	} else {
		limitswitchc1 = 0;
 8003f80:	4b40      	ldr	r3, [pc, #256]	; (8004084 <limitswitchlowpass+0x150>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc1 >= 10)
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <limitswitchlowpass+0x150>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b09      	cmp	r3, #9
 8003f8c:	dd02      	ble.n	8003f94 <limitswitchlowpass+0x60>
		limitswitch1 = 0;
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	; (800407c <limitswitchlowpass+0x148>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
	if (limitswitchc1 <= -10)
 8003f94:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <limitswitchlowpass+0x150>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f113 0f09 	cmn.w	r3, #9
 8003f9c:	da02      	bge.n	8003fa4 <limitswitchlowpass+0x70>
		limitswitch1 = 1;
 8003f9e:	4b37      	ldr	r3, [pc, #220]	; (800407c <limitswitchlowpass+0x148>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

	if (limitswitch2 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) {
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <limitswitchlowpass+0x154>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10d      	bne.n	8003fc8 <limitswitchlowpass+0x94>
 8003fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fb0:	4833      	ldr	r0, [pc, #204]	; (8004080 <limitswitchlowpass+0x14c>)
 8003fb2:	f001 fd61 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <limitswitchlowpass+0x94>
		limitswitchc2 += 1;
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <limitswitchlowpass+0x158>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a32      	ldr	r2, [pc, #200]	; (800408c <limitswitchlowpass+0x158>)
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e014      	b.n	8003ff2 <limitswitchlowpass+0xbe>
	} else if (limitswitch2 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <limitswitchlowpass+0x154>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <limitswitchlowpass+0xb8>
 8003fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd4:	482a      	ldr	r0, [pc, #168]	; (8004080 <limitswitchlowpass+0x14c>)
 8003fd6:	f001 fd4f 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <limitswitchlowpass+0xb8>
		limitswitchc2 -= 1;
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <limitswitchlowpass+0x158>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	4a29      	ldr	r2, [pc, #164]	; (800408c <limitswitchlowpass+0x158>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e002      	b.n	8003ff2 <limitswitchlowpass+0xbe>
	} else {
		limitswitchc2 = 0;
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <limitswitchlowpass+0x158>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc2 >= 10)
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <limitswitchlowpass+0x158>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b09      	cmp	r3, #9
 8003ff8:	dd02      	ble.n	8004000 <limitswitchlowpass+0xcc>
		limitswitch2 = 0;
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <limitswitchlowpass+0x154>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
	if (limitswitchc2 <= -10)
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <limitswitchlowpass+0x158>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f113 0f09 	cmn.w	r3, #9
 8004008:	da02      	bge.n	8004010 <limitswitchlowpass+0xdc>
		limitswitch2 = 1;
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <limitswitchlowpass+0x154>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

	if (limitswitch3 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0) {
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <limitswitchlowpass+0x15c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10c      	bne.n	8004032 <limitswitchlowpass+0xfe>
 8004018:	2180      	movs	r1, #128	; 0x80
 800401a:	4819      	ldr	r0, [pc, #100]	; (8004080 <limitswitchlowpass+0x14c>)
 800401c:	f001 fd2c 	bl	8005a78 <HAL_GPIO_ReadPin>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <limitswitchlowpass+0xfe>
		limitswitchc3 += 1;
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <limitswitchlowpass+0x160>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <limitswitchlowpass+0x160>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	e013      	b.n	800405a <limitswitchlowpass+0x126>
	} else if (limitswitch3 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) {
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <limitswitchlowpass+0x15c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <limitswitchlowpass+0x120>
 800403a:	2180      	movs	r1, #128	; 0x80
 800403c:	4810      	ldr	r0, [pc, #64]	; (8004080 <limitswitchlowpass+0x14c>)
 800403e:	f001 fd1b 	bl	8005a78 <HAL_GPIO_ReadPin>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <limitswitchlowpass+0x120>
		limitswitchc3 -= 1;
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <limitswitchlowpass+0x160>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <limitswitchlowpass+0x160>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e002      	b.n	800405a <limitswitchlowpass+0x126>
	} else {
		limitswitchc3 = 0;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <limitswitchlowpass+0x160>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc3 >= 10)
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <limitswitchlowpass+0x160>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b09      	cmp	r3, #9
 8004060:	dd02      	ble.n	8004068 <limitswitchlowpass+0x134>
		limitswitch3 = 0;
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <limitswitchlowpass+0x15c>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
	if (limitswitchc3 <= -10)
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <limitswitchlowpass+0x160>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f113 0f09 	cmn.w	r3, #9
 8004070:	da02      	bge.n	8004078 <limitswitchlowpass+0x144>
		limitswitch3 = 1;
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <limitswitchlowpass+0x15c>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]

}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000418 	.word	0x20000418
 8004080:	40020800 	.word	0x40020800
 8004084:	20000424 	.word	0x20000424
 8004088:	2000041c 	.word	0x2000041c
 800408c:	20000428 	.word	0x20000428
 8004090:	20000420 	.word	0x20000420
 8004094:	2000042c 	.word	0x2000042c

08004098 <distancemeasurement>:
void distancemeasurement() {
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	distancepulse1 = TIM1->CNT - error1 + distancestamp1;
 800409c:	4b60      	ldr	r3, [pc, #384]	; (8004220 <distancemeasurement+0x188>)
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	4a60      	ldr	r2, [pc, #384]	; (8004224 <distancemeasurement+0x18c>)
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	4a60      	ldr	r2, [pc, #384]	; (8004228 <distancemeasurement+0x190>)
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b5f      	ldr	r3, [pc, #380]	; (800422c <distancemeasurement+0x194>)
 80040b0:	601a      	str	r2, [r3, #0]
	if (olddistance1 - distancepulse1 >= 32500) {
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <distancemeasurement+0x198>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b5d      	ldr	r3, [pc, #372]	; (800422c <distancemeasurement+0x194>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 80040c0:	4293      	cmp	r3, r2
 80040c2:	dd51      	ble.n	8004168 <distancemeasurement+0xd0>
		distancestamp1 += 65535;
 80040c4:	4b58      	ldr	r3, [pc, #352]	; (8004228 <distancemeasurement+0x190>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80040cc:	33ff      	adds	r3, #255	; 0xff
 80040ce:	4a56      	ldr	r2, [pc, #344]	; (8004228 <distancemeasurement+0x190>)
 80040d0:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 + 65535;
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <distancemeasurement+0x194>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80040da:	33ff      	adds	r3, #255	; 0xff
 80040dc:	4a54      	ldr	r2, [pc, #336]	; (8004230 <distancemeasurement+0x198>)
 80040de:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 80040e0:	4b52      	ldr	r3, [pc, #328]	; (800422c <distancemeasurement+0x194>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80040e8:	33ff      	adds	r3, #255	; 0xff
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc f9c6 	bl	800047c <__aeabi_i2d>
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <distancemeasurement+0x19c>)
 80040f6:	f7fc fb55 	bl	80007a4 <__aeabi_ddiv>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <distancemeasurement+0x1a0>)
 8004108:	f7fc fb4c 	bl	80007a4 <__aeabi_ddiv>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	4b48      	ldr	r3, [pc, #288]	; (800423c <distancemeasurement+0x1a4>)
 800411a:	f7fc fb43 	bl	80007a4 <__aeabi_ddiv>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	4b45      	ldr	r3, [pc, #276]	; (8004240 <distancemeasurement+0x1a8>)
 800412c:	f7fc fb3a 	bl	80007a4 <__aeabi_ddiv>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	4b41      	ldr	r3, [pc, #260]	; (8004244 <distancemeasurement+0x1ac>)
 800413e:	f7fc fa07 	bl	8000550 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	4b3e      	ldr	r3, [pc, #248]	; (8004248 <distancemeasurement+0x1b0>)
 8004150:	f7fc f9fe 	bl	8000550 <__aeabi_dmul>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f7fc fc92 	bl	8000a84 <__aeabi_d2f>
 8004160:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8004162:	4a3a      	ldr	r2, [pc, #232]	; (800424c <distancemeasurement+0x1b4>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e0b7      	b.n	80042d8 <distancemeasurement+0x240>
	} else if (distancepulse1 - olddistance1 >= 32500) {
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <distancemeasurement+0x194>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b30      	ldr	r3, [pc, #192]	; (8004230 <distancemeasurement+0x198>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8004176:	4293      	cmp	r3, r2
 8004178:	dd6a      	ble.n	8004250 <distancemeasurement+0x1b8>
		distancestamp1 -= 65535;
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <distancemeasurement+0x190>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004182:	3bff      	subs	r3, #255	; 0xff
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <distancemeasurement+0x190>)
 8004186:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 - 65535;
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <distancemeasurement+0x194>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004190:	3bff      	subs	r3, #255	; 0xff
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <distancemeasurement+0x198>)
 8004194:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <distancemeasurement+0x194>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800419e:	3bff      	subs	r3, #255	; 0xff
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f96b 	bl	800047c <__aeabi_i2d>
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <distancemeasurement+0x19c>)
 80041ac:	f7fc fafa 	bl	80007a4 <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <distancemeasurement+0x1a0>)
 80041be:	f7fc faf1 	bl	80007a4 <__aeabi_ddiv>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <distancemeasurement+0x1a4>)
 80041d0:	f7fc fae8 	bl	80007a4 <__aeabi_ddiv>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <distancemeasurement+0x1a8>)
 80041e2:	f7fc fadf 	bl	80007a4 <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <distancemeasurement+0x1ac>)
 80041f4:	f7fc f9ac 	bl	8000550 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <distancemeasurement+0x1b0>)
 8004206:	f7fc f9a3 	bl	8000550 <__aeabi_dmul>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	f7fc fc37 	bl	8000a84 <__aeabi_d2f>
 8004216:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <distancemeasurement+0x1b4>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e05c      	b.n	80042d8 <distancemeasurement+0x240>
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	20000470 	.word	0x20000470
 8004228:	20000460 	.word	0x20000460
 800422c:	20000448 	.word	0x20000448
 8004230:	20000464 	.word	0x20000464
 8004234:	40240000 	.word	0x40240000
 8004238:	40500000 	.word	0x40500000
 800423c:	40100000 	.word	0x40100000
 8004240:	40340000 	.word	0x40340000
 8004244:	402e0000 	.word	0x402e0000
 8004248:	40200000 	.word	0x40200000
 800424c:	20000430 	.word	0x20000430
	} else {
		olddistance1 = distancepulse1;
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <distancemeasurement+0x390>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a75      	ldr	r2, [pc, #468]	; (800442c <distancemeasurement+0x394>)
 8004256:	6013      	str	r3, [r2, #0]
		distancemetre1 = distancepulse1 / 10.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <distancemeasurement+0x390>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f90d 	bl	800047c <__aeabi_i2d>
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	4b72      	ldr	r3, [pc, #456]	; (8004430 <distancemeasurement+0x398>)
 8004268:	f7fc fa9c 	bl	80007a4 <__aeabi_ddiv>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	4b6e      	ldr	r3, [pc, #440]	; (8004434 <distancemeasurement+0x39c>)
 800427a:	f7fc fa93 	bl	80007a4 <__aeabi_ddiv>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	4b6b      	ldr	r3, [pc, #428]	; (8004438 <distancemeasurement+0x3a0>)
 800428c:	f7fc fa8a 	bl	80007a4 <__aeabi_ddiv>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	4b67      	ldr	r3, [pc, #412]	; (800443c <distancemeasurement+0x3a4>)
 800429e:	f7fc fa81 	bl	80007a4 <__aeabi_ddiv>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	4b64      	ldr	r3, [pc, #400]	; (8004440 <distancemeasurement+0x3a8>)
 80042b0:	f7fc f94e 	bl	8000550 <__aeabi_dmul>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	4b60      	ldr	r3, [pc, #384]	; (8004444 <distancemeasurement+0x3ac>)
 80042c2:	f7fc f945 	bl	8000550 <__aeabi_dmul>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fc fbd9 	bl	8000a84 <__aeabi_d2f>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a5c      	ldr	r2, [pc, #368]	; (8004448 <distancemeasurement+0x3b0>)
 80042d6:	6013      	str	r3, [r2, #0]
	}
	distancepulse2 = TIM2->CNT - error2 + distancestamp2;
 80042d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	4a5b      	ldr	r2, [pc, #364]	; (800444c <distancemeasurement+0x3b4>)
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	4a5a      	ldr	r2, [pc, #360]	; (8004450 <distancemeasurement+0x3b8>)
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <distancemeasurement+0x3bc>)
 80042ee:	601a      	str	r2, [r3, #0]
	distancemetre2 = distancepulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 80042f0:	4b58      	ldr	r3, [pc, #352]	; (8004454 <distancemeasurement+0x3bc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc f8c1 	bl	800047c <__aeabi_i2d>
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	4b56      	ldr	r3, [pc, #344]	; (8004458 <distancemeasurement+0x3c0>)
 8004300:	f7fc fa50 	bl	80007a4 <__aeabi_ddiv>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	4b48      	ldr	r3, [pc, #288]	; (8004434 <distancemeasurement+0x39c>)
 8004312:	f7fc fa47 	bl	80007a4 <__aeabi_ddiv>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	4b45      	ldr	r3, [pc, #276]	; (8004438 <distancemeasurement+0x3a0>)
 8004324:	f7fc fa3e 	bl	80007a4 <__aeabi_ddiv>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	4b41      	ldr	r3, [pc, #260]	; (800443c <distancemeasurement+0x3a4>)
 8004336:	f7fc fa35 	bl	80007a4 <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <distancemeasurement+0x3a8>)
 8004348:	f7fc f902 	bl	8000550 <__aeabi_dmul>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <distancemeasurement+0x3ac>)
 800435a:	f7fc f8f9 	bl	8000550 <__aeabi_dmul>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	f7fc fb8d 	bl	8000a84 <__aeabi_d2f>
 800436a:	4603      	mov	r3, r0
 800436c:	4a3b      	ldr	r2, [pc, #236]	; (800445c <distancemeasurement+0x3c4>)
 800436e:	6013      	str	r3, [r2, #0]
	distancepulse3 = TIM3->CNT - error3 + distancestamp3;
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <distancemeasurement+0x3c8>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	4a3b      	ldr	r2, [pc, #236]	; (8004464 <distancemeasurement+0x3cc>)
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <distancemeasurement+0x3d0>)
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	4413      	add	r3, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4b3a      	ldr	r3, [pc, #232]	; (800446c <distancemeasurement+0x3d4>)
 8004384:	601a      	str	r2, [r3, #0]
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 8004386:	4b39      	ldr	r3, [pc, #228]	; (800446c <distancemeasurement+0x3d4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc f876 	bl	800047c <__aeabi_i2d>
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	4b30      	ldr	r3, [pc, #192]	; (8004458 <distancemeasurement+0x3c0>)
 8004396:	f7fc fa05 	bl	80007a4 <__aeabi_ddiv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <distancemeasurement+0x39c>)
 80043a8:	f7fc f9fc 	bl	80007a4 <__aeabi_ddiv>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <distancemeasurement+0x3a0>)
 80043ba:	f7fc f9f3 	bl	80007a4 <__aeabi_ddiv>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <distancemeasurement+0x3a8>)
 80043cc:	f7fc f9ea 	bl	80007a4 <__aeabi_ddiv>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <distancemeasurement+0x398>)
 80043de:	f7fc f8b7 	bl	8000550 <__aeabi_dmul>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <distancemeasurement+0x3c0>)
 80043f0:	f7fc f8ae 	bl	8000550 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
			* 5.08;
 80043fc:	a308      	add	r3, pc, #32	; (adr r3, 8004420 <distancemeasurement+0x388>)
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f7fc f8a5 	bl	8000550 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	f7fc fb39 	bl	8000a84 <__aeabi_d2f>
 8004412:	4603      	mov	r3, r0
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <distancemeasurement+0x3d8>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	f3af 8000 	nop.w
 8004420:	851eb852 	.word	0x851eb852
 8004424:	401451eb 	.word	0x401451eb
 8004428:	20000448 	.word	0x20000448
 800442c:	20000464 	.word	0x20000464
 8004430:	40240000 	.word	0x40240000
 8004434:	40500000 	.word	0x40500000
 8004438:	40100000 	.word	0x40100000
 800443c:	40340000 	.word	0x40340000
 8004440:	402e0000 	.word	0x402e0000
 8004444:	40200000 	.word	0x40200000
 8004448:	20000430 	.word	0x20000430
 800444c:	20000474 	.word	0x20000474
 8004450:	20000044 	.word	0x20000044
 8004454:	2000044c 	.word	0x2000044c
 8004458:	40280000 	.word	0x40280000
 800445c:	20000434 	.word	0x20000434
 8004460:	40000400 	.word	0x40000400
 8004464:	20000478 	.word	0x20000478
 8004468:	20000048 	.word	0x20000048
 800446c:	20000450 	.word	0x20000450
 8004470:	20000438 	.word	0x20000438
 8004474:	00000000 	.word	0x00000000

08004478 <velocitymeasurement>:
void velocitymeasurement() {
 8004478:	b580      	push	{r7, lr}
 800447a:	ed2d 8b02 	vpush	{d8}
 800447e:	af00      	add	r7, sp, #0
	Timestamp_Encoder = micros();
 8004480:	f7fe ff54 	bl	800332c <micros>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4989      	ldr	r1, [pc, #548]	; (80046b0 <velocitymeasurement+0x238>)
 800448a:	e9c1 2300 	strd	r2, r3, [r1]
	velocitypulse1 = ((99 * velocitypulse1 + EncoderVelocity_Update(1)) / 100);
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <velocitymeasurement+0x23c>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80046b8 <velocitymeasurement+0x240>
 8004498:	ee27 8a87 	vmul.f32	s16, s15, s14
 800449c:	2001      	movs	r0, #1
 800449e:	f7ff fc55 	bl	8003d4c <EncoderVelocity_Update>
 80044a2:	eef0 7a40 	vmov.f32	s15, s0
 80044a6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80044aa:	eddf 6a84 	vldr	s13, [pc, #528]	; 80046bc <velocitymeasurement+0x244>
 80044ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044b2:	4b80      	ldr	r3, [pc, #512]	; (80046b4 <velocitymeasurement+0x23c>)
 80044b4:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse2 = ((99 * velocitypulse2 + EncoderVelocity_Update(2)) / 100);
 80044b8:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <velocitymeasurement+0x248>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80046b8 <velocitymeasurement+0x240>
 80044c2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80044c6:	2002      	movs	r0, #2
 80044c8:	f7ff fc40 	bl	8003d4c <EncoderVelocity_Update>
 80044cc:	eef0 7a40 	vmov.f32	s15, s0
 80044d0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80044d4:	eddf 6a79 	vldr	s13, [pc, #484]	; 80046bc <velocitymeasurement+0x244>
 80044d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044dc:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <velocitymeasurement+0x248>)
 80044de:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse3 = ((9 * velocitypulse3 + EncoderVelocity_Update(3)) / 10);
 80044e2:	4b78      	ldr	r3, [pc, #480]	; (80046c4 <velocitymeasurement+0x24c>)
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80044ec:	ee27 8a87 	vmul.f32	s16, s15, s14
 80044f0:	2003      	movs	r0, #3
 80044f2:	f7ff fc2b 	bl	8003d4c <EncoderVelocity_Update>
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	ee38 7a27 	vadd.f32	s14, s16, s15
 80044fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <velocitymeasurement+0x24c>)
 8004508:	edc3 7a00 	vstr	s15, [r3]
	velocitymetre1 = velocitypulse1 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 800450c:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <velocitymeasurement+0x23c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fb ffc5 	bl	80004a0 <__aeabi_f2d>
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	4b6b      	ldr	r3, [pc, #428]	; (80046c8 <velocitymeasurement+0x250>)
 800451c:	f7fc f942 	bl	80007a4 <__aeabi_ddiv>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	4b67      	ldr	r3, [pc, #412]	; (80046cc <velocitymeasurement+0x254>)
 800452e:	f7fc f939 	bl	80007a4 <__aeabi_ddiv>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	4b64      	ldr	r3, [pc, #400]	; (80046d0 <velocitymeasurement+0x258>)
 8004540:	f7fc f930 	bl	80007a4 <__aeabi_ddiv>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	4b60      	ldr	r3, [pc, #384]	; (80046d4 <velocitymeasurement+0x25c>)
 8004552:	f7fc f927 	bl	80007a4 <__aeabi_ddiv>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <velocitymeasurement+0x260>)
 8004564:	f7fb fff4 	bl	8000550 <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <velocitymeasurement+0x264>)
 8004576:	f7fb ffeb 	bl	8000550 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	f7fc fa7f 	bl	8000a84 <__aeabi_d2f>
 8004586:	4603      	mov	r3, r0
 8004588:	4a55      	ldr	r2, [pc, #340]	; (80046e0 <velocitymeasurement+0x268>)
 800458a:	6013      	str	r3, [r2, #0]
	velocitymetre2 = velocitypulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 800458c:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <velocitymeasurement+0x248>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff85 	bl	80004a0 <__aeabi_f2d>
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <velocitymeasurement+0x250>)
 800459c:	f7fc f902 	bl	80007a4 <__aeabi_ddiv>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <velocitymeasurement+0x254>)
 80045ae:	f7fc f8f9 	bl	80007a4 <__aeabi_ddiv>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <velocitymeasurement+0x258>)
 80045c0:	f7fc f8f0 	bl	80007a4 <__aeabi_ddiv>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <velocitymeasurement+0x25c>)
 80045d2:	f7fc f8e7 	bl	80007a4 <__aeabi_ddiv>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <velocitymeasurement+0x260>)
 80045e4:	f7fb ffb4 	bl	8000550 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <velocitymeasurement+0x264>)
 80045f6:	f7fb ffab 	bl	8000550 <__aeabi_dmul>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	f7fc fa3f 	bl	8000a84 <__aeabi_d2f>
 8004606:	4603      	mov	r3, r0
 8004608:	4a36      	ldr	r2, [pc, #216]	; (80046e4 <velocitymeasurement+0x26c>)
 800460a:	6013      	str	r3, [r2, #0]
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <velocitymeasurement+0x24c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff45 	bl	80004a0 <__aeabi_f2d>
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <velocitymeasurement+0x250>)
 800461c:	f7fc f8c2 	bl	80007a4 <__aeabi_ddiv>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	4b27      	ldr	r3, [pc, #156]	; (80046cc <velocitymeasurement+0x254>)
 800462e:	f7fc f8b9 	bl	80007a4 <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <velocitymeasurement+0x258>)
 8004640:	f7fc f8b0 	bl	80007a4 <__aeabi_ddiv>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <velocitymeasurement+0x260>)
 8004652:	f7fc f8a7 	bl	80007a4 <__aeabi_ddiv>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <velocitymeasurement+0x270>)
 8004664:	f7fb ff74 	bl	8000550 <__aeabi_dmul>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <velocitymeasurement+0x250>)
 8004676:	f7fb ff6b 	bl	8000550 <__aeabi_dmul>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
			* 5.08;
 8004682:	a309      	add	r3, pc, #36	; (adr r3, 80046a8 <velocitymeasurement+0x230>)
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f7fb ff62 	bl	8000550 <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc f9f6 	bl	8000a84 <__aeabi_d2f>
 8004698:	4603      	mov	r3, r0
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <velocitymeasurement+0x274>)
 800469c:	6013      	str	r3, [r2, #0]
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	ecbd 8b02 	vpop	{d8}
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	851eb852 	.word	0x851eb852
 80046ac:	401451eb 	.word	0x401451eb
 80046b0:	200004d0 	.word	0x200004d0
 80046b4:	20000454 	.word	0x20000454
 80046b8:	42c60000 	.word	0x42c60000
 80046bc:	42c80000 	.word	0x42c80000
 80046c0:	20000458 	.word	0x20000458
 80046c4:	2000045c 	.word	0x2000045c
 80046c8:	40280000 	.word	0x40280000
 80046cc:	40500000 	.word	0x40500000
 80046d0:	40100000 	.word	0x40100000
 80046d4:	40340000 	.word	0x40340000
 80046d8:	402e0000 	.word	0x402e0000
 80046dc:	40200000 	.word	0x40200000
 80046e0:	2000043c 	.word	0x2000043c
 80046e4:	20000440 	.word	0x20000440
 80046e8:	40240000 	.word	0x40240000
 80046ec:	20000444 	.word	0x20000444

080046f0 <gotoposition>:
void gotoposition(int unit) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	if (unit == 1) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d15e      	bne.n	80047bc <gotoposition+0xcc>
		if (ptg1 - distancemetre1 <= 0.1 && ptg1 - distancemetre1 >= -0.3) {
 80046fe:	4b94      	ldr	r3, [pc, #592]	; (8004950 <gotoposition+0x260>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4b93      	ldr	r3, [pc, #588]	; (8004954 <gotoposition+0x264>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470e:	ee17 0a90 	vmov	r0, s15
 8004712:	f7fb fec5 	bl	80004a0 <__aeabi_f2d>
 8004716:	a38a      	add	r3, pc, #552	; (adr r3, 8004940 <gotoposition+0x250>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fc f994 	bl	8000a48 <__aeabi_dcmple>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01d      	beq.n	8004762 <gotoposition+0x72>
 8004726:	4b8a      	ldr	r3, [pc, #552]	; (8004950 <gotoposition+0x260>)
 8004728:	ed93 7a00 	vldr	s14, [r3]
 800472c:	4b89      	ldr	r3, [pc, #548]	; (8004954 <gotoposition+0x264>)
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004736:	ee17 0a90 	vmov	r0, s15
 800473a:	f7fb feb1 	bl	80004a0 <__aeabi_f2d>
 800473e:	a382      	add	r3, pc, #520	; (adr r3, 8004948 <gotoposition+0x258>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fc f98a 	bl	8000a5c <__aeabi_dcmpge>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <gotoposition+0x72>
			activate1 = 0;
 800474e:	4b82      	ldr	r3, [pc, #520]	; (8004958 <gotoposition+0x268>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
			in1 = 0;
 8004754:	4b81      	ldr	r3, [pc, #516]	; (800495c <gotoposition+0x26c>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
			in2 = 0;
 800475a:	4b81      	ldr	r3, [pc, #516]	; (8004960 <gotoposition+0x270>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e02c      	b.n	80047bc <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 >= 0) {
 8004762:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <gotoposition+0x260>)
 8004764:	ed93 7a00 	vldr	s14, [r3]
 8004768:	4b7a      	ldr	r3, [pc, #488]	; (8004954 <gotoposition+0x264>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	db09      	blt.n	8004790 <gotoposition+0xa0>
			in1 = 1;
 800477c:	4b77      	ldr	r3, [pc, #476]	; (800495c <gotoposition+0x26c>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
			in2 = 0;
 8004782:	4b77      	ldr	r3, [pc, #476]	; (8004960 <gotoposition+0x270>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
			require1 = 10;
 8004788:	4b76      	ldr	r3, [pc, #472]	; (8004964 <gotoposition+0x274>)
 800478a:	4a77      	ldr	r2, [pc, #476]	; (8004968 <gotoposition+0x278>)
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e015      	b.n	80047bc <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 <= 0) {
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <gotoposition+0x260>)
 8004792:	ed93 7a00 	vldr	s14, [r3]
 8004796:	4b6f      	ldr	r3, [pc, #444]	; (8004954 <gotoposition+0x264>)
 8004798:	edd3 7a00 	vldr	s15, [r3]
 800479c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	d808      	bhi.n	80047bc <gotoposition+0xcc>
			in1 = 0;
 80047aa:	4b6c      	ldr	r3, [pc, #432]	; (800495c <gotoposition+0x26c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
			in2 = 1;
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <gotoposition+0x270>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
			require1 = -10;
 80047b6:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <gotoposition+0x274>)
 80047b8:	4a6c      	ldr	r2, [pc, #432]	; (800496c <gotoposition+0x27c>)
 80047ba:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 2) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d15e      	bne.n	8004880 <gotoposition+0x190>
		if (ptg2 - distancemetre2 <= 0.1 && ptg2 - distancemetre2 >= -0.3) {
 80047c2:	4b6b      	ldr	r3, [pc, #428]	; (8004970 <gotoposition+0x280>)
 80047c4:	ed93 7a00 	vldr	s14, [r3]
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <gotoposition+0x284>)
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	ee17 0a90 	vmov	r0, s15
 80047d6:	f7fb fe63 	bl	80004a0 <__aeabi_f2d>
 80047da:	a359      	add	r3, pc, #356	; (adr r3, 8004940 <gotoposition+0x250>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fc f932 	bl	8000a48 <__aeabi_dcmple>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01d      	beq.n	8004826 <gotoposition+0x136>
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <gotoposition+0x280>)
 80047ec:	ed93 7a00 	vldr	s14, [r3]
 80047f0:	4b60      	ldr	r3, [pc, #384]	; (8004974 <gotoposition+0x284>)
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fa:	ee17 0a90 	vmov	r0, s15
 80047fe:	f7fb fe4f 	bl	80004a0 <__aeabi_f2d>
 8004802:	a351      	add	r3, pc, #324	; (adr r3, 8004948 <gotoposition+0x258>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fc f928 	bl	8000a5c <__aeabi_dcmpge>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <gotoposition+0x136>
			activate2 = 0;
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <gotoposition+0x288>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
			in3 = 0;
 8004818:	4b58      	ldr	r3, [pc, #352]	; (800497c <gotoposition+0x28c>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
			in4 = 0;
 800481e:	4b58      	ldr	r3, [pc, #352]	; (8004980 <gotoposition+0x290>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e02c      	b.n	8004880 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 >= 0) {
 8004826:	4b52      	ldr	r3, [pc, #328]	; (8004970 <gotoposition+0x280>)
 8004828:	ed93 7a00 	vldr	s14, [r3]
 800482c:	4b51      	ldr	r3, [pc, #324]	; (8004974 <gotoposition+0x284>)
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	db09      	blt.n	8004854 <gotoposition+0x164>
			in3 = 1;
 8004840:	4b4e      	ldr	r3, [pc, #312]	; (800497c <gotoposition+0x28c>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
			in4 = 0;
 8004846:	4b4e      	ldr	r3, [pc, #312]	; (8004980 <gotoposition+0x290>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
			require2 = 10;
 800484c:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <gotoposition+0x294>)
 800484e:	4a46      	ldr	r2, [pc, #280]	; (8004968 <gotoposition+0x278>)
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e015      	b.n	8004880 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 <= 0) {
 8004854:	4b46      	ldr	r3, [pc, #280]	; (8004970 <gotoposition+0x280>)
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	4b46      	ldr	r3, [pc, #280]	; (8004974 <gotoposition+0x284>)
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486c:	d808      	bhi.n	8004880 <gotoposition+0x190>
			in3 = 0;
 800486e:	4b43      	ldr	r3, [pc, #268]	; (800497c <gotoposition+0x28c>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
			in4 = 1;
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <gotoposition+0x290>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
			require2 = -10;
 800487a:	4b42      	ldr	r3, [pc, #264]	; (8004984 <gotoposition+0x294>)
 800487c:	4a3b      	ldr	r2, [pc, #236]	; (800496c <gotoposition+0x27c>)
 800487e:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 3) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d155      	bne.n	8004932 <gotoposition+0x242>
		if (ptg3 - distancemetre3 <= 1.5 && ptg3 - distancemetre3 >= -1.5) {
 8004886:	4b40      	ldr	r3, [pc, #256]	; (8004988 <gotoposition+0x298>)
 8004888:	ed93 7a00 	vldr	s14, [r3]
 800488c:	4b3f      	ldr	r3, [pc, #252]	; (800498c <gotoposition+0x29c>)
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004896:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800489a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	d818      	bhi.n	80048d6 <gotoposition+0x1e6>
 80048a4:	4b38      	ldr	r3, [pc, #224]	; (8004988 <gotoposition+0x298>)
 80048a6:	ed93 7a00 	vldr	s14, [r3]
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <gotoposition+0x29c>)
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048b4:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 80048b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	db09      	blt.n	80048d6 <gotoposition+0x1e6>
			activate3 = 0;
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <gotoposition+0x2a0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
			in5 = 0;
 80048c8:	4b32      	ldr	r3, [pc, #200]	; (8004994 <gotoposition+0x2a4>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
			in6 = 0;
 80048ce:	4b32      	ldr	r3, [pc, #200]	; (8004998 <gotoposition+0x2a8>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
			in5 = 0;
			in6 = 1;
			require3 = -40;
		}
	}
}
 80048d4:	e02d      	b.n	8004932 <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 >= 0) {
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <gotoposition+0x298>)
 80048d8:	ed93 7a00 	vldr	s14, [r3]
 80048dc:	4b2b      	ldr	r3, [pc, #172]	; (800498c <gotoposition+0x29c>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ee:	db09      	blt.n	8004904 <gotoposition+0x214>
			in5 = 1;
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <gotoposition+0x2a4>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
			in6 = 0;
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <gotoposition+0x2a8>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
			require3 = 40;
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <gotoposition+0x2ac>)
 80048fe:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <gotoposition+0x2b0>)
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	e016      	b.n	8004932 <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 <= 0) {
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <gotoposition+0x298>)
 8004906:	ed93 7a00 	vldr	s14, [r3]
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <gotoposition+0x29c>)
 800490c:	edd3 7a00 	vldr	s15, [r3]
 8004910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	d900      	bls.n	8004920 <gotoposition+0x230>
}
 800491e:	e008      	b.n	8004932 <gotoposition+0x242>
			in5 = 0;
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <gotoposition+0x2a4>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
			in6 = 1;
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <gotoposition+0x2a8>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
			require3 = -40;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <gotoposition+0x2ac>)
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <gotoposition+0x2b4>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w
 8004940:	9999999a 	.word	0x9999999a
 8004944:	3fb99999 	.word	0x3fb99999
 8004948:	33333333 	.word	0x33333333
 800494c:	bfd33333 	.word	0xbfd33333
 8004950:	200004c4 	.word	0x200004c4
 8004954:	20000430 	.word	0x20000430
 8004958:	200004b8 	.word	0x200004b8
 800495c:	200002e0 	.word	0x200002e0
 8004960:	200002e4 	.word	0x200002e4
 8004964:	200003e4 	.word	0x200003e4
 8004968:	41200000 	.word	0x41200000
 800496c:	c1200000 	.word	0xc1200000
 8004970:	200004c8 	.word	0x200004c8
 8004974:	20000434 	.word	0x20000434
 8004978:	200004bc 	.word	0x200004bc
 800497c:	200002ec 	.word	0x200002ec
 8004980:	200002f0 	.word	0x200002f0
 8004984:	200003fc 	.word	0x200003fc
 8004988:	200004cc 	.word	0x200004cc
 800498c:	20000438 	.word	0x20000438
 8004990:	200004c0 	.word	0x200004c0
 8004994:	200002f8 	.word	0x200002f8
 8004998:	200002fc 	.word	0x200002fc
 800499c:	20000414 	.word	0x20000414
 80049a0:	42200000 	.word	0x42200000
 80049a4:	c2200000 	.word	0xc2200000

080049a8 <setzero>:
void setzero() {
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
	if (zerostate == 1) {
 80049ac:	4b64      	ldr	r3, [pc, #400]	; (8004b40 <setzero+0x198>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 80bb 	bne.w	8004b2c <setzero+0x184>
		if (oldzerostate == 0 && zerostate == 1) {
 80049b6:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <setzero+0x19c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <setzero+0x42>
 80049be:	4b60      	ldr	r3, [pc, #384]	; (8004b40 <setzero+0x198>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d111      	bne.n	80049ea <setzero+0x42>
			distance1tozero = distancemetre1;
 80049c6:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <setzero+0x1a0>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d0:	ee17 2a90 	vmov	r2, s15
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <setzero+0x1a4>)
 80049d6:	601a      	str	r2, [r3, #0]
			distance3tozero = distancemetre3;
 80049d8:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <setzero+0x1a8>)
 80049da:	edd3 7a00 	vldr	s15, [r3]
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e2:	ee17 2a90 	vmov	r2, s15
 80049e6:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <setzero+0x1ac>)
 80049e8:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre3 - distance3tozero <= -300 || limitswitch3 == 1) {
 80049ea:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <setzero+0x1a8>)
 80049ec:	ed93 7a00 	vldr	s14, [r3]
 80049f0:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <setzero+0x1ac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a00:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004b58 <setzero+0x1b0>
 8004a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	d903      	bls.n	8004a16 <setzero+0x6e>
 8004a0e:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <setzero+0x1b4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d108      	bne.n	8004a28 <setzero+0x80>
			in1 = 0;
 8004a16:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <setzero+0x1b8>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
			in2 = 1;
 8004a1c:	4b51      	ldr	r3, [pc, #324]	; (8004b64 <setzero+0x1bc>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
			require1 = -10;
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <setzero+0x1c0>)
 8004a24:	4a51      	ldr	r2, [pc, #324]	; (8004b6c <setzero+0x1c4>)
 8004a26:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre1 - distance1tozero <= -100 || limitswitch1 == 1) {
 8004a28:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <setzero+0x1a0>)
 8004a2a:	ed93 7a00 	vldr	s14, [r3]
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <setzero+0x1a4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004b70 <setzero+0x1c8>
 8004a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d903      	bls.n	8004a54 <setzero+0xac>
 8004a4c:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <setzero+0x1cc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d108      	bne.n	8004a66 <setzero+0xbe>
			in3 = 0;
 8004a54:	4b48      	ldr	r3, [pc, #288]	; (8004b78 <setzero+0x1d0>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
			in4 = 1;
 8004a5a:	4b48      	ldr	r3, [pc, #288]	; (8004b7c <setzero+0x1d4>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
			require2 = -10;
 8004a60:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <setzero+0x1d8>)
 8004a62:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <setzero+0x1c4>)
 8004a64:	601a      	str	r2, [r3, #0]
		}
		in5 = 0;
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <setzero+0x1dc>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
		in6 = 1;
 8004a6c:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <setzero+0x1e0>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
		if (distancemetre3 <= 100){
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <setzero+0x1a8>)
 8004a74:	edd3 7a00 	vldr	s15, [r3]
 8004a78:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004b8c <setzero+0x1e4>
 8004a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d803      	bhi.n	8004a8e <setzero+0xe6>
			require3 = -20;
 8004a86:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <setzero+0x1e8>)
 8004a88:	4a42      	ldr	r2, [pc, #264]	; (8004b94 <setzero+0x1ec>)
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e002      	b.n	8004a94 <setzero+0xec>
		}
		else require3 = -40;
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <setzero+0x1e8>)
 8004a90:	4a41      	ldr	r2, [pc, #260]	; (8004b98 <setzero+0x1f0>)
 8004a92:	601a      	str	r2, [r3, #0]

		if (limitswitch1 == 1) {
 8004a94:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <setzero+0x1cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10d      	bne.n	8004ab8 <setzero+0x110>
			error1 = TIM1->CNT;
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <setzero+0x1f4>)
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <setzero+0x1f8>)
 8004aa4:	601a      	str	r2, [r3, #0]
			distancestamp1 = 0;
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <setzero+0x1fc>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
			olddistance1 = 0;
 8004aac:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <setzero+0x200>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
			activate1 = 0;
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <setzero+0x204>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch2 == 1) {
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <setzero+0x208>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10b      	bne.n	8004ad8 <setzero+0x130>
			error2 = TIM2->CNT;
 8004ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <setzero+0x20c>)
 8004aca:	601a      	str	r2, [r3, #0]
			distancestamp2 = 0;
 8004acc:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <setzero+0x210>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
			activate2 = 0;
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	; (8004bbc <setzero+0x214>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch3 == 1) {
 8004ad8:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <setzero+0x1b4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10a      	bne.n	8004af6 <setzero+0x14e>
			error3 = TIM3->CNT;
 8004ae0:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <setzero+0x218>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <setzero+0x21c>)
 8004ae8:	601a      	str	r2, [r3, #0]
			distancestamp3 = 0;
 8004aea:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <setzero+0x220>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
			activate3 = 0;
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <setzero+0x224>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch1 == 1 && limitswitch2 == 1 && limitswitch3 == 1) {
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <setzero+0x1cc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d116      	bne.n	8004b2c <setzero+0x184>
 8004afe:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <setzero+0x208>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d112      	bne.n	8004b2c <setzero+0x184>
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <setzero+0x1b4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <setzero+0x184>
			zerostate = 0;
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <setzero+0x198>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
			require1 = 0;
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <setzero+0x1c0>)
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
			require2 = 0;
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <setzero+0x1d8>)
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
			require3 = 0;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <setzero+0x1e8>)
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
		}
	}
	oldzerostate = zerostate;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <setzero+0x198>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <setzero+0x19c>)
 8004b32:	6013      	str	r3, [r2, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	200004b0 	.word	0x200004b0
 8004b44:	200004b4 	.word	0x200004b4
 8004b48:	20000430 	.word	0x20000430
 8004b4c:	20000468 	.word	0x20000468
 8004b50:	20000438 	.word	0x20000438
 8004b54:	2000046c 	.word	0x2000046c
 8004b58:	c3960000 	.word	0xc3960000
 8004b5c:	20000420 	.word	0x20000420
 8004b60:	200002e0 	.word	0x200002e0
 8004b64:	200002e4 	.word	0x200002e4
 8004b68:	200003e4 	.word	0x200003e4
 8004b6c:	c1200000 	.word	0xc1200000
 8004b70:	c2c80000 	.word	0xc2c80000
 8004b74:	20000418 	.word	0x20000418
 8004b78:	200002ec 	.word	0x200002ec
 8004b7c:	200002f0 	.word	0x200002f0
 8004b80:	200003fc 	.word	0x200003fc
 8004b84:	200002f8 	.word	0x200002f8
 8004b88:	200002fc 	.word	0x200002fc
 8004b8c:	42c80000 	.word	0x42c80000
 8004b90:	20000414 	.word	0x20000414
 8004b94:	c1a00000 	.word	0xc1a00000
 8004b98:	c2200000 	.word	0xc2200000
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	20000470 	.word	0x20000470
 8004ba4:	20000460 	.word	0x20000460
 8004ba8:	20000464 	.word	0x20000464
 8004bac:	200004b8 	.word	0x200004b8
 8004bb0:	2000041c 	.word	0x2000041c
 8004bb4:	20000474 	.word	0x20000474
 8004bb8:	20000044 	.word	0x20000044
 8004bbc:	200004bc 	.word	0x200004bc
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	20000478 	.word	0x20000478
 8004bc8:	20000048 	.word	0x20000048
 8004bcc:	200004c0 	.word	0x200004c0

08004bd0 <pwmdrive>:
void pwmdrive() {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, in1);
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <pwmdrive+0x8c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4820      	ldr	r0, [pc, #128]	; (8004c60 <pwmdrive+0x90>)
 8004be0:	f000 ff62 	bl	8005aa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, in2);
 8004be4:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <pwmdrive+0x94>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	2110      	movs	r1, #16
 8004bee:	481c      	ldr	r0, [pc, #112]	; (8004c60 <pwmdrive+0x90>)
 8004bf0:	f000 ff5a 	bl	8005aa8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm1);
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <pwmdrive+0x98>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <pwmdrive+0x9c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, in3);
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <pwmdrive+0xa0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	2120      	movs	r1, #32
 8004c08:	4815      	ldr	r0, [pc, #84]	; (8004c60 <pwmdrive+0x90>)
 8004c0a:	f000 ff4d 	bl	8005aa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, in4);
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <pwmdrive+0xa4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	2108      	movs	r1, #8
 8004c18:	4811      	ldr	r0, [pc, #68]	; (8004c60 <pwmdrive+0x90>)
 8004c1a:	f000 ff45 	bl	8005aa8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm2);
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <pwmdrive+0xa8>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <pwmdrive+0x9c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, in5);
 8004c28:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <pwmdrive+0xac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c34:	4812      	ldr	r0, [pc, #72]	; (8004c80 <pwmdrive+0xb0>)
 8004c36:	f000 ff37 	bl	8005aa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, in6);
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <pwmdrive+0xb4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c46:	480e      	ldr	r0, [pc, #56]	; (8004c80 <pwmdrive+0xb0>)
 8004c48:	f000 ff2e 	bl	8005aa8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm3);
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <pwmdrive+0xb8>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <pwmdrive+0x9c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	200002e0 	.word	0x200002e0
 8004c60:	40020400 	.word	0x40020400
 8004c64:	200002e4 	.word	0x200002e4
 8004c68:	200002e8 	.word	0x200002e8
 8004c6c:	200001b0 	.word	0x200001b0
 8004c70:	200002ec 	.word	0x200002ec
 8004c74:	200002f0 	.word	0x200002f0
 8004c78:	200002f4 	.word	0x200002f4
 8004c7c:	200002f8 	.word	0x200002f8
 8004c80:	40020800 	.word	0x40020800
 8004c84:	200002fc 	.word	0x200002fc
 8004c88:	20000300 	.word	0x20000300

08004c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c90:	b672      	cpsid	i
}
 8004c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004c94:	e7fe      	b.n	8004c94 <Error_Handler+0x8>
	...

08004c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	4a0f      	ldr	r2, [pc, #60]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cac:	6453      	str	r3, [r2, #68]	; 0x44
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <HAL_MspInit+0x4c>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004cd6:	2007      	movs	r0, #7
 8004cd8:	f000 fc68 	bl	80055ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800

08004ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_I2C_MspInit+0xc8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d14d      	bne.n	8004da6 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d2c:	2312      	movs	r3, #18
 8004d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d34:	2303      	movs	r3, #3
 8004d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d38:	2304      	movs	r3, #4
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	4619      	mov	r1, r3
 8004d42:	481d      	ldr	r0, [pc, #116]	; (8004db8 <HAL_I2C_MspInit+0xd0>)
 8004d44:	f000 fd14 	bl	8005770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d4e:	2312      	movs	r3, #18
 8004d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d56:	2303      	movs	r3, #3
 8004d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004d5a:	2309      	movs	r3, #9
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	4814      	ldr	r0, [pc, #80]	; (8004db8 <HAL_I2C_MspInit+0xd0>)
 8004d66:	f000 fd03 	bl	8005770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <HAL_I2C_MspInit+0xcc>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2021      	movs	r0, #33	; 0x21
 8004d8c:	f000 fc19 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004d90:	2021      	movs	r0, #33	; 0x21
 8004d92:	f000 fc32 	bl	80055fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	2022      	movs	r0, #34	; 0x22
 8004d9c:	f000 fc11 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004da0:	2022      	movs	r0, #34	; 0x22
 8004da2:	f000 fc2a 	bl	80055fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004da6:	bf00      	nop
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40005800 	.word	0x40005800
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020400 	.word	0x40020400

08004dbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a57      	ldr	r2, [pc, #348]	; (8004f38 <HAL_TIM_Encoder_MspInit+0x17c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d135      	bne.n	8004e4a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	4b56      	ldr	r3, [pc, #344]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4a55      	ldr	r2, [pc, #340]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6453      	str	r3, [r2, #68]	; 0x44
 8004dee:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4a4e      	ldr	r2, [pc, #312]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b4c      	ldr	r3, [pc, #304]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e24:	2300      	movs	r3, #0
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e30:	4619      	mov	r1, r3
 8004e32:	4843      	ldr	r0, [pc, #268]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x184>)
 8004e34:	f000 fc9c 	bl	8005770 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	201b      	movs	r0, #27
 8004e3e:	f000 fbc0 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004e42:	201b      	movs	r0, #27
 8004e44:	f000 fbd9 	bl	80055fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e48:	e072      	b.n	8004f30 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d134      	bne.n	8004ebe <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	4b38      	ldr	r3, [pc, #224]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	4a37      	ldr	r2, [pc, #220]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6413      	str	r3, [r2, #64]	; 0x40
 8004e64:	4b35      	ldr	r3, [pc, #212]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e90:	2302      	movs	r3, #2
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4826      	ldr	r0, [pc, #152]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x184>)
 8004ea8:	f000 fc62 	bl	8005770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	201c      	movs	r0, #28
 8004eb2:	f000 fb86 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004eb6:	201c      	movs	r0, #28
 8004eb8:	f000 fb9f 	bl	80055fa <HAL_NVIC_EnableIRQ>
}
 8004ebc:	e038      	b.n	8004f30 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM3)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_TIM_Encoder_MspInit+0x188>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d133      	bne.n	8004f30 <HAL_TIM_Encoder_MspInit+0x174>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004ed2:	f043 0302 	orr.w	r3, r3, #2
 8004ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_TIM_Encoder_MspInit+0x180>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f00:	23c0      	movs	r3, #192	; 0xc0
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f10:	2302      	movs	r3, #2
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4809      	ldr	r0, [pc, #36]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x184>)
 8004f1c:	f000 fc28 	bl	8005770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	201d      	movs	r0, #29
 8004f26:	f000 fb4c 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f2a:	201d      	movs	r0, #29
 8004f2c:	f000 fb65 	bl	80055fa <HAL_NVIC_EnableIRQ>
}
 8004f30:	bf00      	nop
 8004f32:	3738      	adds	r7, #56	; 0x38
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40020000 	.word	0x40020000
 8004f44:	40000400 	.word	0x40000400

08004f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_TIM_Base_MspInit+0x80>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d116      	bne.n	8004f88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	201e      	movs	r0, #30
 8004f7c:	f000 fb21 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f80:	201e      	movs	r0, #30
 8004f82:	f000 fb3a 	bl	80055fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004f86:	e01a      	b.n	8004fbe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <HAL_TIM_Base_MspInit+0x88>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d115      	bne.n	8004fbe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004f9c:	f043 0308 	orr.w	r3, r3, #8
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_TIM_Base_MspInit+0x84>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2032      	movs	r0, #50	; 0x32
 8004fb4:	f000 fb05 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004fb8:	2032      	movs	r0, #50	; 0x32
 8004fba:	f000 fb1e 	bl	80055fa <HAL_NVIC_EnableIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40000c00 	.word	0x40000c00

08004fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_TIM_MspPostInit+0x68>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d11e      	bne.n	8005034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_TIM_MspPostInit+0x6c>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a10      	ldr	r2, [pc, #64]	; (8005040 <HAL_TIM_MspPostInit+0x6c>)
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <HAL_TIM_MspPostInit+0x6c>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005012:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005018:	2302      	movs	r3, #2
 800501a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005024:	2302      	movs	r3, #2
 8005026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	4619      	mov	r1, r3
 800502e:	4805      	ldr	r0, [pc, #20]	; (8005044 <HAL_TIM_MspPostInit+0x70>)
 8005030:	f000 fb9e 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005034:	bf00      	nop
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40000800 	.word	0x40000800
 8005040:	40023800 	.word	0x40023800
 8005044:	40020400 	.word	0x40020400

08005048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005050:	f107 031c 	add.w	r3, r7, #28
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a37      	ldr	r2, [pc, #220]	; (8005144 <HAL_UART_MspInit+0xfc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d135      	bne.n	80050d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	4a35      	ldr	r2, [pc, #212]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005074:	f043 0310 	orr.w	r3, r3, #16
 8005078:	6453      	str	r3, [r2, #68]	; 0x44
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <HAL_UART_MspInit+0x100>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <HAL_UART_MspInit+0x100>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a2e      	ldr	r2, [pc, #184]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80050a2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80050a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	2302      	movs	r3, #2
 80050aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050b4:	2307      	movs	r3, #7
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b8:	f107 031c 	add.w	r3, r7, #28
 80050bc:	4619      	mov	r1, r3
 80050be:	4823      	ldr	r0, [pc, #140]	; (800514c <HAL_UART_MspInit+0x104>)
 80050c0:	f000 fb56 	bl	8005770 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	2100      	movs	r1, #0
 80050c8:	2025      	movs	r0, #37	; 0x25
 80050ca:	f000 fa7a 	bl	80055c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050ce:	2025      	movs	r0, #37	; 0x25
 80050d0:	f000 fa93 	bl	80055fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80050d4:	e031      	b.n	800513a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_UART_MspInit+0x108>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d12c      	bne.n	800513a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_UART_MspInit+0x100>)
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <HAL_UART_MspInit+0x100>)
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6453      	str	r3, [r2, #68]	; 0x44
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_UART_MspInit+0x100>)
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_UART_MspInit+0x100>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6313      	str	r3, [r2, #48]	; 0x30
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_UART_MspInit+0x100>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005118:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800511c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	2303      	movs	r3, #3
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800512a:	2308      	movs	r3, #8
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 031c 	add.w	r3, r7, #28
 8005132:	4619      	mov	r1, r3
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <HAL_UART_MspInit+0x104>)
 8005136:	f000 fb1b 	bl	8005770 <HAL_GPIO_Init>
}
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40011000 	.word	0x40011000
 8005148:	40023800 	.word	0x40023800
 800514c:	40020000 	.word	0x40020000
 8005150:	40011400 	.word	0x40011400

08005154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005158:	e7fe      	b.n	8005158 <NMI_Handler+0x4>

0800515a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800515e:	e7fe      	b.n	800515e <HardFault_Handler+0x4>

08005160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005164:	e7fe      	b.n	8005164 <MemManage_Handler+0x4>

08005166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800516a:	e7fe      	b.n	800516a <BusFault_Handler+0x4>

0800516c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005170:	e7fe      	b.n	8005170 <UsageFault_Handler+0x4>

08005172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051a0:	f000 f8f0 	bl	8005384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051a4:	bf00      	nop
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80051ac:	2040      	movs	r0, #64	; 0x40
 80051ae:	f000 fc95 	bl	8005adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051bc:	4802      	ldr	r0, [pc, #8]	; (80051c8 <TIM1_CC_IRQHandler+0x10>)
 80051be:	f004 f893 	bl	80092e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200000d8 	.word	0x200000d8

080051cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051d0:	4802      	ldr	r0, [pc, #8]	; (80051dc <TIM2_IRQHandler+0x10>)
 80051d2:	f004 f889 	bl	80092e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000120 	.word	0x20000120

080051e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80051e4:	4802      	ldr	r0, [pc, #8]	; (80051f0 <TIM3_IRQHandler+0x10>)
 80051e6:	f004 f87f 	bl	80092e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000168 	.word	0x20000168

080051f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80051f8:	4802      	ldr	r0, [pc, #8]	; (8005204 <TIM4_IRQHandler+0x10>)
 80051fa:	f004 f875 	bl	80092e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200001b0 	.word	0x200001b0

08005208 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <I2C2_EV_IRQHandler+0x10>)
 800520e:	f001 f8e5 	bl	80063dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000084 	.word	0x20000084

0800521c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005220:	4802      	ldr	r0, [pc, #8]	; (800522c <I2C2_ER_IRQHandler+0x10>)
 8005222:	f001 fa4c 	bl	80066be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000084 	.word	0x20000084

08005230 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005234:	4802      	ldr	r0, [pc, #8]	; (8005240 <USART1_IRQHandler+0x10>)
 8005236:	f004 ff6f 	bl	800a118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000240 	.word	0x20000240

08005244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800524c:	f000 fc46 	bl	8005adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}

08005254 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <TIM5_IRQHandler+0x10>)
 800525a:	f004 f845 	bl	80092e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200001f8 	.word	0x200001f8

08005268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)


	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <SystemInit+0x20>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	4a05      	ldr	r2, [pc, #20]	; (8005288 <SystemInit+0x20>)
 8005274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800528c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005290:	480d      	ldr	r0, [pc, #52]	; (80052c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005292:	490e      	ldr	r1, [pc, #56]	; (80052cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005294:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005298:	e002      	b.n	80052a0 <LoopCopyDataInit>

0800529a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800529a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800529c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800529e:	3304      	adds	r3, #4

080052a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a4:	d3f9      	bcc.n	800529a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052a8:	4c0b      	ldr	r4, [pc, #44]	; (80052d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ac:	e001      	b.n	80052b2 <LoopFillZerobss>

080052ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b0:	3204      	adds	r2, #4

080052b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b4:	d3fb      	bcc.n	80052ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052b6:	f7ff ffd7 	bl	8005268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ba:	f005 fe91 	bl	800afe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052be:	f7fc f80b 	bl	80012d8 <main>
  bx  lr    
 80052c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80052c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80052d0:	0800b078 	.word	0x0800b078
  ldr r2, =_sbss
 80052d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80052d8:	200005e0 	.word	0x200005e0

080052dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052dc:	e7fe      	b.n	80052dc <ADC_IRQHandler>
	...

080052e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <HAL_Init+0x40>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <HAL_Init+0x40>)
 80052ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_Init+0x40>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <HAL_Init+0x40>)
 80052f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_Init+0x40>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a07      	ldr	r2, [pc, #28]	; (8005320 <HAL_Init+0x40>)
 8005302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005308:	2003      	movs	r0, #3
 800530a:	f000 f94f 	bl	80055ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800530e:	2000      	movs	r0, #0
 8005310:	f000 f808 	bl	8005324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005314:	f7ff fcc0 	bl	8004c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40023c00 	.word	0x40023c00

08005324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_InitTick+0x54>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <HAL_InitTick+0x58>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800533a:	fbb3 f3f1 	udiv	r3, r3, r1
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f967 	bl	8005616 <HAL_SYSTICK_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e00e      	b.n	8005370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b0f      	cmp	r3, #15
 8005356:	d80a      	bhi.n	800536e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005358:	2200      	movs	r2, #0
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	f000 f92f 	bl	80055c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005364:	4a06      	ldr	r2, [pc, #24]	; (8005380 <HAL_InitTick+0x5c>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e000      	b.n	8005370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000050 	.word	0x20000050
 800537c:	20000058 	.word	0x20000058
 8005380:	20000054 	.word	0x20000054

08005384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_IncTick+0x20>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_IncTick+0x24>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4413      	add	r3, r2
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <HAL_IncTick+0x24>)
 8005396:	6013      	str	r3, [r2, #0]
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000058 	.word	0x20000058
 80053a8:	200005dc 	.word	0x200005dc

080053ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return uwTick;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_GetTick+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200005dc 	.word	0x200005dc

080053c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053cc:	f7ff ffee 	bl	80053ac <HAL_GetTick>
 80053d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d005      	beq.n	80053ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <HAL_Delay+0x44>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053ea:	bf00      	nop
 80053ec:	f7ff ffde 	bl	80053ac <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d8f7      	bhi.n	80053ec <HAL_Delay+0x28>
  {
  }
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000058 	.word	0x20000058

0800540c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <__NVIC_SetPriorityGrouping+0x44>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005428:	4013      	ands	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800543e:	4a04      	ldr	r2, [pc, #16]	; (8005450 <__NVIC_SetPriorityGrouping+0x44>)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	60d3      	str	r3, [r2, #12]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000ed00 	.word	0xe000ed00

08005454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <__NVIC_GetPriorityGrouping+0x18>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 0307 	and.w	r3, r3, #7
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db0b      	blt.n	800549a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	f003 021f 	and.w	r2, r3, #31
 8005488:	4907      	ldr	r1, [pc, #28]	; (80054a8 <__NVIC_EnableIRQ+0x38>)
 800548a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2001      	movs	r0, #1
 8005492:	fa00 f202 	lsl.w	r2, r0, r2
 8005496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	e000e100 	.word	0xe000e100

080054ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	db0a      	blt.n	80054d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	490c      	ldr	r1, [pc, #48]	; (80054f8 <__NVIC_SetPriority+0x4c>)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	0112      	lsls	r2, r2, #4
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	440b      	add	r3, r1
 80054d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054d4:	e00a      	b.n	80054ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4908      	ldr	r1, [pc, #32]	; (80054fc <__NVIC_SetPriority+0x50>)
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	3b04      	subs	r3, #4
 80054e4:	0112      	lsls	r2, r2, #4
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	440b      	add	r3, r1
 80054ea:	761a      	strb	r2, [r3, #24]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	e000e100 	.word	0xe000e100
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f1c3 0307 	rsb	r3, r3, #7
 800551a:	2b04      	cmp	r3, #4
 800551c:	bf28      	it	cs
 800551e:	2304      	movcs	r3, #4
 8005520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3304      	adds	r3, #4
 8005526:	2b06      	cmp	r3, #6
 8005528:	d902      	bls.n	8005530 <NVIC_EncodePriority+0x30>
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3b03      	subs	r3, #3
 800552e:	e000      	b.n	8005532 <NVIC_EncodePriority+0x32>
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	401a      	ands	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005548:	f04f 31ff 	mov.w	r1, #4294967295
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	43d9      	mvns	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	4313      	orrs	r3, r2
         );
}
 800555a:	4618      	mov	r0, r3
 800555c:	3724      	adds	r7, #36	; 0x24
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3b01      	subs	r3, #1
 8005574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005578:	d301      	bcc.n	800557e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800557a:	2301      	movs	r3, #1
 800557c:	e00f      	b.n	800559e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <SysTick_Config+0x40>)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3b01      	subs	r3, #1
 8005584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005586:	210f      	movs	r1, #15
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	f7ff ff8e 	bl	80054ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <SysTick_Config+0x40>)
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005596:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <SysTick_Config+0x40>)
 8005598:	2207      	movs	r2, #7
 800559a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	e000e010 	.word	0xe000e010

080055ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff29 	bl	800540c <__NVIC_SetPriorityGrouping>
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	4603      	mov	r3, r0
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055d4:	f7ff ff3e 	bl	8005454 <__NVIC_GetPriorityGrouping>
 80055d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	6978      	ldr	r0, [r7, #20]
 80055e0:	f7ff ff8e 	bl	8005500 <NVIC_EncodePriority>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ff5d 	bl	80054ac <__NVIC_SetPriority>
}
 80055f2:	bf00      	nop
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	4603      	mov	r3, r0
 8005602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff31 	bl	8005470 <__NVIC_EnableIRQ>
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ffa2 	bl	8005568 <SysTick_Config>
 8005624:	4603      	mov	r3, r0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800563c:	f7ff feb6 	bl	80053ac <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d008      	beq.n	8005660 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e052      	b.n	8005706 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0216 	bic.w	r2, r2, #22
 800566e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800567e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <HAL_DMA_Abort+0x62>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0208 	bic.w	r2, r2, #8
 800569e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056b0:	e013      	b.n	80056da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056b2:	f7ff fe7b 	bl	80053ac <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d90c      	bls.n	80056da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e015      	b.n	8005706 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e4      	bne.n	80056b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	223f      	movs	r2, #63	; 0x3f
 80056ee:	409a      	lsls	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d004      	beq.n	800572c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2280      	movs	r2, #128	; 0x80
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e00c      	b.n	8005746 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2205      	movs	r2, #5
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005760:	b2db      	uxtb	r3, r3
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e159      	b.n	8005a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800578c:	2201      	movs	r2, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4013      	ands	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f040 8148 	bne.w	8005a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d005      	beq.n	80057c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d130      	bne.n	8005824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057f8:	2201      	movs	r2, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 0201 	and.w	r2, r3, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b03      	cmp	r3, #3
 800582e:	d017      	beq.n	8005860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d123      	bne.n	80058b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	08da      	lsrs	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3208      	adds	r2, #8
 8005874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	220f      	movs	r2, #15
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	69b9      	ldr	r1, [r7, #24]
 80058b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2203      	movs	r2, #3
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a2 	beq.w	8005a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_GPIO_Init+0x2e8>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	4a56      	ldr	r2, [pc, #344]	; (8005a58 <HAL_GPIO_Init+0x2e8>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005904:	6453      	str	r3, [r2, #68]	; 0x44
 8005906:	4b54      	ldr	r3, [pc, #336]	; (8005a58 <HAL_GPIO_Init+0x2e8>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005912:	4a52      	ldr	r2, [pc, #328]	; (8005a5c <HAL_GPIO_Init+0x2ec>)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	3302      	adds	r3, #2
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	220f      	movs	r2, #15
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a49      	ldr	r2, [pc, #292]	; (8005a60 <HAL_GPIO_Init+0x2f0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_Init+0x202>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a48      	ldr	r2, [pc, #288]	; (8005a64 <HAL_GPIO_Init+0x2f4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_Init+0x1fe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a47      	ldr	r2, [pc, #284]	; (8005a68 <HAL_GPIO_Init+0x2f8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_Init+0x1fa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a46      	ldr	r2, [pc, #280]	; (8005a6c <HAL_GPIO_Init+0x2fc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_Init+0x1f6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a45      	ldr	r2, [pc, #276]	; (8005a70 <HAL_GPIO_Init+0x300>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_Init+0x1f2>
 800595e:	2304      	movs	r3, #4
 8005960:	e008      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005962:	2307      	movs	r3, #7
 8005964:	e006      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_Init+0x204>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_Init+0x204>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_Init+0x204>
 8005972:	2300      	movs	r3, #0
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005984:	4935      	ldr	r1, [pc, #212]	; (8005a5c <HAL_GPIO_Init+0x2ec>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	3302      	adds	r3, #2
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005992:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <HAL_GPIO_Init+0x304>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059b6:	4a2f      	ldr	r2, [pc, #188]	; (8005a74 <HAL_GPIO_Init+0x304>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <HAL_GPIO_Init+0x304>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <HAL_GPIO_Init+0x304>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <HAL_GPIO_Init+0x304>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	; (8005a74 <HAL_GPIO_Init+0x304>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a10:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <HAL_GPIO_Init+0x304>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a34:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <HAL_GPIO_Init+0x304>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	f67f aea2 	bls.w	800578c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40013c00 	.word	0x40013c00

08005a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e001      	b.n	8005a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	807b      	strh	r3, [r7, #2]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ab8:	787b      	ldrb	r3, [r7, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005abe:	887a      	ldrh	r2, [r7, #2]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ac4:	e003      	b.n	8005ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	041a      	lsls	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	619a      	str	r2, [r3, #24]
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fc ff70 	bl	80029e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40013c00 	.word	0x40013c00

08005b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e12b      	b.n	8005d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff f8d8 	bl	8004ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2224      	movs	r2, #36	; 0x24
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b70:	f003 f8a2 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4a81      	ldr	r2, [pc, #516]	; (8005d80 <HAL_I2C_Init+0x274>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d807      	bhi.n	8005b90 <HAL_I2C_Init+0x84>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a80      	ldr	r2, [pc, #512]	; (8005d84 <HAL_I2C_Init+0x278>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bf94      	ite	ls
 8005b88:	2301      	movls	r3, #1
 8005b8a:	2300      	movhi	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e006      	b.n	8005b9e <HAL_I2C_Init+0x92>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a7d      	ldr	r2, [pc, #500]	; (8005d88 <HAL_I2C_Init+0x27c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	bf94      	ite	ls
 8005b98:	2301      	movls	r3, #1
 8005b9a:	2300      	movhi	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e0e7      	b.n	8005d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a78      	ldr	r2, [pc, #480]	; (8005d8c <HAL_I2C_Init+0x280>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0c9b      	lsrs	r3, r3, #18
 8005bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a6a      	ldr	r2, [pc, #424]	; (8005d80 <HAL_I2C_Init+0x274>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d802      	bhi.n	8005be0 <HAL_I2C_Init+0xd4>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	e009      	b.n	8005bf4 <HAL_I2C_Init+0xe8>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	4a69      	ldr	r2, [pc, #420]	; (8005d90 <HAL_I2C_Init+0x284>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	495c      	ldr	r1, [pc, #368]	; (8005d80 <HAL_I2C_Init+0x274>)
 8005c10:	428b      	cmp	r3, r1
 8005c12:	d819      	bhi.n	8005c48 <HAL_I2C_Init+0x13c>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1e59      	subs	r1, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c28:	400b      	ands	r3, r1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_I2C_Init+0x138>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1e59      	subs	r1, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c42:	e051      	b.n	8005ce8 <HAL_I2C_Init+0x1dc>
 8005c44:	2304      	movs	r3, #4
 8005c46:	e04f      	b.n	8005ce8 <HAL_I2C_Init+0x1dc>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_I2C_Init+0x168>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1e58      	subs	r0, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	440b      	add	r3, r1
 8005c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e012      	b.n	8005c9a <HAL_I2C_Init+0x18e>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e58      	subs	r0, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	0099      	lsls	r1, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Init+0x196>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e022      	b.n	8005ce8 <HAL_I2C_Init+0x1dc>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_I2C_Init+0x1bc>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1e58      	subs	r0, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	440b      	add	r3, r1
 8005cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc6:	e00f      	b.n	8005ce8 <HAL_I2C_Init+0x1dc>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1e58      	subs	r0, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	0099      	lsls	r1, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6809      	ldr	r1, [r1, #0]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6911      	ldr	r1, [r2, #16]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68d2      	ldr	r2, [r2, #12]
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	000186a0 	.word	0x000186a0
 8005d84:	001e847f 	.word	0x001e847f
 8005d88:	003d08ff 	.word	0x003d08ff
 8005d8c:	431bde83 	.word	0x431bde83
 8005d90:	10624dd3 	.word	0x10624dd3

08005d94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	460b      	mov	r3, r1
 8005da2:	817b      	strh	r3, [r7, #10]
 8005da4:	4613      	mov	r3, r2
 8005da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005da8:	f7ff fb00 	bl	80053ac <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	f040 80e0 	bne.w	8005f7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2319      	movs	r3, #25
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4970      	ldr	r1, [pc, #448]	; (8005f88 <HAL_I2C_Master_Transmit+0x1f4>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f002 f8dc 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e0d3      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_I2C_Master_Transmit+0x50>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e0cc      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d007      	beq.n	8005e0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2210      	movs	r2, #16
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	893a      	ldrh	r2, [r7, #8]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a50      	ldr	r2, [pc, #320]	; (8005f8c <HAL_I2C_Master_Transmit+0x1f8>)
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 fe9e 	bl	8007b94 <I2C_MasterRequestWrite>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e08d      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e78:	e066      	b.n	8005f48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6a39      	ldr	r1, [r7, #32]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f002 f956 	bl	8008130 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d107      	bne.n	8005ea2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e06b      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d11b      	bne.n	8005f1c <HAL_I2C_Master_Transmit+0x188>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	6a39      	ldr	r1, [r7, #32]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f002 f946 	bl	80081b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d107      	bne.n	8005f44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01a      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d194      	bne.n	8005e7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	00100002 	.word	0x00100002
 8005f8c:	ffff0000 	.word	0xffff0000

08005f90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	817b      	strh	r3, [r7, #10]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fa4:	f7ff fa02 	bl	80053ac <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 820b 	bne.w	80063ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2319      	movs	r3, #25
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	497c      	ldr	r1, [pc, #496]	; (80061b4 <HAL_I2C_Master_Receive+0x224>)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f001 ffde 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e1fe      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_I2C_Master_Receive+0x50>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e1f7      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d007      	beq.n	8006006 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2222      	movs	r2, #34	; 0x22
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2210      	movs	r2, #16
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	893a      	ldrh	r2, [r7, #8]
 8006036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a5c      	ldr	r2, [pc, #368]	; (80061b8 <HAL_I2C_Master_Receive+0x228>)
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006048:	8979      	ldrh	r1, [r7, #10]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 fe22 	bl	8007c98 <I2C_MasterRequestRead>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e1b8      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d113      	bne.n	800608e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	2300      	movs	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e18c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11b      	bne.n	80060ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e16c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d11b      	bne.n	800610e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	e14c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800611c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006134:	e138      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	2b03      	cmp	r3, #3
 800613c:	f200 80f1 	bhi.w	8006322 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	2b01      	cmp	r3, #1
 8006146:	d123      	bne.n	8006190 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f002 f8a3 	bl	8008298 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e139      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800618e:	e10b      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	2b02      	cmp	r3, #2
 8006196:	d14e      	bne.n	8006236 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2200      	movs	r2, #0
 80061a0:	4906      	ldr	r1, [pc, #24]	; (80061bc <HAL_I2C_Master_Receive+0x22c>)
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 feee 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e10e      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
 80061b2:	bf00      	nop
 80061b4:	00100002 	.word	0x00100002
 80061b8:	ffff0000 	.word	0xffff0000
 80061bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006234:	e0b8      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	4966      	ldr	r1, [pc, #408]	; (80063d8 <HAL_I2C_Master_Receive+0x448>)
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 fe9f 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0bf      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2200      	movs	r2, #0
 800629a:	494f      	ldr	r1, [pc, #316]	; (80063d8 <HAL_I2C_Master_Receive+0x448>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f001 fe71 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e091      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006320:	e042      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f001 ffb6 	bl	8008298 <I2C_WaitOnRXNEFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e04c      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d118      	bne.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f aec2 	bne.w	8006136 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	00010004 	.word	0x00010004

080063dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b10      	cmp	r3, #16
 800640a:	d003      	beq.n	8006414 <HAL_I2C_EV_IRQHandler+0x38>
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	f040 80c1 	bne.w	8006596 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <HAL_I2C_EV_IRQHandler+0x6e>
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006434:	d003      	beq.n	800643e <HAL_I2C_EV_IRQHandler+0x62>
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800643c:	d101      	bne.n	8006442 <HAL_I2C_EV_IRQHandler+0x66>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_I2C_EV_IRQHandler+0x68>
 8006442:	2300      	movs	r3, #0
 8006444:	2b01      	cmp	r3, #1
 8006446:	f000 8132 	beq.w	80066ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00c      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0x92>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	0a5b      	lsrs	r3, r3, #9
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 ff9e 	bl	80083a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fd79 	bl	8006f5e <I2C_Master_SB>
 800646c:	e092      	b.n	8006594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	08db      	lsrs	r3, r3, #3
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_I2C_EV_IRQHandler+0xb2>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	0a5b      	lsrs	r3, r3, #9
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fdef 	bl	800706a <I2C_Master_ADD10>
 800648c:	e082      	b.n	8006594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_I2C_EV_IRQHandler+0xd2>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	0a5b      	lsrs	r3, r3, #9
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fe09 	bl	80070be <I2C_Master_ADDR>
 80064ac:	e072      	b.n	8006594 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d03b      	beq.n	8006532 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	f000 80f3 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	09db      	lsrs	r3, r3, #7
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00f      	beq.n	80064f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9f3 	bl	80068dc <I2C_MasterTransmit_TXE>
 80064f6:	e04d      	b.n	8006594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80d6 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	0a5b      	lsrs	r3, r3, #9
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80cf 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b21      	cmp	r3, #33	; 0x21
 8006518:	d103      	bne.n	8006522 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa7a 	bl	8006a14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006520:	e0c7      	b.n	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b40      	cmp	r3, #64	; 0x40
 8006526:	f040 80c4 	bne.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fae8 	bl	8006b00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006530:	e0bf      	b.n	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	f000 80b7 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <HAL_I2C_EV_IRQHandler+0x194>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	0a9b      	lsrs	r3, r3, #10
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <HAL_I2C_EV_IRQHandler+0x194>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb5d 	bl	8006c28 <I2C_MasterReceive_RXNE>
 800656e:	e011      	b.n	8006594 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 809a 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8093 	beq.w	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fbfc 	bl	8006d8a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006592:	e08e      	b.n	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006594:	e08d      	b.n	80066b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e007      	b.n	80065b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d012      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x20e>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	0a5b      	lsrs	r3, r3, #9
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00c      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ffba 	bl	800755c <I2C_Slave_ADDR>
 80065e8:	e066      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_I2C_EV_IRQHandler+0x22e>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	0a5b      	lsrs	r3, r3, #9
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fff4 	bl	80075f0 <I2C_Slave_STOPF>
 8006608:	e056      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	2b21      	cmp	r3, #33	; 0x21
 800660e:	d002      	beq.n	8006616 <HAL_I2C_EV_IRQHandler+0x23a>
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	2b29      	cmp	r3, #41	; 0x29
 8006614:	d125      	bne.n	8006662 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <HAL_I2C_EV_IRQHandler+0x266>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	0a9b      	lsrs	r3, r3, #10
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <HAL_I2C_EV_IRQHandler+0x266>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fed0 	bl	80073e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006640:	e039      	b.n	80066b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d033      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	0a5b      	lsrs	r3, r3, #9
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02d      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fefd 	bl	800745a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006660:	e029      	b.n	80066b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	099b      	lsrs	r3, r3, #6
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00f      	beq.n	800668e <HAL_I2C_EV_IRQHandler+0x2b2>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	0a9b      	lsrs	r3, r3, #10
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_I2C_EV_IRQHandler+0x2b2>
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	089b      	lsrs	r3, r3, #2
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 ff08 	bl	800749c <I2C_SlaveReceive_RXNE>
 800668c:	e014      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	0a5b      	lsrs	r3, r3, #9
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 ff36 	bl	8007518 <I2C_SlaveReceive_BTF>
 80066ac:	e004      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	; 0x28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <HAL_I2C_ER_IRQHandler+0x4e>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800670a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	0a5b      	lsrs	r3, r3, #9
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_I2C_ER_IRQHandler+0x78>
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006734:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	0a9b      	lsrs	r3, r3, #10
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d03f      	beq.n	80067c2 <HAL_I2C_ER_IRQHandler+0x104>
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d039      	beq.n	80067c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800674e:	7efb      	ldrb	r3, [r7, #27]
 8006750:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006768:	7ebb      	ldrb	r3, [r7, #26]
 800676a:	2b20      	cmp	r3, #32
 800676c:	d112      	bne.n	8006794 <HAL_I2C_ER_IRQHandler+0xd6>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10f      	bne.n	8006794 <HAL_I2C_ER_IRQHandler+0xd6>
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b21      	cmp	r3, #33	; 0x21
 8006778:	d008      	beq.n	800678c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800677a:	7cfb      	ldrb	r3, [r7, #19]
 800677c:	2b29      	cmp	r3, #41	; 0x29
 800677e:	d005      	beq.n	800678c <HAL_I2C_ER_IRQHandler+0xce>
 8006780:	7cfb      	ldrb	r3, [r7, #19]
 8006782:	2b28      	cmp	r3, #40	; 0x28
 8006784:	d106      	bne.n	8006794 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b21      	cmp	r3, #33	; 0x21
 800678a:	d103      	bne.n	8006794 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 f85f 	bl	8007850 <I2C_Slave_AF>
 8006792:	e016      	b.n	80067c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800679c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	f043 0304 	orr.w	r3, r3, #4
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80067a6:	7efb      	ldrb	r3, [r7, #27]
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d002      	beq.n	80067b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80067ac:	7efb      	ldrb	r3, [r7, #27]
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d107      	bne.n	80067c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	0adb      	lsrs	r3, r3, #11
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <HAL_I2C_ER_IRQHandler+0x12e>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	f043 0308 	orr.w	r3, r3, #8
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80067ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f896 	bl	8007930 <I2C_ITError>
  }
}
 8006804:	bf00      	nop
 8006806:	3728      	adds	r7, #40	; 0x28
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
 8006868:	4613      	mov	r3, r2
 800686a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d150      	bne.n	80069a4 <I2C_MasterTransmit_TXE+0xc8>
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b21      	cmp	r3, #33	; 0x21
 8006906:	d14d      	bne.n	80069a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b08      	cmp	r3, #8
 800690c:	d01d      	beq.n	800694a <I2C_MasterTransmit_TXE+0x6e>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b20      	cmp	r3, #32
 8006912:	d01a      	beq.n	800694a <I2C_MasterTransmit_TXE+0x6e>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800691a:	d016      	beq.n	800694a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800692a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2211      	movs	r2, #17
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ff62 	bl	800680c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006948:	e060      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006958:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006968:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d107      	bne.n	8006994 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff7d 	bl	800688c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006992:	e03b      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff35 	bl	800680c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069a2:	e033      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b21      	cmp	r3, #33	; 0x21
 80069a8:	d005      	beq.n	80069b6 <I2C_MasterTransmit_TXE+0xda>
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	2b40      	cmp	r3, #64	; 0x40
 80069ae:	d12d      	bne.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b22      	cmp	r3, #34	; 0x22
 80069b4:	d12a      	bne.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069d0:	e01c      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d103      	bne.n	80069e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f88e 	bl	8006b00 <I2C_MemoryTransmit_TXE_BTF>
}
 80069e4:	e012      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a0a:	e7ff      	b.n	8006a0c <I2C_MasterTransmit_TXE+0x130>
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b21      	cmp	r3, #33	; 0x21
 8006a2c:	d164      	bne.n	8006af8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d012      	beq.n	8006a5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006a5c:	e04c      	b.n	8006af8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d01d      	beq.n	8006aa0 <I2C_MasterTransmit_BTF+0x8c>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d01a      	beq.n	8006aa0 <I2C_MasterTransmit_BTF+0x8c>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a70:	d016      	beq.n	8006aa0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2211      	movs	r2, #17
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff feb7 	bl	800680c <HAL_I2C_MasterTxCpltCallback>
}
 8006a9e:	e02b      	b.n	8006af8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d107      	bne.n	8006aea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fed2 	bl	800688c <HAL_I2C_MemTxCpltCallback>
}
 8006ae8:	e006      	b.n	8006af8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fe8a 	bl	800680c <HAL_I2C_MasterTxCpltCallback>
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11d      	bne.n	8006b54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10b      	bne.n	8006b38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006b36:	e073      	b.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	121b      	asrs	r3, r3, #8
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b52:	e065      	b.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10b      	bne.n	8006b74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b72:	e055      	b.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d151      	bne.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b22      	cmp	r3, #34	; 0x22
 8006b80:	d10d      	bne.n	8006b9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b9c:	e040      	b.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d015      	beq.n	8006bd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b21      	cmp	r3, #33	; 0x21
 8006bac:	d112      	bne.n	8006bd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006bd2:	e025      	b.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d120      	bne.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b21      	cmp	r3, #33	; 0x21
 8006be2:	d11d      	bne.n	8006c20 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fe36 	bl	800688c <HAL_I2C_MemTxCpltCallback>
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b22      	cmp	r3, #34	; 0x22
 8006c3a:	f040 80a2 	bne.w	8006d82 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d921      	bls.n	8006c90 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	f040 8082 	bne.w	8006d82 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006c8e:	e078      	b.n	8006d82 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d074      	beq.n	8006d82 <I2C_MasterReceive_RXNE+0x15a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d002      	beq.n	8006ca4 <I2C_MasterReceive_RXNE+0x7c>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d16e      	bne.n	8006d82 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fac5 	bl	8008234 <I2C_WaitOnSTOPRequestThroughIT>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d142      	bne.n	8006d36 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d10a      	bne.n	8006d20 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff fdc1 	bl	80068a0 <HAL_I2C_MemRxCpltCallback>
}
 8006d1e:	e030      	b.n	8006d82 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2212      	movs	r2, #18
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fd76 	bl	8006820 <HAL_I2C_MasterRxCpltCallback>
}
 8006d34:	e025      	b.n	8006d82 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d44:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff fd99 	bl	80068b4 <HAL_I2C_ErrorCallback>
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d11b      	bne.n	8006dda <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006dd8:	e0bd      	b.n	8006f56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d129      	bne.n	8006e38 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00a      	beq.n	8006e10 <I2C_MasterReceive_BTF+0x86>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d007      	beq.n	8006e10 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e36:	e08e      	b.n	8006f56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d176      	bne.n	8006f30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d002      	beq.n	8006e4e <I2C_MasterReceive_BTF+0xc4>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d108      	bne.n	8006e60 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e019      	b.n	8006e94 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d002      	beq.n	8006e6c <I2C_MasterReceive_BTF+0xe2>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d108      	bne.n	8006e7e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e00a      	b.n	8006e94 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d007      	beq.n	8006e94 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006eee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d10a      	bne.n	8006f1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fcc4 	bl	80068a0 <HAL_I2C_MemRxCpltCallback>
}
 8006f18:	e01d      	b.n	8006f56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2212      	movs	r2, #18
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fc79 	bl	8006820 <HAL_I2C_MasterRxCpltCallback>
}
 8006f2e:	e012      	b.n	8006f56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d117      	bne.n	8006fa2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006f8c:	e067      	b.n	800705e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	611a      	str	r2, [r3, #16]
}
 8006fa0:	e05d      	b.n	800705e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006faa:	d133      	bne.n	8007014 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b21      	cmp	r3, #33	; 0x21
 8006fb6:	d109      	bne.n	8006fcc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fc8:	611a      	str	r2, [r3, #16]
 8006fca:	e008      	b.n	8006fde <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <I2C_Master_SB+0x92>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d108      	bne.n	8007002 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d032      	beq.n	800705e <I2C_Master_SB+0x100>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d02d      	beq.n	800705e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007010:	605a      	str	r2, [r3, #4]
}
 8007012:	e024      	b.n	800705e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	b29b      	uxth	r3, r3
 8007022:	11db      	asrs	r3, r3, #7
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0306 	and.w	r3, r3, #6
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f063 030f 	orn	r3, r3, #15
 8007030:	b2da      	uxtb	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	611a      	str	r2, [r3, #16]
}
 8007038:	e011      	b.n	800705e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703e:	2b01      	cmp	r3, #1
 8007040:	d10d      	bne.n	800705e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	b29b      	uxth	r3, r3
 8007048:	11db      	asrs	r3, r3, #7
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 0306 	and.w	r3, r3, #6
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f063 030e 	orn	r3, r3, #14
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	611a      	str	r2, [r3, #16]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	b2da      	uxtb	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <I2C_Master_ADD10+0x26>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d108      	bne.n	80070a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00c      	beq.n	80070b2 <I2C_Master_ADD10+0x48>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b0:	605a      	str	r2, [r3, #4]
  }
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80070be:	b480      	push	{r7}
 80070c0:	b091      	sub	sp, #68	; 0x44
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b22      	cmp	r3, #34	; 0x22
 80070e6:	f040 8169 	bne.w	80073bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <I2C_Master_ADDR+0x54>
 80070f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070f6:	2b40      	cmp	r3, #64	; 0x40
 80070f8:	d10b      	bne.n	8007112 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070fa:	2300      	movs	r3, #0
 80070fc:	633b      	str	r3, [r7, #48]	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	e160      	b.n	80073d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11d      	bne.n	8007156 <I2C_Master_ADDR+0x98>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007122:	d118      	bne.n	8007156 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007124:	2300      	movs	r3, #0
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007148:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	651a      	str	r2, [r3, #80]	; 0x50
 8007154:	e13e      	b.n	80073d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007160:	2300      	movs	r3, #0
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e115      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	f040 808a 	bne.w	80072a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800719a:	d137      	bne.n	800720c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ba:	d113      	bne.n	80071e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071cc:	2300      	movs	r3, #0
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	e0e7      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e4:	2300      	movs	r3, #0
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	e0d3      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	2b08      	cmp	r3, #8
 8007210:	d02e      	beq.n	8007270 <I2C_Master_ADDR+0x1b2>
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	2b20      	cmp	r3, #32
 8007216:	d02b      	beq.n	8007270 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	2b12      	cmp	r3, #18
 800721c:	d102      	bne.n	8007224 <I2C_Master_ADDR+0x166>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2b01      	cmp	r3, #1
 8007222:	d125      	bne.n	8007270 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	2b04      	cmp	r3, #4
 8007228:	d00e      	beq.n	8007248 <I2C_Master_ADDR+0x18a>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	2b02      	cmp	r3, #2
 800722e:	d00b      	beq.n	8007248 <I2C_Master_ADDR+0x18a>
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	2b10      	cmp	r3, #16
 8007234:	d008      	beq.n	8007248 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e007      	b.n	8007258 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007256:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	e0a1      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e085      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d14d      	bne.n	800734e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d016      	beq.n	80072e6 <I2C_Master_ADDR+0x228>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d013      	beq.n	80072e6 <I2C_Master_ADDR+0x228>
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d010      	beq.n	80072e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e007      	b.n	80072f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007304:	d117      	bne.n	8007336 <I2C_Master_ADDR+0x278>
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800730c:	d00b      	beq.n	8007326 <I2C_Master_ADDR+0x268>
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	2b01      	cmp	r3, #1
 8007312:	d008      	beq.n	8007326 <I2C_Master_ADDR+0x268>
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	2b08      	cmp	r3, #8
 8007318:	d005      	beq.n	8007326 <I2C_Master_ADDR+0x268>
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	2b10      	cmp	r3, #16
 800731e:	d002      	beq.n	8007326 <I2C_Master_ADDR+0x268>
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	2b20      	cmp	r3, #32
 8007324:	d107      	bne.n	8007336 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007334:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e032      	b.n	80073b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736c:	d117      	bne.n	800739e <I2C_Master_ADDR+0x2e0>
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007374:	d00b      	beq.n	800738e <I2C_Master_ADDR+0x2d0>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	2b01      	cmp	r3, #1
 800737a:	d008      	beq.n	800738e <I2C_Master_ADDR+0x2d0>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b08      	cmp	r3, #8
 8007380:	d005      	beq.n	800738e <I2C_Master_ADDR+0x2d0>
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	2b10      	cmp	r3, #16
 8007386:	d002      	beq.n	800738e <I2C_Master_ADDR+0x2d0>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	2b20      	cmp	r3, #32
 800738c:	d107      	bne.n	800739e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800739c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80073ba:	e00b      	b.n	80073d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	e7ff      	b.n	80073d4 <I2C_Master_ADDR+0x316>
 80073d4:	bf00      	nop
 80073d6:	3744      	adds	r7, #68	; 0x44
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02b      	beq.n	8007452 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d114      	bne.n	8007452 <I2C_SlaveTransmit_TXE+0x72>
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b29      	cmp	r3, #41	; 0x29
 800742c:	d111      	bne.n	8007452 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2228      	movs	r2, #40	; 0x28
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff f9f1 	bl	8006834 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d02c      	beq.n	8007510 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d114      	bne.n	8007510 <I2C_SlaveReceive_RXNE+0x74>
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d111      	bne.n	8007510 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2222      	movs	r2, #34	; 0x22
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2228      	movs	r2, #40	; 0x28
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff f99c 	bl	8006848 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d012      	beq.n	8007550 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007576:	2b28      	cmp	r3, #40	; 0x28
 8007578:	d127      	bne.n	80075ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007588:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	089b      	lsrs	r3, r3, #2
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	09db      	lsrs	r3, r3, #7
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	81bb      	strh	r3, [r7, #12]
 80075ac:	e002      	b.n	80075b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80075bc:	89ba      	ldrh	r2, [r7, #12]
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f94a 	bl	800685c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80075c8:	e00e      	b.n	80075e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800760e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800763c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764c:	d172      	bne.n	8007734 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b22      	cmp	r3, #34	; 0x22
 8007652:	d002      	beq.n	800765a <I2C_Slave_STOPF+0x6a>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b2a      	cmp	r3, #42	; 0x2a
 8007658:	d135      	bne.n	80076c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f043 0204 	orr.w	r2, r3, #4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800768c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f85d 	bl	8005752 <HAL_DMA_GetState>
 8007698:	4603      	mov	r3, r0
 800769a:	2b01      	cmp	r3, #1
 800769c:	d049      	beq.n	8007732 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	4a69      	ldr	r2, [pc, #420]	; (8007848 <I2C_Slave_STOPF+0x258>)
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe f82f 	bl	800570e <HAL_DMA_Abort_IT>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03d      	beq.n	8007732 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076c4:	e035      	b.n	8007732 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe f827 	bl	8005752 <HAL_DMA_GetState>
 8007704:	4603      	mov	r3, r0
 8007706:	2b01      	cmp	r3, #1
 8007708:	d014      	beq.n	8007734 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	4a4e      	ldr	r2, [pc, #312]	; (8007848 <I2C_Slave_STOPF+0x258>)
 8007710:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fff9 	bl	800570e <HAL_DMA_Abort_IT>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d008      	beq.n	8007734 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	e000      	b.n	8007734 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007732:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d03e      	beq.n	80077bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d112      	bne.n	8007772 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d112      	bne.n	80077a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	f043 0204 	orr.w	r2, r3, #4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f8b3 	bl	8007930 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80077ca:	e039      	b.n	8007840 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b2a      	cmp	r3, #42	; 0x2a
 80077d0:	d109      	bne.n	80077e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2228      	movs	r2, #40	; 0x28
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff f831 	bl	8006848 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b28      	cmp	r3, #40	; 0x28
 80077f0:	d111      	bne.n	8007816 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <I2C_Slave_STOPF+0x25c>)
 80077f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff f832 	bl	8006878 <HAL_I2C_ListenCpltCallback>
}
 8007814:	e014      	b.n	8007840 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	2b22      	cmp	r3, #34	; 0x22
 800781c:	d002      	beq.n	8007824 <I2C_Slave_STOPF+0x234>
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b22      	cmp	r3, #34	; 0x22
 8007822:	d10d      	bne.n	8007840 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f804 	bl	8006848 <HAL_I2C_SlaveRxCpltCallback>
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	08007e35 	.word	0x08007e35
 800784c:	ffff0000 	.word	0xffff0000

08007850 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800785e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d002      	beq.n	8007872 <I2C_Slave_AF+0x22>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b20      	cmp	r3, #32
 8007870:	d129      	bne.n	80078c6 <I2C_Slave_AF+0x76>
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2b28      	cmp	r3, #40	; 0x28
 8007876:	d126      	bne.n	80078c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a2c      	ldr	r2, [pc, #176]	; (800792c <I2C_Slave_AF+0xdc>)
 800787c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800788c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007896:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fe ffda 	bl	8006878 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80078c4:	e02e      	b.n	8007924 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b21      	cmp	r3, #33	; 0x21
 80078ca:	d126      	bne.n	800791a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <I2C_Slave_AF+0xdc>)
 80078d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2221      	movs	r2, #33	; 0x21
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007900:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fe ff8e 	bl	8006834 <HAL_I2C_SlaveTxCpltCallback>
}
 8007918:	e004      	b.n	8007924 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007922:	615a      	str	r2, [r3, #20]
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	ffff0000 	.word	0xffff0000

08007930 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007946:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b10      	cmp	r3, #16
 800794c:	d002      	beq.n	8007954 <I2C_ITError+0x24>
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	d10a      	bne.n	800796a <I2C_ITError+0x3a>
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b22      	cmp	r3, #34	; 0x22
 8007958:	d107      	bne.n	800796a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007968:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007970:	2b28      	cmp	r3, #40	; 0x28
 8007972:	d107      	bne.n	8007984 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2228      	movs	r2, #40	; 0x28
 800797e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007982:	e015      	b.n	80079b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007992:	d00a      	beq.n	80079aa <I2C_ITError+0x7a>
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b60      	cmp	r3, #96	; 0x60
 8007998:	d007      	beq.n	80079aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079be:	d162      	bne.n	8007a86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d020      	beq.n	8007a20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	4a6a      	ldr	r2, [pc, #424]	; (8007b8c <I2C_ITError+0x25c>)
 80079e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd fe8f 	bl	800570e <HAL_DMA_Abort_IT>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 8089 	beq.w	8007b0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0201 	bic.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4798      	blx	r3
 8007a1e:	e074      	b.n	8007b0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	4a59      	ldr	r2, [pc, #356]	; (8007b8c <I2C_ITError+0x25c>)
 8007a26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fd fe6e 	bl	800570e <HAL_DMA_Abort_IT>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d068      	beq.n	8007b0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d10b      	bne.n	8007a5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	e041      	b.n	8007b0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b60      	cmp	r3, #96	; 0x60
 8007a90:	d125      	bne.n	8007ade <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d10b      	bne.n	8007ac6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fe fef6 	bl	80068c8 <HAL_I2C_AbortCpltCallback>
 8007adc:	e015      	b.n	8007b0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d10b      	bne.n	8007b04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fe fed5 	bl	80068b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10e      	bne.n	8007b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d113      	bne.n	8007b84 <I2C_ITError+0x254>
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b28      	cmp	r3, #40	; 0x28
 8007b60:	d110      	bne.n	8007b84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a0a      	ldr	r2, [pc, #40]	; (8007b90 <I2C_ITError+0x260>)
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe fe7a 	bl	8006878 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08007e35 	.word	0x08007e35
 8007b90:	ffff0000 	.word	0xffff0000

08007b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d006      	beq.n	8007bbe <I2C_MasterRequestWrite+0x2a>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d003      	beq.n	8007bbe <I2C_MasterRequestWrite+0x2a>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bbc:	d108      	bne.n	8007bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e00b      	b.n	8007be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	2b12      	cmp	r3, #18
 8007bd6:	d107      	bne.n	8007be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f9c5 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00d      	beq.n	8007c1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0e:	d103      	bne.n	8007c18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e035      	b.n	8007c88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c24:	d108      	bne.n	8007c38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c34:	611a      	str	r2, [r3, #16]
 8007c36:	e01b      	b.n	8007c70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c38:	897b      	ldrh	r3, [r7, #10]
 8007c3a:	11db      	asrs	r3, r3, #7
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0306 	and.w	r3, r3, #6
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f063 030f 	orn	r3, r3, #15
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	490e      	ldr	r1, [pc, #56]	; (8007c90 <I2C_MasterRequestWrite+0xfc>)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f9eb 	bl	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e010      	b.n	8007c88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c66:	897b      	ldrh	r3, [r7, #10]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	4907      	ldr	r1, [pc, #28]	; (8007c94 <I2C_MasterRequestWrite+0x100>)
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f9db 	bl	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	00010008 	.word	0x00010008
 8007c94:	00010002 	.word	0x00010002

08007c98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cbc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d006      	beq.n	8007cd2 <I2C_MasterRequestRead+0x3a>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <I2C_MasterRequestRead+0x3a>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd0:	d108      	bne.n	8007ce4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e00b      	b.n	8007cfc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	2b11      	cmp	r3, #17
 8007cea:	d107      	bne.n	8007cfc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f93b 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00d      	beq.n	8007d30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d22:	d103      	bne.n	8007d2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e079      	b.n	8007e24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d38:	d108      	bne.n	8007d4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d3a:	897b      	ldrh	r3, [r7, #10]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	611a      	str	r2, [r3, #16]
 8007d4a:	e05f      	b.n	8007e0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d4c:	897b      	ldrh	r3, [r7, #10]
 8007d4e:	11db      	asrs	r3, r3, #7
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0306 	and.w	r3, r3, #6
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f063 030f 	orn	r3, r3, #15
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4930      	ldr	r1, [pc, #192]	; (8007e2c <I2C_MasterRequestRead+0x194>)
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f961 	bl	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e054      	b.n	8007e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d7a:	897b      	ldrh	r3, [r7, #10]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	4929      	ldr	r1, [pc, #164]	; (8007e30 <I2C_MasterRequestRead+0x198>)
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f951 	bl	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e044      	b.n	8007e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f8d9 	bl	8007f84 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de6:	d103      	bne.n	8007df0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e017      	b.n	8007e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007df4:	897b      	ldrh	r3, [r7, #10]
 8007df6:	11db      	asrs	r3, r3, #7
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0306 	and.w	r3, r3, #6
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f063 030e 	orn	r3, r3, #14
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4907      	ldr	r1, [pc, #28]	; (8007e30 <I2C_MasterRequestRead+0x198>)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f90d 	bl	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	00010008 	.word	0x00010008
 8007e30:	00010002 	.word	0x00010002

08007e34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e4e:	4b4b      	ldr	r3, [pc, #300]	; (8007f7c <I2C_DMAAbort+0x148>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	08db      	lsrs	r3, r3, #3
 8007e54:	4a4a      	ldr	r2, [pc, #296]	; (8007f80 <I2C_DMAAbort+0x14c>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	0a1a      	lsrs	r2, r3, #8
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	00da      	lsls	r2, r3, #3
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	f043 0220 	orr.w	r2, r3, #32
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007e7a:	e00a      	b.n	8007e92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e90:	d0ea      	beq.n	8007e68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	2200      	movs	r2, #0
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0201 	bic.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b60      	cmp	r3, #96	; 0x60
 8007f02:	d10e      	bne.n	8007f22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f7fe fcd4 	bl	80068c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f20:	e027      	b.n	8007f72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f22:	7cfb      	ldrb	r3, [r7, #19]
 8007f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f28:	2b28      	cmp	r3, #40	; 0x28
 8007f2a:	d117      	bne.n	8007f5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2228      	movs	r2, #40	; 0x28
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f5a:	e007      	b.n	8007f6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7fe fca1 	bl	80068b4 <HAL_I2C_ErrorCallback>
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000050 	.word	0x20000050
 8007f80:	14f8b589 	.word	0x14f8b589

08007f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f94:	e025      	b.n	8007fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d021      	beq.n	8007fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9e:	f7fd fa05 	bl	80053ac <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d302      	bcc.n	8007fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d116      	bne.n	8007fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e023      	b.n	800802a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d10d      	bne.n	8008008 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	43da      	mvns	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	e00c      	b.n	8008022 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	43da      	mvns	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf0c      	ite	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	2300      	movne	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	429a      	cmp	r2, r3
 8008026:	d0b6      	beq.n	8007f96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
 800803e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008040:	e051      	b.n	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008050:	d123      	bne.n	800809a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008060:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800806a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f043 0204 	orr.w	r2, r3, #4
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e046      	b.n	8008128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d021      	beq.n	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a2:	f7fd f983 	bl	80053ac <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d116      	bne.n	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f043 0220 	orr.w	r2, r3, #32
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e020      	b.n	8008128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10c      	bne.n	800810a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	43da      	mvns	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4013      	ands	r3, r2
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bf14      	ite	ne
 8008102:	2301      	movne	r3, #1
 8008104:	2300      	moveq	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	e00b      	b.n	8008122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	43da      	mvns	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4013      	ands	r3, r2
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d18d      	bne.n	8008042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800813c:	e02d      	b.n	800819a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 f900 	bl	8008344 <I2C_IsAcknowledgeFailed>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e02d      	b.n	80081aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d021      	beq.n	800819a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fd f929 	bl	80053ac <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d116      	bne.n	800819a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e007      	b.n	80081aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a4:	2b80      	cmp	r3, #128	; 0x80
 80081a6:	d1ca      	bne.n	800813e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081be:	e02d      	b.n	800821c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f8bf 	bl	8008344 <I2C_IsAcknowledgeFailed>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e02d      	b.n	800822c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d021      	beq.n	800821c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d8:	f7fd f8e8 	bl	80053ac <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d302      	bcc.n	80081ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d116      	bne.n	800821c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e007      	b.n	800822c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d1ca      	bne.n	80081c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	08db      	lsrs	r3, r3, #3
 8008246:	4a13      	ldr	r2, [pc, #76]	; (8008294 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008248:	fba2 2303 	umull	r2, r3, r2, r3
 800824c:	0a1a      	lsrs	r2, r3, #8
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b01      	subs	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0220 	orr.w	r2, r3, #32
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e008      	b.n	8008284 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008280:	d0e9      	beq.n	8008256 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000050 	.word	0x20000050
 8008294:	14f8b589 	.word	0x14f8b589

08008298 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082a4:	e042      	b.n	800832c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d119      	bne.n	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0210 	mvn.w	r2, #16
 80082bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e029      	b.n	800833c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e8:	f7fd f860 	bl	80053ac <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d302      	bcc.n	80082fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d116      	bne.n	800832c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e007      	b.n	800833c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d1b5      	bne.n	80082a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835a:	d11b      	bne.n	8008394 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008364:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f043 0204 	orr.w	r2, r3, #4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083b2:	d103      	bne.n	80083bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083ba:	e007      	b.n	80083cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083c4:	d102      	bne.n	80083cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2208      	movs	r2, #8
 80083ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e267      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d075      	beq.n	80084e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083f6:	4b88      	ldr	r3, [pc, #544]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 030c 	and.w	r3, r3, #12
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d00c      	beq.n	800841c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008402:	4b85      	ldr	r3, [pc, #532]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800840a:	2b08      	cmp	r3, #8
 800840c:	d112      	bne.n	8008434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800840e:	4b82      	ldr	r3, [pc, #520]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841a:	d10b      	bne.n	8008434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800841c:	4b7e      	ldr	r3, [pc, #504]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05b      	beq.n	80084e0 <HAL_RCC_OscConfig+0x108>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d157      	bne.n	80084e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e242      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843c:	d106      	bne.n	800844c <HAL_RCC_OscConfig+0x74>
 800843e:	4b76      	ldr	r3, [pc, #472]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a75      	ldr	r2, [pc, #468]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e01d      	b.n	8008488 <HAL_RCC_OscConfig+0xb0>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008454:	d10c      	bne.n	8008470 <HAL_RCC_OscConfig+0x98>
 8008456:	4b70      	ldr	r3, [pc, #448]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6f      	ldr	r2, [pc, #444]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800845c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	4b6d      	ldr	r3, [pc, #436]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a6c      	ldr	r2, [pc, #432]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e00b      	b.n	8008488 <HAL_RCC_OscConfig+0xb0>
 8008470:	4b69      	ldr	r3, [pc, #420]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a68      	ldr	r2, [pc, #416]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	4b66      	ldr	r3, [pc, #408]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a65      	ldr	r2, [pc, #404]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d013      	beq.n	80084b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008490:	f7fc ff8c 	bl	80053ac <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008498:	f7fc ff88 	bl	80053ac <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	; 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e207      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084aa:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0xc0>
 80084b6:	e014      	b.n	80084e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b8:	f7fc ff78 	bl	80053ac <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084c0:	f7fc ff74 	bl	80053ac <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b64      	cmp	r3, #100	; 0x64
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e1f3      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084d2:	4b51      	ldr	r3, [pc, #324]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0xe8>
 80084de:	e000      	b.n	80084e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d063      	beq.n	80085b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084ee:	4b4a      	ldr	r3, [pc, #296]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084fa:	4b47      	ldr	r3, [pc, #284]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008502:	2b08      	cmp	r3, #8
 8008504:	d11c      	bne.n	8008540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008506:	4b44      	ldr	r3, [pc, #272]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d116      	bne.n	8008540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008512:	4b41      	ldr	r3, [pc, #260]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_RCC_OscConfig+0x152>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d001      	beq.n	800852a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e1c7      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800852a:	4b3b      	ldr	r3, [pc, #236]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4937      	ldr	r1, [pc, #220]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800853a:	4313      	orrs	r3, r2
 800853c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800853e:	e03a      	b.n	80085b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d020      	beq.n	800858a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008548:	4b34      	ldr	r3, [pc, #208]	; (800861c <HAL_RCC_OscConfig+0x244>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854e:	f7fc ff2d 	bl	80053ac <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008556:	f7fc ff29 	bl	80053ac <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e1a8      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008568:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008574:	4b28      	ldr	r3, [pc, #160]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4925      	ldr	r1, [pc, #148]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 8008584:	4313      	orrs	r3, r2
 8008586:	600b      	str	r3, [r1, #0]
 8008588:	e015      	b.n	80085b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800858a:	4b24      	ldr	r3, [pc, #144]	; (800861c <HAL_RCC_OscConfig+0x244>)
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fc ff0c 	bl	80053ac <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008598:	f7fc ff08 	bl	80053ac <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e187      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f0      	bne.n	8008598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d036      	beq.n	8008630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085ca:	4b15      	ldr	r3, [pc, #84]	; (8008620 <HAL_RCC_OscConfig+0x248>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7fc feec 	bl	80053ac <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085d8:	f7fc fee8 	bl	80053ac <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e167      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_RCC_OscConfig+0x240>)
 80085ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0x200>
 80085f6:	e01b      	b.n	8008630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <HAL_RCC_OscConfig+0x248>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085fe:	f7fc fed5 	bl	80053ac <HAL_GetTick>
 8008602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008604:	e00e      	b.n	8008624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008606:	f7fc fed1 	bl	80053ac <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b02      	cmp	r3, #2
 8008612:	d907      	bls.n	8008624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e150      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
 8008618:	40023800 	.word	0x40023800
 800861c:	42470000 	.word	0x42470000
 8008620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008624:	4b88      	ldr	r3, [pc, #544]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ea      	bne.n	8008606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8097 	beq.w	800876c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008642:	4b81      	ldr	r3, [pc, #516]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10f      	bne.n	800866e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	60bb      	str	r3, [r7, #8]
 8008652:	4b7d      	ldr	r3, [pc, #500]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	4a7c      	ldr	r2, [pc, #496]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800865c:	6413      	str	r3, [r2, #64]	; 0x40
 800865e:	4b7a      	ldr	r3, [pc, #488]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008666:	60bb      	str	r3, [r7, #8]
 8008668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800866e:	4b77      	ldr	r3, [pc, #476]	; (800884c <HAL_RCC_OscConfig+0x474>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d118      	bne.n	80086ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800867a:	4b74      	ldr	r3, [pc, #464]	; (800884c <HAL_RCC_OscConfig+0x474>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a73      	ldr	r2, [pc, #460]	; (800884c <HAL_RCC_OscConfig+0x474>)
 8008680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008686:	f7fc fe91 	bl	80053ac <HAL_GetTick>
 800868a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800868e:	f7fc fe8d 	bl	80053ac <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e10c      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a0:	4b6a      	ldr	r3, [pc, #424]	; (800884c <HAL_RCC_OscConfig+0x474>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f0      	beq.n	800868e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d106      	bne.n	80086c2 <HAL_RCC_OscConfig+0x2ea>
 80086b4:	4b64      	ldr	r3, [pc, #400]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	4a63      	ldr	r2, [pc, #396]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	6713      	str	r3, [r2, #112]	; 0x70
 80086c0:	e01c      	b.n	80086fc <HAL_RCC_OscConfig+0x324>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d10c      	bne.n	80086e4 <HAL_RCC_OscConfig+0x30c>
 80086ca:	4b5f      	ldr	r3, [pc, #380]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	4a5e      	ldr	r2, [pc, #376]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086d0:	f043 0304 	orr.w	r3, r3, #4
 80086d4:	6713      	str	r3, [r2, #112]	; 0x70
 80086d6:	4b5c      	ldr	r3, [pc, #368]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	4a5b      	ldr	r2, [pc, #364]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	6713      	str	r3, [r2, #112]	; 0x70
 80086e2:	e00b      	b.n	80086fc <HAL_RCC_OscConfig+0x324>
 80086e4:	4b58      	ldr	r3, [pc, #352]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	4a57      	ldr	r2, [pc, #348]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	6713      	str	r3, [r2, #112]	; 0x70
 80086f0:	4b55      	ldr	r3, [pc, #340]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f4:	4a54      	ldr	r2, [pc, #336]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80086f6:	f023 0304 	bic.w	r3, r3, #4
 80086fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d015      	beq.n	8008730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008704:	f7fc fe52 	bl	80053ac <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800870a:	e00a      	b.n	8008722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800870c:	f7fc fe4e 	bl	80053ac <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	f241 3288 	movw	r2, #5000	; 0x1388
 800871a:	4293      	cmp	r3, r2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e0cb      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008722:	4b49      	ldr	r3, [pc, #292]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0ee      	beq.n	800870c <HAL_RCC_OscConfig+0x334>
 800872e:	e014      	b.n	800875a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008730:	f7fc fe3c 	bl	80053ac <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008736:	e00a      	b.n	800874e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008738:	f7fc fe38 	bl	80053ac <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f241 3288 	movw	r2, #5000	; 0x1388
 8008746:	4293      	cmp	r3, r2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e0b5      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800874e:	4b3e      	ldr	r3, [pc, #248]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1ee      	bne.n	8008738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d105      	bne.n	800876c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008760:	4b39      	ldr	r3, [pc, #228]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	4a38      	ldr	r2, [pc, #224]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800876a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80a1 	beq.w	80088b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008776:	4b34      	ldr	r3, [pc, #208]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 030c 	and.w	r3, r3, #12
 800877e:	2b08      	cmp	r3, #8
 8008780:	d05c      	beq.n	800883c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d141      	bne.n	800880e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800878a:	4b31      	ldr	r3, [pc, #196]	; (8008850 <HAL_RCC_OscConfig+0x478>)
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008790:	f7fc fe0c 	bl	80053ac <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008798:	f7fc fe08 	bl	80053ac <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e087      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087aa:	4b27      	ldr	r3, [pc, #156]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69da      	ldr	r2, [r3, #28]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	3b01      	subs	r3, #1
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	491b      	ldr	r1, [pc, #108]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e0:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <HAL_RCC_OscConfig+0x478>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e6:	f7fc fde1 	bl	80053ac <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ee:	f7fc fddd 	bl	80053ac <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e05c      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0f0      	beq.n	80087ee <HAL_RCC_OscConfig+0x416>
 800880c:	e054      	b.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <HAL_RCC_OscConfig+0x478>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008814:	f7fc fdca 	bl	80053ac <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800881c:	f7fc fdc6 	bl	80053ac <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e045      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882e:	4b06      	ldr	r3, [pc, #24]	; (8008848 <HAL_RCC_OscConfig+0x470>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x444>
 800883a:	e03d      	b.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d107      	bne.n	8008854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e038      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
 8008848:	40023800 	.word	0x40023800
 800884c:	40007000 	.word	0x40007000
 8008850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008854:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <HAL_RCC_OscConfig+0x4ec>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d028      	beq.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800886c:	429a      	cmp	r2, r3
 800886e:	d121      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800887a:	429a      	cmp	r2, r3
 800887c:	d11a      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008884:	4013      	ands	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800888a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800888c:	4293      	cmp	r3, r2
 800888e:	d111      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	3b01      	subs	r3, #1
 800889e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d107      	bne.n	80088b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d001      	beq.n	80088b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800

080088c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e0cc      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088dc:	4b68      	ldr	r3, [pc, #416]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d90c      	bls.n	8008904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ea:	4b65      	ldr	r3, [pc, #404]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f2:	4b63      	ldr	r3, [pc, #396]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d001      	beq.n	8008904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0b8      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d020      	beq.n	8008952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800891c:	4b59      	ldr	r3, [pc, #356]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	4a58      	ldr	r2, [pc, #352]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008934:	4b53      	ldr	r3, [pc, #332]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	4a52      	ldr	r2, [pc, #328]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800893e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008940:	4b50      	ldr	r3, [pc, #320]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	494d      	ldr	r1, [pc, #308]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d044      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d107      	bne.n	8008976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008966:	4b47      	ldr	r3, [pc, #284]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d119      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e07f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d003      	beq.n	8008986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008982:	2b03      	cmp	r3, #3
 8008984:	d107      	bne.n	8008996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008986:	4b3f      	ldr	r3, [pc, #252]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e06f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008996:	4b3b      	ldr	r3, [pc, #236]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e067      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089a6:	4b37      	ldr	r3, [pc, #220]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f023 0203 	bic.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4934      	ldr	r1, [pc, #208]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b8:	f7fc fcf8 	bl	80053ac <HAL_GetTick>
 80089bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	e00a      	b.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c0:	f7fc fcf4 	bl	80053ac <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e04f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d6:	4b2b      	ldr	r3, [pc, #172]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 020c 	and.w	r2, r3, #12
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d1eb      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d20c      	bcs.n	8008a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089f6:	4b22      	ldr	r3, [pc, #136]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089fe:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <HAL_RCC_ClockConfig+0x1b8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d001      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e032      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4916      	ldr	r1, [pc, #88]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	490e      	ldr	r1, [pc, #56]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a4e:	f000 f821 	bl	8008a94 <HAL_RCC_GetSysClockFreq>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	091b      	lsrs	r3, r3, #4
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	490a      	ldr	r1, [pc, #40]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 8008a60:	5ccb      	ldrb	r3, [r1, r3]
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	4a09      	ldr	r2, [pc, #36]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <HAL_RCC_ClockConfig+0x1c8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fc fc58 	bl	8005324 <HAL_InitTick>

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023c00 	.word	0x40023c00
 8008a84:	40023800 	.word	0x40023800
 8008a88:	0800b050 	.word	0x0800b050
 8008a8c:	20000050 	.word	0x20000050
 8008a90:	20000054 	.word	0x20000054

08008a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a98:	b094      	sub	sp, #80	; 0x50
 8008a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aac:	4b79      	ldr	r3, [pc, #484]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 030c 	and.w	r3, r3, #12
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d00d      	beq.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	f200 80e1 	bhi.w	8008c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d003      	beq.n	8008ace <HAL_RCC_GetSysClockFreq+0x3a>
 8008ac6:	e0db      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ac8:	4b73      	ldr	r3, [pc, #460]	; (8008c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008acc:	e0db      	b.n	8008c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ace:	4b73      	ldr	r3, [pc, #460]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8008ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ad2:	e0d8      	b.n	8008c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ad4:	4b6f      	ldr	r3, [pc, #444]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008adc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ade:	4b6d      	ldr	r3, [pc, #436]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d063      	beq.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aea:	4b6a      	ldr	r3, [pc, #424]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	099b      	lsrs	r3, r3, #6
 8008af0:	2200      	movs	r2, #0
 8008af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
 8008b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f04f 0000 	mov.w	r0, #0
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	0159      	lsls	r1, r3, #5
 8008b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b18:	0150      	lsls	r0, r2, #5
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4621      	mov	r1, r4
 8008b20:	1a51      	subs	r1, r2, r1
 8008b22:	6139      	str	r1, [r7, #16]
 8008b24:	4629      	mov	r1, r5
 8008b26:	eb63 0301 	sbc.w	r3, r3, r1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	f04f 0300 	mov.w	r3, #0
 8008b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b38:	4659      	mov	r1, fp
 8008b3a:	018b      	lsls	r3, r1, #6
 8008b3c:	4651      	mov	r1, sl
 8008b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b42:	4651      	mov	r1, sl
 8008b44:	018a      	lsls	r2, r1, #6
 8008b46:	4651      	mov	r1, sl
 8008b48:	ebb2 0801 	subs.w	r8, r2, r1
 8008b4c:	4659      	mov	r1, fp
 8008b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8008b52:	f04f 0200 	mov.w	r2, #0
 8008b56:	f04f 0300 	mov.w	r3, #0
 8008b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b66:	4690      	mov	r8, r2
 8008b68:	4699      	mov	r9, r3
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	eb18 0303 	adds.w	r3, r8, r3
 8008b70:	60bb      	str	r3, [r7, #8]
 8008b72:	462b      	mov	r3, r5
 8008b74:	eb49 0303 	adc.w	r3, r9, r3
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b86:	4629      	mov	r1, r5
 8008b88:	024b      	lsls	r3, r1, #9
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b90:	4621      	mov	r1, r4
 8008b92:	024a      	lsls	r2, r1, #9
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ba4:	f7f8 f8cc 	bl	8000d40 <__aeabi_uldivmod>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4613      	mov	r3, r2
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb0:	e058      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bb2:	4b38      	ldr	r3, [pc, #224]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	f04f 0000 	mov.w	r0, #0
 8008bd4:	f04f 0100 	mov.w	r1, #0
 8008bd8:	0159      	lsls	r1, r3, #5
 8008bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bde:	0150      	lsls	r0, r2, #5
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4641      	mov	r1, r8
 8008be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bea:	4649      	mov	r1, r9
 8008bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c04:	ebb2 040a 	subs.w	r4, r2, sl
 8008c08:	eb63 050b 	sbc.w	r5, r3, fp
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	00eb      	lsls	r3, r5, #3
 8008c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c1a:	00e2      	lsls	r2, r4, #3
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	461d      	mov	r5, r3
 8008c20:	4643      	mov	r3, r8
 8008c22:	18e3      	adds	r3, r4, r3
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	464b      	mov	r3, r9
 8008c28:	eb45 0303 	adc.w	r3, r5, r3
 8008c2c:	607b      	str	r3, [r7, #4]
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	028b      	lsls	r3, r1, #10
 8008c3e:	4621      	mov	r1, r4
 8008c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c44:	4621      	mov	r1, r4
 8008c46:	028a      	lsls	r2, r1, #10
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c4e:	2200      	movs	r2, #0
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	61fa      	str	r2, [r7, #28]
 8008c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c58:	f7f8 f872 	bl	8000d40 <__aeabi_uldivmod>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4613      	mov	r3, r2
 8008c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	0c1b      	lsrs	r3, r3, #16
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	3301      	adds	r3, #1
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c7e:	e002      	b.n	8008c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3750      	adds	r7, #80	; 0x50
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c92:	bf00      	nop
 8008c94:	40023800 	.word	0x40023800
 8008c98:	00f42400 	.word	0x00f42400
 8008c9c:	007a1200 	.word	0x007a1200

08008ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ca4:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000050 	.word	0x20000050

08008cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cbc:	f7ff fff0 	bl	8008ca0 <HAL_RCC_GetHCLKFreq>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	0a9b      	lsrs	r3, r3, #10
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	4903      	ldr	r1, [pc, #12]	; (8008cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cce:	5ccb      	ldrb	r3, [r1, r3]
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	0800b060 	.word	0x0800b060

08008ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ce4:	f7ff ffdc 	bl	8008ca0 <HAL_RCC_GetHCLKFreq>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	0b5b      	lsrs	r3, r3, #13
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	4903      	ldr	r1, [pc, #12]	; (8008d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cf6:	5ccb      	ldrb	r3, [r1, r3]
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40023800 	.word	0x40023800
 8008d04:	0800b060 	.word	0x0800b060

08008d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e041      	b.n	8008d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7fc f90a 	bl	8004f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f000 fd88 	bl	800985c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d001      	beq.n	8008dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e044      	b.n	8008e4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0201 	orr.w	r2, r2, #1
 8008dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a1e      	ldr	r2, [pc, #120]	; (8008e58 <HAL_TIM_Base_Start_IT+0xb0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d018      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x6c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dea:	d013      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x6c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <HAL_TIM_Base_Start_IT+0xb4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00e      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x6c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a19      	ldr	r2, [pc, #100]	; (8008e60 <HAL_TIM_Base_Start_IT+0xb8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d009      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x6c>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d004      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x6c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <HAL_TIM_Base_Start_IT+0xc0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d111      	bne.n	8008e38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b06      	cmp	r3, #6
 8008e24:	d010      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0201 	orr.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e36:	e007      	b.n	8008e48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40010000 	.word	0x40010000
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	40000c00 	.word	0x40000c00
 8008e68:	40014000 	.word	0x40014000

08008e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e041      	b.n	8008f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f839 	bl	8008f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f000 fcd6 	bl	800985c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <HAL_TIM_PWM_Start+0x24>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	e022      	b.n	8008f8a <HAL_TIM_PWM_Start+0x6a>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d109      	bne.n	8008f5e <HAL_TIM_PWM_Start+0x3e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	bf14      	ite	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	e015      	b.n	8008f8a <HAL_TIM_PWM_Start+0x6a>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d109      	bne.n	8008f78 <HAL_TIM_PWM_Start+0x58>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	bf14      	ite	ne
 8008f70:	2301      	movne	r3, #1
 8008f72:	2300      	moveq	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	e008      	b.n	8008f8a <HAL_TIM_PWM_Start+0x6a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e068      	b.n	8009064 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <HAL_TIM_PWM_Start+0x82>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa0:	e013      	b.n	8008fca <HAL_TIM_PWM_Start+0xaa>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d104      	bne.n	8008fb2 <HAL_TIM_PWM_Start+0x92>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb0:	e00b      	b.n	8008fca <HAL_TIM_PWM_Start+0xaa>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d104      	bne.n	8008fc2 <HAL_TIM_PWM_Start+0xa2>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc0:	e003      	b.n	8008fca <HAL_TIM_PWM_Start+0xaa>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fee8 	bl	8009da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a23      	ldr	r2, [pc, #140]	; (800906c <HAL_TIM_PWM_Start+0x14c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d107      	bne.n	8008ff2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a1d      	ldr	r2, [pc, #116]	; (800906c <HAL_TIM_PWM_Start+0x14c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d018      	beq.n	800902e <HAL_TIM_PWM_Start+0x10e>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009004:	d013      	beq.n	800902e <HAL_TIM_PWM_Start+0x10e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a19      	ldr	r2, [pc, #100]	; (8009070 <HAL_TIM_PWM_Start+0x150>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00e      	beq.n	800902e <HAL_TIM_PWM_Start+0x10e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a17      	ldr	r2, [pc, #92]	; (8009074 <HAL_TIM_PWM_Start+0x154>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d009      	beq.n	800902e <HAL_TIM_PWM_Start+0x10e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a16      	ldr	r2, [pc, #88]	; (8009078 <HAL_TIM_PWM_Start+0x158>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d004      	beq.n	800902e <HAL_TIM_PWM_Start+0x10e>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a14      	ldr	r2, [pc, #80]	; (800907c <HAL_TIM_PWM_Start+0x15c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d111      	bne.n	8009052 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b06      	cmp	r3, #6
 800903e:	d010      	beq.n	8009062 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009050:	e007      	b.n	8009062 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f042 0201 	orr.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40010000 	.word	0x40010000
 8009070:	40000400 	.word	0x40000400
 8009074:	40000800 	.word	0x40000800
 8009078:	40000c00 	.word	0x40000c00
 800907c:	40014000 	.word	0x40014000

08009080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e097      	b.n	80091c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fb fe87 	bl	8004dbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090c4:	f023 0307 	bic.w	r3, r3, #7
 80090c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f000 fbc1 	bl	800985c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6a1b      	ldr	r3, [r3, #32]
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	4313      	orrs	r3, r2
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009120:	f023 030c 	bic.w	r3, r3, #12
 8009124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800912c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	4313      	orrs	r3, r2
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	011a      	lsls	r2, r3, #4
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	031b      	lsls	r3, r3, #12
 8009150:	4313      	orrs	r3, r2
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800915e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	4313      	orrs	r3, r2
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80091f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d110      	bne.n	800921e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d102      	bne.n	8009208 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009202:	7b7b      	ldrb	r3, [r7, #13]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d001      	beq.n	800920c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e069      	b.n	80092e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800921c:	e031      	b.n	8009282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d110      	bne.n	8009246 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d102      	bne.n	8009230 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800922a:	7b3b      	ldrb	r3, [r7, #12]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d001      	beq.n	8009234 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e055      	b.n	80092e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009244:	e01d      	b.n	8009282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d108      	bne.n	800925e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d105      	bne.n	800925e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009252:	7b7b      	ldrb	r3, [r7, #13]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d102      	bne.n	800925e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009258:	7b3b      	ldrb	r3, [r7, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d001      	beq.n	8009262 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e03e      	b.n	80092e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2202      	movs	r2, #2
 8009276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2202      	movs	r2, #2
 800927e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_TIM_Encoder_Start+0xc4>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b04      	cmp	r3, #4
 800928c:	d008      	beq.n	80092a0 <HAL_TIM_Encoder_Start+0xd4>
 800928e:	e00f      	b.n	80092b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2201      	movs	r2, #1
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fd85 	bl	8009da8 <TIM_CCxChannelCmd>
      break;
 800929e:	e016      	b.n	80092ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2201      	movs	r2, #1
 80092a6:	2104      	movs	r1, #4
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 fd7d 	bl	8009da8 <TIM_CCxChannelCmd>
      break;
 80092ae:	e00e      	b.n	80092ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2201      	movs	r2, #1
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fd75 	bl	8009da8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2201      	movs	r2, #1
 80092c4:	2104      	movs	r1, #4
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fd6e 	bl	8009da8 <TIM_CCxChannelCmd>
      break;
 80092cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f042 0201 	orr.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d122      	bne.n	8009344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b02      	cmp	r3, #2
 800930a:	d11b      	bne.n	8009344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f06f 0202 	mvn.w	r2, #2
 8009314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa77 	bl	800981e <HAL_TIM_IC_CaptureCallback>
 8009330:	e005      	b.n	800933e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa69 	bl	800980a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa7a 	bl	8009832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b04      	cmp	r3, #4
 8009350:	d122      	bne.n	8009398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b04      	cmp	r3, #4
 800935e:	d11b      	bne.n	8009398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f06f 0204 	mvn.w	r2, #4
 8009368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa4d 	bl	800981e <HAL_TIM_IC_CaptureCallback>
 8009384:	e005      	b.n	8009392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa3f 	bl	800980a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fa50 	bl	8009832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0308 	and.w	r3, r3, #8
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d122      	bne.n	80093ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	d11b      	bne.n	80093ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0208 	mvn.w	r2, #8
 80093bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2204      	movs	r2, #4
 80093c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa23 	bl	800981e <HAL_TIM_IC_CaptureCallback>
 80093d8:	e005      	b.n	80093e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa15 	bl	800980a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa26 	bl	8009832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d122      	bne.n	8009440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b10      	cmp	r3, #16
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0210 	mvn.w	r2, #16
 8009410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2208      	movs	r2, #8
 8009416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f9f9 	bl	800981e <HAL_TIM_IC_CaptureCallback>
 800942c:	e005      	b.n	800943a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9eb 	bl	800980a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9fc 	bl	8009832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b01      	cmp	r3, #1
 800944c:	d10e      	bne.n	800946c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b01      	cmp	r3, #1
 800945a:	d107      	bne.n	800946c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0201 	mvn.w	r2, #1
 8009464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7f9 fada 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009476:	2b80      	cmp	r3, #128	; 0x80
 8009478:	d10e      	bne.n	8009498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009484:	2b80      	cmp	r3, #128	; 0x80
 8009486:	d107      	bne.n	8009498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fd26 	bl	8009ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a2:	2b40      	cmp	r3, #64	; 0x40
 80094a4:	d10e      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d107      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f9c1 	bl	8009846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d10e      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d107      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f06f 0220 	mvn.w	r2, #32
 80094e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fcf0 	bl	8009ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009512:	2302      	movs	r3, #2
 8009514:	e0ae      	b.n	8009674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b0c      	cmp	r3, #12
 8009522:	f200 809f 	bhi.w	8009664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009526:	a201      	add	r2, pc, #4	; (adr r2, 800952c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	08009561 	.word	0x08009561
 8009530:	08009665 	.word	0x08009665
 8009534:	08009665 	.word	0x08009665
 8009538:	08009665 	.word	0x08009665
 800953c:	080095a1 	.word	0x080095a1
 8009540:	08009665 	.word	0x08009665
 8009544:	08009665 	.word	0x08009665
 8009548:	08009665 	.word	0x08009665
 800954c:	080095e3 	.word	0x080095e3
 8009550:	08009665 	.word	0x08009665
 8009554:	08009665 	.word	0x08009665
 8009558:	08009665 	.word	0x08009665
 800955c:	08009623 	.word	0x08009623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f9f8 	bl	800995c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0208 	orr.w	r2, r2, #8
 800957a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0204 	bic.w	r2, r2, #4
 800958a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6999      	ldr	r1, [r3, #24]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	619a      	str	r2, [r3, #24]
      break;
 800959e:	e064      	b.n	800966a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fa3e 	bl	8009a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6999      	ldr	r1, [r3, #24]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	021a      	lsls	r2, r3, #8
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	619a      	str	r2, [r3, #24]
      break;
 80095e0:	e043      	b.n	800966a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fa89 	bl	8009b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0208 	orr.w	r2, r2, #8
 80095fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0204 	bic.w	r2, r2, #4
 800960c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69d9      	ldr	r1, [r3, #28]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	61da      	str	r2, [r3, #28]
      break;
 8009620:	e023      	b.n	800966a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fad3 	bl	8009bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69da      	ldr	r2, [r3, #28]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800963c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69da      	ldr	r2, [r3, #28]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69d9      	ldr	r1, [r3, #28]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	021a      	lsls	r2, r3, #8
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	61da      	str	r2, [r3, #28]
      break;
 8009662:	e002      	b.n	800966a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
      break;
 8009668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009672:	7dfb      	ldrb	r3, [r7, #23]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_TIM_ConfigClockSource+0x1c>
 8009694:	2302      	movs	r3, #2
 8009696:	e0b4      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x186>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d03e      	beq.n	8009750 <HAL_TIM_ConfigClockSource+0xd4>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	f200 8087 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	f000 8086 	beq.w	80097ee <HAL_TIM_ConfigClockSource+0x172>
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d87f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b70      	cmp	r3, #112	; 0x70
 80096ea:	d01a      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0xa6>
 80096ec:	2b70      	cmp	r3, #112	; 0x70
 80096ee:	d87b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d050      	beq.n	8009796 <HAL_TIM_ConfigClockSource+0x11a>
 80096f4:	2b60      	cmp	r3, #96	; 0x60
 80096f6:	d877      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096f8:	2b50      	cmp	r3, #80	; 0x50
 80096fa:	d03c      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0xfa>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d873      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d058      	beq.n	80097b6 <HAL_TIM_ConfigClockSource+0x13a>
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d86f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	d064      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d86b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b20      	cmp	r3, #32
 8009712:	d060      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009714:	2b20      	cmp	r3, #32
 8009716:	d867      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d05c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 800971c:	2b10      	cmp	r3, #16
 800971e:	d05a      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009720:	e062      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6899      	ldr	r1, [r3, #8]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f000 fb19 	bl	8009d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	609a      	str	r2, [r3, #8]
      break;
 800974e:	e04f      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6899      	ldr	r1, [r3, #8]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f000 fb02 	bl	8009d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009772:	609a      	str	r2, [r3, #8]
      break;
 8009774:	e03c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6859      	ldr	r1, [r3, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	461a      	mov	r2, r3
 8009784:	f000 fa76 	bl	8009c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2150      	movs	r1, #80	; 0x50
 800978e:	4618      	mov	r0, r3
 8009790:	f000 facf 	bl	8009d32 <TIM_ITRx_SetConfig>
      break;
 8009794:	e02c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6859      	ldr	r1, [r3, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f000 fa95 	bl	8009cd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2160      	movs	r1, #96	; 0x60
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fabf 	bl	8009d32 <TIM_ITRx_SetConfig>
      break;
 80097b4:	e01c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6859      	ldr	r1, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f000 fa56 	bl	8009c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2140      	movs	r1, #64	; 0x40
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 faaf 	bl	8009d32 <TIM_ITRx_SetConfig>
      break;
 80097d4:	e00c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f000 faa6 	bl	8009d32 <TIM_ITRx_SetConfig>
      break;
 80097e6:	e003      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
      break;
 80097ec:	e000      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a34      	ldr	r2, [pc, #208]	; (8009940 <TIM_Base_SetConfig+0xe4>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00f      	beq.n	8009894 <TIM_Base_SetConfig+0x38>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d00b      	beq.n	8009894 <TIM_Base_SetConfig+0x38>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a31      	ldr	r2, [pc, #196]	; (8009944 <TIM_Base_SetConfig+0xe8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d007      	beq.n	8009894 <TIM_Base_SetConfig+0x38>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a30      	ldr	r2, [pc, #192]	; (8009948 <TIM_Base_SetConfig+0xec>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_Base_SetConfig+0x38>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a2f      	ldr	r2, [pc, #188]	; (800994c <TIM_Base_SetConfig+0xf0>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d108      	bne.n	80098a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a25      	ldr	r2, [pc, #148]	; (8009940 <TIM_Base_SetConfig+0xe4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d01b      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b4:	d017      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a22      	ldr	r2, [pc, #136]	; (8009944 <TIM_Base_SetConfig+0xe8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a21      	ldr	r2, [pc, #132]	; (8009948 <TIM_Base_SetConfig+0xec>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00f      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a20      	ldr	r2, [pc, #128]	; (800994c <TIM_Base_SetConfig+0xf0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00b      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1f      	ldr	r2, [pc, #124]	; (8009950 <TIM_Base_SetConfig+0xf4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a1e      	ldr	r2, [pc, #120]	; (8009954 <TIM_Base_SetConfig+0xf8>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_Base_SetConfig+0x8a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <TIM_Base_SetConfig+0xfc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d108      	bne.n	80098f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a08      	ldr	r2, [pc, #32]	; (8009940 <TIM_Base_SetConfig+0xe4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d103      	bne.n	800992c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	691a      	ldr	r2, [r3, #16]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	615a      	str	r2, [r3, #20]
}
 8009932:	bf00      	nop
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40010000 	.word	0x40010000
 8009944:	40000400 	.word	0x40000400
 8009948:	40000800 	.word	0x40000800
 800994c:	40000c00 	.word	0x40000c00
 8009950:	40014000 	.word	0x40014000
 8009954:	40014400 	.word	0x40014400
 8009958:	40014800 	.word	0x40014800

0800995c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f023 0201 	bic.w	r2, r3, #1
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 0302 	bic.w	r3, r3, #2
 80099a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <TIM_OC1_SetConfig+0xc8>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d10c      	bne.n	80099d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f023 0308 	bic.w	r3, r3, #8
 80099be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f023 0304 	bic.w	r3, r3, #4
 80099d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a13      	ldr	r2, [pc, #76]	; (8009a24 <TIM_OC1_SetConfig+0xc8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d111      	bne.n	80099fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	621a      	str	r2, [r3, #32]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40010000 	.word	0x40010000

08009a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	f023 0210 	bic.w	r2, r3, #16
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	021b      	lsls	r3, r3, #8
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f023 0320 	bic.w	r3, r3, #32
 8009a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	011b      	lsls	r3, r3, #4
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <TIM_OC2_SetConfig+0xd4>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d10d      	bne.n	8009aa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a15      	ldr	r2, [pc, #84]	; (8009afc <TIM_OC2_SetConfig+0xd4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d113      	bne.n	8009ad4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40010000 	.word	0x40010000

08009b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a1d      	ldr	r2, [pc, #116]	; (8009bd0 <TIM_OC3_SetConfig+0xd0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d10d      	bne.n	8009b7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a14      	ldr	r2, [pc, #80]	; (8009bd0 <TIM_OC3_SetConfig+0xd0>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d113      	bne.n	8009baa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	621a      	str	r2, [r3, #32]
}
 8009bc4:	bf00      	nop
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	40010000 	.word	0x40010000

08009bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	031b      	lsls	r3, r3, #12
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a10      	ldr	r2, [pc, #64]	; (8009c70 <TIM_OC4_SetConfig+0x9c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d109      	bne.n	8009c48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	019b      	lsls	r3, r3, #6
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40010000 	.word	0x40010000

08009c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	f023 0201 	bic.w	r2, r3, #1
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f023 030a 	bic.w	r3, r3, #10
 8009cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	621a      	str	r2, [r3, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b087      	sub	sp, #28
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	f023 0210 	bic.w	r2, r3, #16
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	031b      	lsls	r3, r3, #12
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	621a      	str	r2, [r3, #32]
}
 8009d26:	bf00      	nop
 8009d28:	371c      	adds	r7, #28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	f043 0307 	orr.w	r3, r3, #7
 8009d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	609a      	str	r2, [r3, #8]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	021a      	lsls	r2, r3, #8
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	609a      	str	r2, [r3, #8]
}
 8009d9c:	bf00      	nop
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f003 031f 	and.w	r3, r3, #31
 8009dba:	2201      	movs	r2, #1
 8009dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a1a      	ldr	r2, [r3, #32]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	401a      	ands	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6a1a      	ldr	r2, [r3, #32]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f003 031f 	and.w	r3, r3, #31
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8009de0:	431a      	orrs	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
}
 8009de6:	bf00      	nop
 8009de8:	371c      	adds	r7, #28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e050      	b.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a1c      	ldr	r2, [pc, #112]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d018      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e58:	d013      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a18      	ldr	r2, [pc, #96]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00e      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a16      	ldr	r2, [pc, #88]	; (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d009      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a13      	ldr	r2, [pc, #76]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d10c      	bne.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40010000 	.word	0x40010000
 8009ec0:	40000400 	.word	0x40000400
 8009ec4:	40000800 	.word	0x40000800
 8009ec8:	40000c00 	.word	0x40000c00
 8009ecc:	40014000 	.word	0x40014000

08009ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e03f      	b.n	8009f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7fb f892 	bl	8005048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2224      	movs	r2, #36	; 0x24
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fddb 	bl	800aaf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b08a      	sub	sp, #40	; 0x28
 8009f96:	af02      	add	r7, sp, #8
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	d17c      	bne.n	800a0ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <HAL_UART_Transmit+0x2c>
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e075      	b.n	800a0ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_UART_Transmit+0x3e>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e06e      	b.n	800a0ae <HAL_UART_Transmit+0x11c>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2221      	movs	r2, #33	; 0x21
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe6:	f7fb f9e1 	bl	80053ac <HAL_GetTick>
 8009fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	88fa      	ldrh	r2, [r7, #6]
 8009ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a000:	d108      	bne.n	800a014 <HAL_UART_Transmit+0x82>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e003      	b.n	800a01c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a024:	e02a      	b.n	800a07c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2200      	movs	r2, #0
 800a02e:	2180      	movs	r1, #128	; 0x80
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fb1f 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e036      	b.n	800a0ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	3302      	adds	r3, #2
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e007      	b.n	800a06e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a072:	b29b      	uxth	r3, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1cf      	bne.n	800a026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2200      	movs	r2, #0
 800a08e:	2140      	movs	r1, #64	; 0x40
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 faef 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e006      	b.n	800a0ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e000      	b.n	800a0ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a0ac:	2302      	movs	r3, #2
  }
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3720      	adds	r7, #32
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d11d      	bne.n	800a10c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <HAL_UART_Receive_IT+0x26>
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e016      	b.n	800a10e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_UART_Receive_IT+0x38>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e00f      	b.n	800a10e <HAL_UART_Receive_IT+0x58>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	461a      	mov	r2, r3
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 fb24 	bl	800a750 <UART_Start_Receive_IT>
 800a108:	4603      	mov	r3, r0
 800a10a:	e000      	b.n	800a10e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a10c:	2302      	movs	r3, #2
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b0ba      	sub	sp, #232	; 0xe8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a13e:	2300      	movs	r3, #0
 800a140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a144:	2300      	movs	r3, #0
 800a146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10f      	bne.n	800a17e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <HAL_UART_IRQHandler+0x66>
 800a16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fc03 	bl	800a982 <UART_Receive_IT>
      return;
 800a17c:	e256      	b.n	800a62c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a17e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 80de 	beq.w	800a344 <HAL_UART_IRQHandler+0x22c>
 800a188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a198:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 80d1 	beq.w	800a344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <HAL_UART_IRQHandler+0xae>
 800a1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	f043 0201 	orr.w	r2, r3, #1
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <HAL_UART_IRQHandler+0xd2>
 800a1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d005      	beq.n	800a1ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	f043 0202 	orr.w	r2, r3, #2
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <HAL_UART_IRQHandler+0xf6>
 800a1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	f043 0204 	orr.w	r2, r3, #4
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b00      	cmp	r3, #0
 800a218:	d011      	beq.n	800a23e <HAL_UART_IRQHandler+0x126>
 800a21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f043 0208 	orr.w	r2, r3, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 81ed 	beq.w	800a622 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d008      	beq.n	800a266 <HAL_UART_IRQHandler+0x14e>
 800a254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a258:	f003 0320 	and.w	r3, r3, #32
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fb8e 	bl	800a982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	bf0c      	ite	eq
 800a274:	2301      	moveq	r3, #1
 800a276:	2300      	movne	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d103      	bne.n	800a292 <HAL_UART_IRQHandler+0x17a>
 800a28a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d04f      	beq.n	800a332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa96 	bl	800a7c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a2:	2b40      	cmp	r3, #64	; 0x40
 800a2a4:	d141      	bne.n	800a32a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3314      	adds	r3, #20
 800a2ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1d9      	bne.n	800a2a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d013      	beq.n	800a322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	4a7d      	ldr	r2, [pc, #500]	; (800a4f4 <HAL_UART_IRQHandler+0x3dc>)
 800a300:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a306:	4618      	mov	r0, r3
 800a308:	f7fb fa01 	bl	800570e <HAL_DMA_Abort_IT>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d016      	beq.n	800a340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a320:	e00e      	b.n	800a340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f990 	bl	800a648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a328:	e00a      	b.n	800a340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f98c 	bl	800a648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a330:	e006      	b.n	800a340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f988 	bl	800a648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a33e:	e170      	b.n	800a622 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a340:	bf00      	nop
    return;
 800a342:	e16e      	b.n	800a622 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	2b01      	cmp	r3, #1
 800a34a:	f040 814a 	bne.w	800a5e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a352:	f003 0310 	and.w	r3, r3, #16
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8143 	beq.w	800a5e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 813c 	beq.w	800a5e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a36a:	2300      	movs	r3, #0
 800a36c:	60bb      	str	r3, [r7, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	60bb      	str	r3, [r7, #8]
 800a37e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38a:	2b40      	cmp	r3, #64	; 0x40
 800a38c:	f040 80b4 	bne.w	800a4f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a39c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 8140 	beq.w	800a626 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	f080 8139 	bcs.w	800a626 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c6:	f000 8088 	beq.w	800a4da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a3e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a3f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a40e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1d9      	bne.n	800a3ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3314      	adds	r3, #20
 800a41c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a428:	f023 0301 	bic.w	r3, r3, #1
 800a42c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3314      	adds	r3, #20
 800a436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a43a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a43e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a44c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e1      	bne.n	800a416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3314      	adds	r3, #20
 800a458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3314      	adds	r3, #20
 800a472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a476:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a478:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a47c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e3      	bne.n	800a452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	330c      	adds	r3, #12
 800a49e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a2:	e853 3f00 	ldrex	r3, [r3]
 800a4a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4aa:	f023 0310 	bic.w	r3, r3, #16
 800a4ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	330c      	adds	r3, #12
 800a4b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e3      	bne.n	800a498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fb f8aa 	bl	800562e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f8b6 	bl	800a65c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4f0:	e099      	b.n	800a626 <HAL_UART_IRQHandler+0x50e>
 800a4f2:	bf00      	nop
 800a4f4:	0800a88b 	.word	0x0800a88b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a500:	b29b      	uxth	r3, r3
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 808b 	beq.w	800a62a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 8086 	beq.w	800a62a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	330c      	adds	r3, #12
 800a524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	330c      	adds	r3, #12
 800a53e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a542:	647a      	str	r2, [r7, #68]	; 0x44
 800a544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e3      	bne.n	800a51e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3314      	adds	r3, #20
 800a55c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	623b      	str	r3, [r7, #32]
   return(result);
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	f023 0301 	bic.w	r3, r3, #1
 800a56c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3314      	adds	r3, #20
 800a576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a57a:	633a      	str	r2, [r7, #48]	; 0x30
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e3      	bne.n	800a556 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2220      	movs	r2, #32
 800a592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	330c      	adds	r3, #12
 800a5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0310 	bic.w	r3, r3, #16
 800a5b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	330c      	adds	r3, #12
 800a5bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5c0:	61fa      	str	r2, [r7, #28]
 800a5c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e3      	bne.n	800a59c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f83e 	bl	800a65c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5e0:	e023      	b.n	800a62a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d009      	beq.n	800a602 <HAL_UART_IRQHandler+0x4ea>
 800a5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f959 	bl	800a8b2 <UART_Transmit_IT>
    return;
 800a600:	e014      	b.n	800a62c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00e      	beq.n	800a62c <HAL_UART_IRQHandler+0x514>
 800a60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d008      	beq.n	800a62c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f999 	bl	800a952 <UART_EndTransmit_IT>
    return;
 800a620:	e004      	b.n	800a62c <HAL_UART_IRQHandler+0x514>
    return;
 800a622:	bf00      	nop
 800a624:	e002      	b.n	800a62c <HAL_UART_IRQHandler+0x514>
      return;
 800a626:	bf00      	nop
 800a628:	e000      	b.n	800a62c <HAL_UART_IRQHandler+0x514>
      return;
 800a62a:	bf00      	nop
  }
}
 800a62c:	37e8      	adds	r7, #232	; 0xe8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop

0800a634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b090      	sub	sp, #64	; 0x40
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a684:	e050      	b.n	800a728 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d04c      	beq.n	800a728 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a694:	f7fa fe8a 	bl	80053ac <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d241      	bcs.n	800a728 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	330c      	adds	r3, #12
 800a6c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6c4:	637a      	str	r2, [r7, #52]	; 0x34
 800a6c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3314      	adds	r3, #20
 800a6de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f023 0301 	bic.w	r3, r3, #1
 800a6ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3314      	adds	r3, #20
 800a6f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f8:	623a      	str	r2, [r7, #32]
 800a6fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	69f9      	ldr	r1, [r7, #28]
 800a6fe:	6a3a      	ldr	r2, [r7, #32]
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	61bb      	str	r3, [r7, #24]
   return(result);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e5      	bne.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e00f      	b.n	800a748 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4013      	ands	r3, r2
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	429a      	cmp	r2, r3
 800a736:	bf0c      	ite	eq
 800a738:	2301      	moveq	r3, #1
 800a73a:	2300      	movne	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	461a      	mov	r2, r3
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	429a      	cmp	r2, r3
 800a744:	d09f      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3740      	adds	r7, #64	; 0x40
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	88fa      	ldrh	r2, [r7, #6]
 800a76e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2222      	movs	r2, #34	; 0x22
 800a77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a794:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	695a      	ldr	r2, [r3, #20]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f042 0201 	orr.w	r2, r2, #1
 800a7a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f042 0220 	orr.w	r2, r2, #32
 800a7b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b095      	sub	sp, #84	; 0x54
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	e853 3f00 	ldrex	r3, [r3]
 800a7da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7ec:	643a      	str	r2, [r7, #64]	; 0x40
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7f4:	e841 2300 	strex	r3, r2, [r1]
 800a7f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e5      	bne.n	800a7cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3314      	adds	r3, #20
 800a806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	64bb      	str	r3, [r7, #72]	; 0x48
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3314      	adds	r3, #20
 800a81e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a820:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e5      	bne.n	800a800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d119      	bne.n	800a870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	330c      	adds	r3, #12
 800a842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f023 0310 	bic.w	r3, r3, #16
 800a852:	647b      	str	r3, [r7, #68]	; 0x44
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	330c      	adds	r3, #12
 800a85a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a85c:	61ba      	str	r2, [r7, #24]
 800a85e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6979      	ldr	r1, [r7, #20]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	613b      	str	r3, [r7, #16]
   return(result);
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e5      	bne.n	800a83c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a87e:	bf00      	nop
 800a880:	3754      	adds	r7, #84	; 0x54
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fecf 	bl	800a648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b21      	cmp	r3, #33	; 0x21
 800a8c4:	d13e      	bne.n	800a944 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ce:	d114      	bne.n	800a8fa <UART_Transmit_IT+0x48>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d110      	bne.n	800a8fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	1c9a      	adds	r2, r3, #2
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	621a      	str	r2, [r3, #32]
 800a8f8:	e008      	b.n	800a90c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	1c59      	adds	r1, r3, #1
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	6211      	str	r1, [r2, #32]
 800a904:	781a      	ldrb	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	b29b      	uxth	r3, r3
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4619      	mov	r1, r3
 800a91a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10f      	bne.n	800a940 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a92e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a93e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	e000      	b.n	800a946 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a944:	2302      	movs	r3, #2
  }
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fe5e 	bl	800a634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b08c      	sub	sp, #48	; 0x30
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b22      	cmp	r3, #34	; 0x22
 800a994:	f040 80ab 	bne.w	800aaee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a0:	d117      	bne.n	800a9d2 <UART_Receive_IT+0x50>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d113      	bne.n	800a9d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	1c9a      	adds	r2, r3, #2
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	629a      	str	r2, [r3, #40]	; 0x28
 800a9d0:	e026      	b.n	800aa20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e4:	d007      	beq.n	800a9f6 <UART_Receive_IT+0x74>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10a      	bne.n	800aa04 <UART_Receive_IT+0x82>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	701a      	strb	r2, [r3, #0]
 800aa02:	e008      	b.n	800aa16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d15a      	bne.n	800aaea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0220 	bic.w	r2, r2, #32
 800aa42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	695a      	ldr	r2, [r3, #20]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 0201 	bic.w	r2, r2, #1
 800aa62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2220      	movs	r2, #32
 800aa68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d135      	bne.n	800aae0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	330c      	adds	r3, #12
 800aa80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	613b      	str	r3, [r7, #16]
   return(result);
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f023 0310 	bic.w	r3, r3, #16
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	623a      	str	r2, [r7, #32]
 800aa9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	69f9      	ldr	r1, [r7, #28]
 800aaa0:	6a3a      	ldr	r2, [r7, #32]
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e5      	bne.n	800aa7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0310 	and.w	r3, r3, #16
 800aab8:	2b10      	cmp	r3, #16
 800aaba:	d10a      	bne.n	800aad2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fdbf 	bl	800a65c <HAL_UARTEx_RxEventCallback>
 800aade:	e002      	b.n	800aae6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f7 ff69 	bl	80029b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e002      	b.n	800aaf0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e000      	b.n	800aaf0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aaee:	2302      	movs	r3, #2
  }
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3730      	adds	r7, #48	; 0x30
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aafc:	b0c0      	sub	sp, #256	; 0x100
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	68d9      	ldr	r1, [r3, #12]
 800ab16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	ea40 0301 	orr.w	r3, r0, r1
 800ab20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	431a      	orrs	r2, r3
 800ab38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab50:	f021 010c 	bic.w	r1, r1, #12
 800ab54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab72:	6999      	ldr	r1, [r3, #24]
 800ab74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	ea40 0301 	orr.w	r3, r0, r1
 800ab7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4b8f      	ldr	r3, [pc, #572]	; (800adc4 <UART_SetConfig+0x2cc>)
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d005      	beq.n	800ab98 <UART_SetConfig+0xa0>
 800ab8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	4b8d      	ldr	r3, [pc, #564]	; (800adc8 <UART_SetConfig+0x2d0>)
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d104      	bne.n	800aba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab98:	f7fe f8a2 	bl	8008ce0 <HAL_RCC_GetPCLK2Freq>
 800ab9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aba0:	e003      	b.n	800abaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aba2:	f7fe f889 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800aba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb4:	f040 810c 	bne.w	800add0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800abc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800abca:	4622      	mov	r2, r4
 800abcc:	462b      	mov	r3, r5
 800abce:	1891      	adds	r1, r2, r2
 800abd0:	65b9      	str	r1, [r7, #88]	; 0x58
 800abd2:	415b      	adcs	r3, r3
 800abd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800abda:	4621      	mov	r1, r4
 800abdc:	eb12 0801 	adds.w	r8, r2, r1
 800abe0:	4629      	mov	r1, r5
 800abe2:	eb43 0901 	adc.w	r9, r3, r1
 800abe6:	f04f 0200 	mov.w	r2, #0
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abfa:	4690      	mov	r8, r2
 800abfc:	4699      	mov	r9, r3
 800abfe:	4623      	mov	r3, r4
 800ac00:	eb18 0303 	adds.w	r3, r8, r3
 800ac04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac08:	462b      	mov	r3, r5
 800ac0a:	eb49 0303 	adc.w	r3, r9, r3
 800ac0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ac22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac26:	460b      	mov	r3, r1
 800ac28:	18db      	adds	r3, r3, r3
 800ac2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	eb42 0303 	adc.w	r3, r2, r3
 800ac32:	657b      	str	r3, [r7, #84]	; 0x54
 800ac34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ac38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac3c:	f7f6 f880 	bl	8000d40 <__aeabi_uldivmod>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4b61      	ldr	r3, [pc, #388]	; (800adcc <UART_SetConfig+0x2d4>)
 800ac46:	fba3 2302 	umull	r2, r3, r3, r2
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	011c      	lsls	r4, r3, #4
 800ac4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac60:	4642      	mov	r2, r8
 800ac62:	464b      	mov	r3, r9
 800ac64:	1891      	adds	r1, r2, r2
 800ac66:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac68:	415b      	adcs	r3, r3
 800ac6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac70:	4641      	mov	r1, r8
 800ac72:	eb12 0a01 	adds.w	sl, r2, r1
 800ac76:	4649      	mov	r1, r9
 800ac78:	eb43 0b01 	adc.w	fp, r3, r1
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac90:	4692      	mov	sl, r2
 800ac92:	469b      	mov	fp, r3
 800ac94:	4643      	mov	r3, r8
 800ac96:	eb1a 0303 	adds.w	r3, sl, r3
 800ac9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac9e:	464b      	mov	r3, r9
 800aca0:	eb4b 0303 	adc.w	r3, fp, r3
 800aca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800acb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800acbc:	460b      	mov	r3, r1
 800acbe:	18db      	adds	r3, r3, r3
 800acc0:	643b      	str	r3, [r7, #64]	; 0x40
 800acc2:	4613      	mov	r3, r2
 800acc4:	eb42 0303 	adc.w	r3, r2, r3
 800acc8:	647b      	str	r3, [r7, #68]	; 0x44
 800acca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800acce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800acd2:	f7f6 f835 	bl	8000d40 <__aeabi_uldivmod>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	4b3b      	ldr	r3, [pc, #236]	; (800adcc <UART_SetConfig+0x2d4>)
 800acde:	fba3 2301 	umull	r2, r3, r3, r1
 800ace2:	095b      	lsrs	r3, r3, #5
 800ace4:	2264      	movs	r2, #100	; 0x64
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	1acb      	subs	r3, r1, r3
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800acf2:	4b36      	ldr	r3, [pc, #216]	; (800adcc <UART_SetConfig+0x2d4>)
 800acf4:	fba3 2302 	umull	r2, r3, r3, r2
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad00:	441c      	add	r4, r3
 800ad02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	1891      	adds	r1, r2, r2
 800ad1a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad1c:	415b      	adcs	r3, r3
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad24:	4641      	mov	r1, r8
 800ad26:	1851      	adds	r1, r2, r1
 800ad28:	6339      	str	r1, [r7, #48]	; 0x30
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	414b      	adcs	r3, r1
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad30:	f04f 0200 	mov.w	r2, #0
 800ad34:	f04f 0300 	mov.w	r3, #0
 800ad38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ad3c:	4659      	mov	r1, fp
 800ad3e:	00cb      	lsls	r3, r1, #3
 800ad40:	4651      	mov	r1, sl
 800ad42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad46:	4651      	mov	r1, sl
 800ad48:	00ca      	lsls	r2, r1, #3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4603      	mov	r3, r0
 800ad50:	4642      	mov	r2, r8
 800ad52:	189b      	adds	r3, r3, r2
 800ad54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad58:	464b      	mov	r3, r9
 800ad5a:	460a      	mov	r2, r1
 800ad5c:	eb42 0303 	adc.w	r3, r2, r3
 800ad60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad78:	460b      	mov	r3, r1
 800ad7a:	18db      	adds	r3, r3, r3
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad7e:	4613      	mov	r3, r2
 800ad80:	eb42 0303 	adc.w	r3, r2, r3
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad8e:	f7f5 ffd7 	bl	8000d40 <__aeabi_uldivmod>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <UART_SetConfig+0x2d4>)
 800ad98:	fba3 1302 	umull	r1, r3, r3, r2
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	2164      	movs	r1, #100	; 0x64
 800ada0:	fb01 f303 	mul.w	r3, r1, r3
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	3332      	adds	r3, #50	; 0x32
 800adaa:	4a08      	ldr	r2, [pc, #32]	; (800adcc <UART_SetConfig+0x2d4>)
 800adac:	fba2 2303 	umull	r2, r3, r2, r3
 800adb0:	095b      	lsrs	r3, r3, #5
 800adb2:	f003 0207 	and.w	r2, r3, #7
 800adb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4422      	add	r2, r4
 800adbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800adc0:	e105      	b.n	800afce <UART_SetConfig+0x4d6>
 800adc2:	bf00      	nop
 800adc4:	40011000 	.word	0x40011000
 800adc8:	40011400 	.word	0x40011400
 800adcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800add0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800add4:	2200      	movs	r2, #0
 800add6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800adde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ade2:	4642      	mov	r2, r8
 800ade4:	464b      	mov	r3, r9
 800ade6:	1891      	adds	r1, r2, r2
 800ade8:	6239      	str	r1, [r7, #32]
 800adea:	415b      	adcs	r3, r3
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
 800adee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adf2:	4641      	mov	r1, r8
 800adf4:	1854      	adds	r4, r2, r1
 800adf6:	4649      	mov	r1, r9
 800adf8:	eb43 0501 	adc.w	r5, r3, r1
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	00eb      	lsls	r3, r5, #3
 800ae06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae0a:	00e2      	lsls	r2, r4, #3
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	461d      	mov	r5, r3
 800ae10:	4643      	mov	r3, r8
 800ae12:	18e3      	adds	r3, r4, r3
 800ae14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae18:	464b      	mov	r3, r9
 800ae1a:	eb45 0303 	adc.w	r3, r5, r3
 800ae1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae32:	f04f 0200 	mov.w	r2, #0
 800ae36:	f04f 0300 	mov.w	r3, #0
 800ae3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ae3e:	4629      	mov	r1, r5
 800ae40:	008b      	lsls	r3, r1, #2
 800ae42:	4621      	mov	r1, r4
 800ae44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae48:	4621      	mov	r1, r4
 800ae4a:	008a      	lsls	r2, r1, #2
 800ae4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae50:	f7f5 ff76 	bl	8000d40 <__aeabi_uldivmod>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4b60      	ldr	r3, [pc, #384]	; (800afdc <UART_SetConfig+0x4e4>)
 800ae5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae5e:	095b      	lsrs	r3, r3, #5
 800ae60:	011c      	lsls	r4, r3, #4
 800ae62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	1891      	adds	r1, r2, r2
 800ae7a:	61b9      	str	r1, [r7, #24]
 800ae7c:	415b      	adcs	r3, r3
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae84:	4641      	mov	r1, r8
 800ae86:	1851      	adds	r1, r2, r1
 800ae88:	6139      	str	r1, [r7, #16]
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	414b      	adcs	r3, r1
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	f04f 0200 	mov.w	r2, #0
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae9c:	4659      	mov	r1, fp
 800ae9e:	00cb      	lsls	r3, r1, #3
 800aea0:	4651      	mov	r1, sl
 800aea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aea6:	4651      	mov	r1, sl
 800aea8:	00ca      	lsls	r2, r1, #3
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4619      	mov	r1, r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	189b      	adds	r3, r3, r2
 800aeb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeb8:	464b      	mov	r3, r9
 800aeba:	460a      	mov	r2, r1
 800aebc:	eb42 0303 	adc.w	r3, r2, r3
 800aec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	67bb      	str	r3, [r7, #120]	; 0x78
 800aece:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	f04f 0300 	mov.w	r3, #0
 800aed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aedc:	4649      	mov	r1, r9
 800aede:	008b      	lsls	r3, r1, #2
 800aee0:	4641      	mov	r1, r8
 800aee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aee6:	4641      	mov	r1, r8
 800aee8:	008a      	lsls	r2, r1, #2
 800aeea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aeee:	f7f5 ff27 	bl	8000d40 <__aeabi_uldivmod>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4b39      	ldr	r3, [pc, #228]	; (800afdc <UART_SetConfig+0x4e4>)
 800aef8:	fba3 1302 	umull	r1, r3, r3, r2
 800aefc:	095b      	lsrs	r3, r3, #5
 800aefe:	2164      	movs	r1, #100	; 0x64
 800af00:	fb01 f303 	mul.w	r3, r1, r3
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	3332      	adds	r3, #50	; 0x32
 800af0a:	4a34      	ldr	r2, [pc, #208]	; (800afdc <UART_SetConfig+0x4e4>)
 800af0c:	fba2 2303 	umull	r2, r3, r2, r3
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af16:	441c      	add	r4, r3
 800af18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af1c:	2200      	movs	r2, #0
 800af1e:	673b      	str	r3, [r7, #112]	; 0x70
 800af20:	677a      	str	r2, [r7, #116]	; 0x74
 800af22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af26:	4642      	mov	r2, r8
 800af28:	464b      	mov	r3, r9
 800af2a:	1891      	adds	r1, r2, r2
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	415b      	adcs	r3, r3
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af36:	4641      	mov	r1, r8
 800af38:	1851      	adds	r1, r2, r1
 800af3a:	6039      	str	r1, [r7, #0]
 800af3c:	4649      	mov	r1, r9
 800af3e:	414b      	adcs	r3, r1
 800af40:	607b      	str	r3, [r7, #4]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af4e:	4659      	mov	r1, fp
 800af50:	00cb      	lsls	r3, r1, #3
 800af52:	4651      	mov	r1, sl
 800af54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af58:	4651      	mov	r1, sl
 800af5a:	00ca      	lsls	r2, r1, #3
 800af5c:	4610      	mov	r0, r2
 800af5e:	4619      	mov	r1, r3
 800af60:	4603      	mov	r3, r0
 800af62:	4642      	mov	r2, r8
 800af64:	189b      	adds	r3, r3, r2
 800af66:	66bb      	str	r3, [r7, #104]	; 0x68
 800af68:	464b      	mov	r3, r9
 800af6a:	460a      	mov	r2, r1
 800af6c:	eb42 0303 	adc.w	r3, r2, r3
 800af70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	663b      	str	r3, [r7, #96]	; 0x60
 800af7c:	667a      	str	r2, [r7, #100]	; 0x64
 800af7e:	f04f 0200 	mov.w	r2, #0
 800af82:	f04f 0300 	mov.w	r3, #0
 800af86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af8a:	4649      	mov	r1, r9
 800af8c:	008b      	lsls	r3, r1, #2
 800af8e:	4641      	mov	r1, r8
 800af90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af94:	4641      	mov	r1, r8
 800af96:	008a      	lsls	r2, r1, #2
 800af98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af9c:	f7f5 fed0 	bl	8000d40 <__aeabi_uldivmod>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <UART_SetConfig+0x4e4>)
 800afa6:	fba3 1302 	umull	r1, r3, r3, r2
 800afaa:	095b      	lsrs	r3, r3, #5
 800afac:	2164      	movs	r1, #100	; 0x64
 800afae:	fb01 f303 	mul.w	r3, r1, r3
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	3332      	adds	r3, #50	; 0x32
 800afb8:	4a08      	ldr	r2, [pc, #32]	; (800afdc <UART_SetConfig+0x4e4>)
 800afba:	fba2 2303 	umull	r2, r3, r2, r3
 800afbe:	095b      	lsrs	r3, r3, #5
 800afc0:	f003 020f 	and.w	r2, r3, #15
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4422      	add	r2, r4
 800afcc:	609a      	str	r2, [r3, #8]
}
 800afce:	bf00      	nop
 800afd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800afd4:	46bd      	mov	sp, r7
 800afd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afda:	bf00      	nop
 800afdc:	51eb851f 	.word	0x51eb851f

0800afe0 <__libc_init_array>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4d0d      	ldr	r5, [pc, #52]	; (800b018 <__libc_init_array+0x38>)
 800afe4:	4c0d      	ldr	r4, [pc, #52]	; (800b01c <__libc_init_array+0x3c>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	2600      	movs	r6, #0
 800afec:	42a6      	cmp	r6, r4
 800afee:	d109      	bne.n	800b004 <__libc_init_array+0x24>
 800aff0:	4d0b      	ldr	r5, [pc, #44]	; (800b020 <__libc_init_array+0x40>)
 800aff2:	4c0c      	ldr	r4, [pc, #48]	; (800b024 <__libc_init_array+0x44>)
 800aff4:	f000 f820 	bl	800b038 <_init>
 800aff8:	1b64      	subs	r4, r4, r5
 800affa:	10a4      	asrs	r4, r4, #2
 800affc:	2600      	movs	r6, #0
 800affe:	42a6      	cmp	r6, r4
 800b000:	d105      	bne.n	800b00e <__libc_init_array+0x2e>
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	f855 3b04 	ldr.w	r3, [r5], #4
 800b008:	4798      	blx	r3
 800b00a:	3601      	adds	r6, #1
 800b00c:	e7ee      	b.n	800afec <__libc_init_array+0xc>
 800b00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b012:	4798      	blx	r3
 800b014:	3601      	adds	r6, #1
 800b016:	e7f2      	b.n	800affe <__libc_init_array+0x1e>
 800b018:	0800b070 	.word	0x0800b070
 800b01c:	0800b070 	.word	0x0800b070
 800b020:	0800b070 	.word	0x0800b070
 800b024:	0800b074 	.word	0x0800b074

0800b028 <memset>:
 800b028:	4402      	add	r2, r0
 800b02a:	4603      	mov	r3, r0
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d100      	bne.n	800b032 <memset+0xa>
 800b030:	4770      	bx	lr
 800b032:	f803 1b01 	strb.w	r1, [r3], #1
 800b036:	e7f9      	b.n	800b02c <memset+0x4>

0800b038 <_init>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	bf00      	nop
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr

0800b044 <_fini>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr
