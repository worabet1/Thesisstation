
ThesisStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e09c  0800e09c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e09c  0800e09c  0001e09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0a4  0800e0a4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0a4  0800e0a4  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0a8  0800e0a8  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800e0ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  200000c8  0800e170  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800e170  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d2e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bf  00000000  00000000  00035e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000386e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  000399d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019356  00000000  00000000  0003abe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016957  00000000  00000000  00053f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fac9  00000000  00000000  0006a895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a35e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  0010a3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800deb8 	.word	0x0800deb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	0800deb8 	.word	0x0800deb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b974 	b.w	8001178 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f806 	bl	8000ea8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__udivmoddi4>:
 8000ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	9d08      	ldr	r5, [sp, #32]
 8000eae:	4604      	mov	r4, r0
 8000eb0:	468e      	mov	lr, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d14d      	bne.n	8000f52 <__udivmoddi4+0xaa>
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	4694      	mov	ip, r2
 8000eba:	d969      	bls.n	8000f90 <__udivmoddi4+0xe8>
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b152      	cbz	r2, 8000ed8 <__udivmoddi4+0x30>
 8000ec2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec6:	f1c2 0120 	rsb	r1, r2, #32
 8000eca:	fa20 f101 	lsr.w	r1, r0, r1
 8000ece:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ed6:	4094      	lsls	r4, r2
 8000ed8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000edc:	0c21      	lsrs	r1, r4, #16
 8000ede:	fbbe f6f8 	udiv	r6, lr, r8
 8000ee2:	fa1f f78c 	uxth.w	r7, ip
 8000ee6:	fb08 e316 	mls	r3, r8, r6, lr
 8000eea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eee:	fb06 f107 	mul.w	r1, r6, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d90a      	bls.n	8000f0c <__udivmoddi4+0x64>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000efe:	f080 811f 	bcs.w	8001140 <__udivmoddi4+0x298>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 811c 	bls.w	8001140 <__udivmoddi4+0x298>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3310 	mls	r3, r8, r0, r3
 8000f18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f1c:	fb00 f707 	mul.w	r7, r0, r7
 8000f20:	42a7      	cmp	r7, r4
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x92>
 8000f24:	eb1c 0404 	adds.w	r4, ip, r4
 8000f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f2c:	f080 810a 	bcs.w	8001144 <__udivmoddi4+0x29c>
 8000f30:	42a7      	cmp	r7, r4
 8000f32:	f240 8107 	bls.w	8001144 <__udivmoddi4+0x29c>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3e:	1be4      	subs	r4, r4, r7
 8000f40:	2600      	movs	r6, #0
 8000f42:	b11d      	cbz	r5, 8000f4c <__udivmoddi4+0xa4>
 8000f44:	40d4      	lsrs	r4, r2
 8000f46:	2300      	movs	r3, #0
 8000f48:	e9c5 4300 	strd	r4, r3, [r5]
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d909      	bls.n	8000f6a <__udivmoddi4+0xc2>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	f000 80ef 	beq.w	800113a <__udivmoddi4+0x292>
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000f62:	4630      	mov	r0, r6
 8000f64:	4631      	mov	r1, r6
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	fab3 f683 	clz	r6, r3
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d14a      	bne.n	8001008 <__udivmoddi4+0x160>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xd4>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 80f9 	bhi.w	800116e <__udivmoddi4+0x2c6>
 8000f7c:	1a84      	subs	r4, r0, r2
 8000f7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	469e      	mov	lr, r3
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d0e0      	beq.n	8000f4c <__udivmoddi4+0xa4>
 8000f8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f8e:	e7dd      	b.n	8000f4c <__udivmoddi4+0xa4>
 8000f90:	b902      	cbnz	r2, 8000f94 <__udivmoddi4+0xec>
 8000f92:	deff      	udf	#255	; 0xff
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	f040 8092 	bne.w	80010c2 <__udivmoddi4+0x21a>
 8000f9e:	eba1 010c 	sub.w	r1, r1, ip
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f fe8c 	uxth.w	lr, ip
 8000faa:	2601      	movs	r6, #1
 8000fac:	0c20      	lsrs	r0, r4, #16
 8000fae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000fb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fba:	fb0e f003 	mul.w	r0, lr, r3
 8000fbe:	4288      	cmp	r0, r1
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x12c>
 8000fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fca:	d202      	bcs.n	8000fd2 <__udivmoddi4+0x12a>
 8000fcc:	4288      	cmp	r0, r1
 8000fce:	f200 80cb 	bhi.w	8001168 <__udivmoddi4+0x2c0>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	1a09      	subs	r1, r1, r0
 8000fd6:	b2a4      	uxth	r4, r4
 8000fd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fe4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x156>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ff4:	d202      	bcs.n	8000ffc <__udivmoddi4+0x154>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	f200 80bb 	bhi.w	8001172 <__udivmoddi4+0x2ca>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	eba4 040e 	sub.w	r4, r4, lr
 8001002:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001006:	e79c      	b.n	8000f42 <__udivmoddi4+0x9a>
 8001008:	f1c6 0720 	rsb	r7, r6, #32
 800100c:	40b3      	lsls	r3, r6
 800100e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001012:	ea4c 0c03 	orr.w	ip, ip, r3
 8001016:	fa20 f407 	lsr.w	r4, r0, r7
 800101a:	fa01 f306 	lsl.w	r3, r1, r6
 800101e:	431c      	orrs	r4, r3
 8001020:	40f9      	lsrs	r1, r7
 8001022:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001026:	fa00 f306 	lsl.w	r3, r0, r6
 800102a:	fbb1 f8f9 	udiv	r8, r1, r9
 800102e:	0c20      	lsrs	r0, r4, #16
 8001030:	fa1f fe8c 	uxth.w	lr, ip
 8001034:	fb09 1118 	mls	r1, r9, r8, r1
 8001038:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800103c:	fb08 f00e 	mul.w	r0, r8, lr
 8001040:	4288      	cmp	r0, r1
 8001042:	fa02 f206 	lsl.w	r2, r2, r6
 8001046:	d90b      	bls.n	8001060 <__udivmoddi4+0x1b8>
 8001048:	eb1c 0101 	adds.w	r1, ip, r1
 800104c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001050:	f080 8088 	bcs.w	8001164 <__udivmoddi4+0x2bc>
 8001054:	4288      	cmp	r0, r1
 8001056:	f240 8085 	bls.w	8001164 <__udivmoddi4+0x2bc>
 800105a:	f1a8 0802 	sub.w	r8, r8, #2
 800105e:	4461      	add	r1, ip
 8001060:	1a09      	subs	r1, r1, r0
 8001062:	b2a4      	uxth	r4, r4
 8001064:	fbb1 f0f9 	udiv	r0, r1, r9
 8001068:	fb09 1110 	mls	r1, r9, r0, r1
 800106c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001070:	fb00 fe0e 	mul.w	lr, r0, lr
 8001074:	458e      	cmp	lr, r1
 8001076:	d908      	bls.n	800108a <__udivmoddi4+0x1e2>
 8001078:	eb1c 0101 	adds.w	r1, ip, r1
 800107c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001080:	d26c      	bcs.n	800115c <__udivmoddi4+0x2b4>
 8001082:	458e      	cmp	lr, r1
 8001084:	d96a      	bls.n	800115c <__udivmoddi4+0x2b4>
 8001086:	3802      	subs	r0, #2
 8001088:	4461      	add	r1, ip
 800108a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800108e:	fba0 9402 	umull	r9, r4, r0, r2
 8001092:	eba1 010e 	sub.w	r1, r1, lr
 8001096:	42a1      	cmp	r1, r4
 8001098:	46c8      	mov	r8, r9
 800109a:	46a6      	mov	lr, r4
 800109c:	d356      	bcc.n	800114c <__udivmoddi4+0x2a4>
 800109e:	d053      	beq.n	8001148 <__udivmoddi4+0x2a0>
 80010a0:	b15d      	cbz	r5, 80010ba <__udivmoddi4+0x212>
 80010a2:	ebb3 0208 	subs.w	r2, r3, r8
 80010a6:	eb61 010e 	sbc.w	r1, r1, lr
 80010aa:	fa01 f707 	lsl.w	r7, r1, r7
 80010ae:	fa22 f306 	lsr.w	r3, r2, r6
 80010b2:	40f1      	lsrs	r1, r6
 80010b4:	431f      	orrs	r7, r3
 80010b6:	e9c5 7100 	strd	r7, r1, [r5]
 80010ba:	2600      	movs	r6, #0
 80010bc:	4631      	mov	r1, r6
 80010be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c2:	f1c2 0320 	rsb	r3, r2, #32
 80010c6:	40d8      	lsrs	r0, r3
 80010c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010cc:	fa21 f303 	lsr.w	r3, r1, r3
 80010d0:	4091      	lsls	r1, r2
 80010d2:	4301      	orrs	r1, r0
 80010d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d8:	fa1f fe8c 	uxth.w	lr, ip
 80010dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e0:	fb07 3610 	mls	r6, r7, r0, r3
 80010e4:	0c0b      	lsrs	r3, r1, #16
 80010e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010ea:	fb00 f60e 	mul.w	r6, r0, lr
 80010ee:	429e      	cmp	r6, r3
 80010f0:	fa04 f402 	lsl.w	r4, r4, r2
 80010f4:	d908      	bls.n	8001108 <__udivmoddi4+0x260>
 80010f6:	eb1c 0303 	adds.w	r3, ip, r3
 80010fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80010fe:	d22f      	bcs.n	8001160 <__udivmoddi4+0x2b8>
 8001100:	429e      	cmp	r6, r3
 8001102:	d92d      	bls.n	8001160 <__udivmoddi4+0x2b8>
 8001104:	3802      	subs	r0, #2
 8001106:	4463      	add	r3, ip
 8001108:	1b9b      	subs	r3, r3, r6
 800110a:	b289      	uxth	r1, r1
 800110c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001110:	fb07 3316 	mls	r3, r7, r6, r3
 8001114:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001118:	fb06 f30e 	mul.w	r3, r6, lr
 800111c:	428b      	cmp	r3, r1
 800111e:	d908      	bls.n	8001132 <__udivmoddi4+0x28a>
 8001120:	eb1c 0101 	adds.w	r1, ip, r1
 8001124:	f106 38ff 	add.w	r8, r6, #4294967295
 8001128:	d216      	bcs.n	8001158 <__udivmoddi4+0x2b0>
 800112a:	428b      	cmp	r3, r1
 800112c:	d914      	bls.n	8001158 <__udivmoddi4+0x2b0>
 800112e:	3e02      	subs	r6, #2
 8001130:	4461      	add	r1, ip
 8001132:	1ac9      	subs	r1, r1, r3
 8001134:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001138:	e738      	b.n	8000fac <__udivmoddi4+0x104>
 800113a:	462e      	mov	r6, r5
 800113c:	4628      	mov	r0, r5
 800113e:	e705      	b.n	8000f4c <__udivmoddi4+0xa4>
 8001140:	4606      	mov	r6, r0
 8001142:	e6e3      	b.n	8000f0c <__udivmoddi4+0x64>
 8001144:	4618      	mov	r0, r3
 8001146:	e6f8      	b.n	8000f3a <__udivmoddi4+0x92>
 8001148:	454b      	cmp	r3, r9
 800114a:	d2a9      	bcs.n	80010a0 <__udivmoddi4+0x1f8>
 800114c:	ebb9 0802 	subs.w	r8, r9, r2
 8001150:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001154:	3801      	subs	r0, #1
 8001156:	e7a3      	b.n	80010a0 <__udivmoddi4+0x1f8>
 8001158:	4646      	mov	r6, r8
 800115a:	e7ea      	b.n	8001132 <__udivmoddi4+0x28a>
 800115c:	4620      	mov	r0, r4
 800115e:	e794      	b.n	800108a <__udivmoddi4+0x1e2>
 8001160:	4640      	mov	r0, r8
 8001162:	e7d1      	b.n	8001108 <__udivmoddi4+0x260>
 8001164:	46d0      	mov	r8, sl
 8001166:	e77b      	b.n	8001060 <__udivmoddi4+0x1b8>
 8001168:	3b02      	subs	r3, #2
 800116a:	4461      	add	r1, ip
 800116c:	e732      	b.n	8000fd4 <__udivmoddi4+0x12c>
 800116e:	4630      	mov	r0, r6
 8001170:	e709      	b.n	8000f86 <__udivmoddi4+0xde>
 8001172:	4464      	add	r4, ip
 8001174:	3802      	subs	r0, #2
 8001176:	e742      	b.n	8000ffe <__udivmoddi4+0x156>

08001178 <__aeabi_idiv0>:
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <AutoFox_INA226_Constructor>:
const int      cMaxSampleAvgTblIdx          = 7;    //occupies 3 bit positions
const int      cMaxConvTimeTblIdx           = 7; //occupies 3 bit positions
//=============================================================================

void AutoFox_INA226_Constructor(AutoFox_INA226* this)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	this->mInitialized = false;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	this->mI2C_Address = INA226_DEFAULT_I2C_ADDRESS;
 800118a:	2240      	movs	r2, #64	; 0x40
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	705a      	strb	r2, [r3, #1]
	this->mConfigRegister = 0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	805a      	strh	r2, [r3, #2]
	this->mCalibrationValue = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	809a      	strh	r2, [r3, #4]
	this->mCurrentMicroAmpsPerBit = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
	this->mPowerMicroWattPerBit = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <AutoFox_INA226_Init>:

//----------------------------------------------------------------------------
status AutoFox_INA226_Init(AutoFox_INA226* this, uint8_t aI2C_Address, double aShuntResistor_Ohms, double aMaxCurrent_Amps)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6178      	str	r0, [r7, #20]
 80011bc:	460b      	mov	r3, r1
 80011be:	ed87 0b02 	vstr	d0, [r7, #8]
 80011c2:	ed87 1b00 	vstr	d1, [r7]
 80011c6:	74fb      	strb	r3, [r7, #19]
	this->mInitialized = false;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

	//Check if there's a device (any I2C device) at the specified address.
	CALL_FN( AutoFox_INA226_CheckI2cAddress(aI2C_Address) );
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f929 	bl	8001428 <AutoFox_INA226_CheckI2cAddress>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011dc:	7cfb      	ldrb	r3, [r7, #19]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f922 	bl	8001428 <AutoFox_INA226_CheckI2cAddress>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <AutoFox_INA226_Init+0x3c>
 80011ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011ee:	e0a9      	b.n	8001344 <AutoFox_INA226_Init+0x190>

	//Good so far, check that it's an INA226 device at the specified address.
	uint16_t theINA226_ID;
	CALL_FN( AutoFox_INA226_ReadRegister(this,INA226_MANUFACTURER_ID, &theINA226_ID) );
 80011f0:	21fe      	movs	r1, #254	; 0xfe
 80011f2:	f107 031e 	add.w	r3, r7, #30
 80011f6:	461a      	mov	r2, r3
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f000 f931 	bl	8001460 <AutoFox_INA226_ReadRegister>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001204:	21fe      	movs	r1, #254	; 0xfe
 8001206:	f107 031e 	add.w	r3, r7, #30
 800120a:	461a      	mov	r2, r3
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f000 f927 	bl	8001460 <AutoFox_INA226_ReadRegister>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <AutoFox_INA226_Init+0x6a>
 8001218:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800121c:	e092      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	if(theINA226_ID != INA226_MANUFACTURER_ID_K){
 800121e:	8bfb      	ldrh	r3, [r7, #30]
 8001220:	f245 4249 	movw	r2, #21577	; 0x5449
 8001224:	4293      	cmp	r3, r2
 8001226:	d002      	beq.n	800122e <AutoFox_INA226_Init+0x7a>
		return INA226_TI_ID_MISMATCH; //Expected to find TI manufacturer ID
 8001228:	f06f 0301 	mvn.w	r3, #1
 800122c:	e08a      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	}
	CALL_FN( AutoFox_INA226_ReadRegister(this,INA226_DIE_ID, &theINA226_ID) );
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	f107 031e 	add.w	r3, r7, #30
 8001234:	461a      	mov	r2, r3
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f000 f912 	bl	8001460 <AutoFox_INA226_ReadRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	f107 031e 	add.w	r3, r7, #30
 8001248:	461a      	mov	r2, r3
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f000 f908 	bl	8001460 <AutoFox_INA226_ReadRegister>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <AutoFox_INA226_Init+0xa8>
 8001256:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800125a:	e073      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	if( theINA226_ID != INA226_DIE_ID_K){
 800125c:	8bfb      	ldrh	r3, [r7, #30]
 800125e:	f242 2260 	movw	r2, #8800	; 0x2260
 8001262:	4293      	cmp	r3, r2
 8001264:	d002      	beq.n	800126c <AutoFox_INA226_Init+0xb8>
		return  INA226_DIE_ID_MISMATCH; //Expected to find INA226 device ID
 8001266:	f06f 0302 	mvn.w	r3, #2
 800126a:	e06b      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	}

	this->mI2C_Address = aI2C_Address;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	7cfa      	ldrb	r2, [r7, #19]
 8001270:	705a      	strb	r2, [r3, #1]

	//Reset the INA226 device
	CALL_FN( AutoFox_INA226_WriteRegister(this,INA226_CONFIG, cResetCommand) );
 8001272:	2300      	movs	r3, #0
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	4619      	mov	r1, r3
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f000 f938 	bl	80014f0 <AutoFox_INA226_WriteRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001286:	2300      	movs	r3, #0
 8001288:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800128c:	4619      	mov	r1, r3
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f000 f92e 	bl	80014f0 <AutoFox_INA226_WriteRegister>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <AutoFox_INA226_Init+0xec>
 800129a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800129e:	e051      	b.n	8001344 <AutoFox_INA226_Init+0x190>

	//Now set our own default configuration (you can redefine this constant in the header, as needed)
	CALL_FN( AutoFox_INA226_WriteRegister(this,INA226_CONFIG, INA226_CONFIG_DEFAULT) );
 80012a0:	2300      	movs	r3, #0
 80012a2:	f244 5227 	movw	r2, #17703	; 0x4527
 80012a6:	4619      	mov	r1, r3
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f000 f921 	bl	80014f0 <AutoFox_INA226_WriteRegister>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80012b4:	2300      	movs	r3, #0
 80012b6:	f244 5227 	movw	r2, #17703	; 0x4527
 80012ba:	4619      	mov	r1, r3
 80012bc:	6978      	ldr	r0, [r7, #20]
 80012be:	f000 f917 	bl	80014f0 <AutoFox_INA226_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <AutoFox_INA226_Init+0x11a>
 80012c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80012cc:	e03a      	b.n	8001344 <AutoFox_INA226_Init+0x190>

	//Read back the configuration register and check that it matches
	CALL_FN( AutoFox_INA226_ReadRegister(this,INA226_CONFIG, &(this->mConfigRegister)) );
 80012ce:	2100      	movs	r1, #0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3302      	adds	r3, #2
 80012d4:	461a      	mov	r2, r3
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f000 f8c2 	bl	8001460 <AutoFox_INA226_ReadRegister>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80012e2:	2100      	movs	r1, #0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3302      	adds	r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f000 f8b8 	bl	8001460 <AutoFox_INA226_ReadRegister>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <AutoFox_INA226_Init+0x148>
 80012f6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80012fa:	e023      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	if(this->mConfigRegister != INA226_CONFIG_DEFAULT){
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	885b      	ldrh	r3, [r3, #2]
 8001300:	f244 5227 	movw	r2, #17703	; 0x4527
 8001304:	4293      	cmp	r3, r2
 8001306:	d002      	beq.n	800130e <AutoFox_INA226_Init+0x15a>
		return CONFIG_ERROR;
 8001308:	f06f 0303 	mvn.w	r3, #3
 800130c:	e01a      	b.n	8001344 <AutoFox_INA226_Init+0x190>
	}

	//Finally, set up the calibration register - this will also calculate the scaling
	//factors that we must apply to the current and power measurements that we read from
	//the INA226 device.
	CALL_FN( AutoFox_INA226_setupCalibration(this, aShuntResistor_Ohms, aMaxCurrent_Amps) );
 800130e:	ed97 1b00 	vldr	d1, [r7]
 8001312:	ed97 0b02 	vldr	d0, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f000 f81a 	bl	8001350 <AutoFox_INA226_setupCalibration>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001322:	ed97 1b00 	vldr	d1, [r7]
 8001326:	ed97 0b02 	vldr	d0, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f000 f810 	bl	8001350 <AutoFox_INA226_setupCalibration>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <AutoFox_INA226_Init+0x188>
 8001336:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800133a:	e003      	b.n	8001344 <AutoFox_INA226_Init+0x190>

	this->mInitialized = true;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
	return OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	0000      	movs	r0, r0
	...

08001350 <AutoFox_INA226_setupCalibration>:
//----------------------------------------------------------------------------

status AutoFox_INA226_setupCalibration(AutoFox_INA226* this, double aShuntResistor_Ohms, double aMaxCurrent_Amps)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6178      	str	r0, [r7, #20]
 8001358:	ed87 0b02 	vstr	d0, [r7, #8]
 800135c:	ed87 1b00 	vstr	d1, [r7]
	// we can calculate the Amps per bit as aMaxCurrent_Amps/32767 (rounded up to
	// to the nearest integer).
	// The value 0.00512 in the calculations below comes from the INA226 spec which
	// provides a definition of the formula that's used to calculate the calibration value.

	double theCurrentLSB = ceil( ( aMaxCurrent_Amps * 1000000.0) / (double)32767.0);
 8001360:	a32b      	add	r3, pc, #172	; (adr r3, 8001410 <AutoFox_INA226_setupCalibration+0xc0>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136a:	f7ff f945 	bl	80005f8 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	a328      	add	r3, pc, #160	; (adr r3, 8001418 <AutoFox_INA226_setupCalibration+0xc8>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa66 	bl	800084c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b17 	vmov	d7, r2, r3
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	f00c fd0e 	bl	800ddb0 <ceil>
 8001394:	ed87 0b08 	vstr	d0, [r7, #32]
	double theCal = (double)0.00521 /  (aShuntResistor_Ohms * (theCurrentLSB/1000000.0));
 8001398:	a31d      	add	r3, pc, #116	; (adr r3, 8001410 <AutoFox_INA226_setupCalibration+0xc0>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a2:	f7ff fa53 	bl	800084c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	a119      	add	r1, pc, #100	; (adr r1, 8001420 <AutoFox_INA226_setupCalibration+0xd0>)
 80013bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013c0:	f7ff fa44 	bl	800084c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	e9c7 2306 	strd	r2, r3, [r7, #24]

	this->mCurrentMicroAmpsPerBit = ((int32_t)theCurrentLSB);
 80013cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013d0:	f7ff fbac 	bl	8000b2c <__aeabi_d2iz>
 80013d4:	4602      	mov	r2, r0
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	609a      	str	r2, [r3, #8]
	this->mCalibrationValue = (uint16_t)theCal;
 80013da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013de:	f7ff fbcd 	bl	8000b7c <__aeabi_d2uiz>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	809a      	strh	r2, [r3, #4]
	this->mPowerMicroWattPerBit = this->mCurrentMicroAmpsPerBit * INA226_POWER_LSB_FACTOR;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2219      	movs	r2, #25
 80013f0:	fb03 f202 	mul.w	r2, r3, r2
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	60da      	str	r2, [r3, #12]

	return AutoFox_INA226_WriteRegister(this,INA226_CALIBRATION, this->mCalibrationValue);
 80013f8:	2105      	movs	r1, #5
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	461a      	mov	r2, r3
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f000 f875 	bl	80014f0 <AutoFox_INA226_WriteRegister>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	00000000 	.word	0x00000000
 8001414:	412e8480 	.word	0x412e8480
 8001418:	00000000 	.word	0x00000000
 800141c:	40dfffc0 	.word	0x40dfffc0
 8001420:	b9cb6849 	.word	0xb9cb6849
 8001424:	3f755714 	.word	0x3f755714

08001428 <AutoFox_INA226_CheckI2cAddress>:
//----------------------------------------------------------------------------
//Check if a device exists at the specified I2C address

status AutoFox_INA226_CheckI2cAddress(uint8_t aI2C_Address)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	Wire.beginTransmission(aI2C_Address);
	if(Wire.endTransmission() == 0){
		return OK;
	}
#elif defined(USE_HAL_DRIVER)
	if(HAL_I2C_IsDeviceReady(&I2C_HANDLE_IN226, (uint16_t)aI2C_Address<<1, 10, INA226_I2C_TIMEOUT) != HAL_OK){
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	b29b      	uxth	r3, r3
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	b299      	uxth	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	220a      	movs	r2, #10
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <AutoFox_INA226_CheckI2cAddress+0x34>)
 8001442:	f007 f8d5 	bl	80085f0 <HAL_I2C_IsDeviceReady>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <AutoFox_INA226_CheckI2cAddress+0x2a>
		return INVALID_I2C_ADDRESS;
 800144c:	f06f 0305 	mvn.w	r3, #5
 8001450:	e000      	b.n	8001454 <AutoFox_INA226_CheckI2cAddress+0x2c>
	}else{
		return OK;
 8001452:	2300      	movs	r3, #0
	}
#endif
	return INVALID_I2C_ADDRESS;
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000134 	.word	0x20000134

08001460 <AutoFox_INA226_ReadRegister>:

//----------------------------------------------------------------------------

status AutoFox_INA226_ReadRegister(AutoFox_INA226* this, uint8_t aRegister, uint16_t* aValue_p)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]
	*aValue_p = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
		return OK;
	}
#elif defined(USE_HAL_DRIVER)
	uint8_t buffer[2];
	if (HAL_I2C_Master_Transmit(&I2C_HANDLE_IN226,
			(uint16_t) this->mI2C_Address<<1, &aRegister, 1, INA226_I2C_TIMEOUT)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	b29b      	uxth	r3, r3
	if (HAL_I2C_Master_Transmit(&I2C_HANDLE_IN226,
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	b299      	uxth	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	f107 020b 	add.w	r2, r7, #11
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <AutoFox_INA226_ReadRegister+0x8c>)
 800148c:	f006 fd8c 	bl	8007fa8 <HAL_I2C_Master_Transmit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <AutoFox_INA226_ReadRegister+0x3c>
			!= HAL_OK) {
		return FAIL;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e023      	b.n	80014e4 <AutoFox_INA226_ReadRegister+0x84>
	}
	if (HAL_I2C_Master_Receive(&I2C_HANDLE_IN226, (uint16_t) this->mI2C_Address<<1,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	f107 0214 	add.w	r2, r7, #20
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2302      	movs	r3, #2
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <AutoFox_INA226_ReadRegister+0x8c>)
 80014b4:	f006 fe76 	bl	80081a4 <HAL_I2C_Master_Receive>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <AutoFox_INA226_ReadRegister+0x64>
			buffer, 2, INA226_I2C_TIMEOUT) != HAL_OK) {
		return FAIL;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e00f      	b.n	80014e4 <AutoFox_INA226_ReadRegister+0x84>
	}
	*aValue_p = buffer[0];
 80014c4:	7d3b      	ldrb	r3, [r7, #20]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	801a      	strh	r2, [r3, #0]
	*aValue_p = *aValue_p<<8 | buffer[1];
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	7d7b      	ldrb	r3, [r7, #21]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	801a      	strh	r2, [r3, #0]
	return OK;
 80014e2:	2300      	movs	r3, #0
#endif
	return FAIL;
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000134 	.word	0x20000134

080014f0 <AutoFox_INA226_WriteRegister>:

//----------------------------------------------------------------------------
status AutoFox_INA226_WriteRegister(AutoFox_INA226* this, uint8_t aRegister, uint16_t aValue)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
 80014fc:	4613      	mov	r3, r2
 80014fe:	803b      	strh	r3, [r7, #0]
	theBytesWriten += Wire.write(aValue & 0xFF);
	Wire.endTransmission();
	return (theBytesWriten==3) ? OK : FAIL;
#elif defined(USE_HAL_DRIVER)
	uint8_t buffer[3];
	buffer[0] = aRegister;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	733b      	strb	r3, [r7, #12]
	buffer[1] = (uint8_t) ((aValue >> 8) & 0xFF);
 8001504:	883b      	ldrh	r3, [r7, #0]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]
	buffer[2] = (uint8_t) (aValue & 0xFF);
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Master_Transmit(&I2C_HANDLE_IN226,
			(uint16_t) this->mI2C_Address<<1, buffer, 3, INA226_I2C_TIMEOUT)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	b29b      	uxth	r3, r3
	if (HAL_I2C_Master_Transmit(&I2C_HANDLE_IN226,
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	b299      	uxth	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2303      	movs	r3, #3
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <AutoFox_INA226_WriteRegister+0x58>)
 800152c:	f006 fd3c 	bl	8007fa8 <HAL_I2C_Master_Transmit>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <AutoFox_INA226_WriteRegister+0x4c>
			!= HAL_OK) {
		return FAIL;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e000      	b.n	800153e <AutoFox_INA226_WriteRegister+0x4e>
	}
	return OK;
 800153c:	2300      	movs	r3, #0
#endif
	return FAIL;
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000134 	.word	0x20000134

0800154c <AutoFox_INA226_GetCurrent_uA>:
	return (int32_t)theRegisterValue * INA226_BUS_VOLTAGE_LSB;
}

//----------------------------------------------------------------------------
int32_t AutoFox_INA226_GetCurrent_uA(AutoFox_INA226* this)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	int16_t theRegisterValue=0; // signed register, result in mA
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]
	AutoFox_INA226_ReadRegister(this,INA226_CURRENT, (uint16_t*)&theRegisterValue);
 8001558:	2104      	movs	r1, #4
 800155a:	f107 030e 	add.w	r3, r7, #14
 800155e:	461a      	mov	r2, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff7d 	bl	8001460 <AutoFox_INA226_ReadRegister>
	return (int32_t)theRegisterValue * this->mCurrentMicroAmpsPerBit;
 8001566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
//	return (int32_t)theRegisterValue;
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <VL6180X_Init>:
 @brief  Initializes VL6180X and check if it is found and resets chip.
 @param  Pointer of i2c
 @returns True if chip found and initialized, False otherwise
 */
/**************************************************************************/
bool VL6180X_Init(I2C_HandleTypeDef *hi2c) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	VL6180X_i2c = hi2c;
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <VL6180X_Init+0x38>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
	_i2caddr = VL6180X_DEFAULT_I2C_ADDR;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <VL6180X_Init+0x3c>)
 800158c:	2252      	movs	r2, #82	; 0x52
 800158e:	701a      	strb	r2, [r3, #0]

//	if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
//		return false;
//	}

	 if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) == 0x01) {
 8001590:	2016      	movs	r0, #22
 8001592:	f000 f8e5 	bl	8001760 <read8>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <VL6180X_Init+0x24>
	loadSettings();
 800159c:	f000 f80e 	bl	80015bc <loadSettings>
	}

	write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2016      	movs	r0, #22
 80015a4:	f000 f90c 	bl	80017c0 <write8>

	return true;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000e8 	.word	0x200000e8
 80015b8:	200000e4 	.word	0x200000e4

080015bc <loadSettings>:
/*!
 @brief  Load the settings for proximity/distance ranging
 */
/**************************************************************************/

void loadSettings(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	// load settings!

	// private settings from page 24 of app note
	write8(0x0207, 0x01);
 80015c0:	2101      	movs	r1, #1
 80015c2:	f240 2007 	movw	r0, #519	; 0x207
 80015c6:	f000 f8fb 	bl	80017c0 <write8>
	write8(0x0208, 0x01);
 80015ca:	2101      	movs	r1, #1
 80015cc:	f44f 7002 	mov.w	r0, #520	; 0x208
 80015d0:	f000 f8f6 	bl	80017c0 <write8>
	write8(0x0096, 0x00);
 80015d4:	2100      	movs	r1, #0
 80015d6:	2096      	movs	r0, #150	; 0x96
 80015d8:	f000 f8f2 	bl	80017c0 <write8>
	write8(0x0097, 0xfd);
 80015dc:	21fd      	movs	r1, #253	; 0xfd
 80015de:	2097      	movs	r0, #151	; 0x97
 80015e0:	f000 f8ee 	bl	80017c0 <write8>
	write8(0x00e3, 0x00);
 80015e4:	2100      	movs	r1, #0
 80015e6:	20e3      	movs	r0, #227	; 0xe3
 80015e8:	f000 f8ea 	bl	80017c0 <write8>
	write8(0x00e4, 0x04);
 80015ec:	2104      	movs	r1, #4
 80015ee:	20e4      	movs	r0, #228	; 0xe4
 80015f0:	f000 f8e6 	bl	80017c0 <write8>
	write8(0x00e5, 0x02);
 80015f4:	2102      	movs	r1, #2
 80015f6:	20e5      	movs	r0, #229	; 0xe5
 80015f8:	f000 f8e2 	bl	80017c0 <write8>
	write8(0x00e6, 0x01);
 80015fc:	2101      	movs	r1, #1
 80015fe:	20e6      	movs	r0, #230	; 0xe6
 8001600:	f000 f8de 	bl	80017c0 <write8>
	write8(0x00e7, 0x03);
 8001604:	2103      	movs	r1, #3
 8001606:	20e7      	movs	r0, #231	; 0xe7
 8001608:	f000 f8da 	bl	80017c0 <write8>
	write8(0x00f5, 0x02);
 800160c:	2102      	movs	r1, #2
 800160e:	20f5      	movs	r0, #245	; 0xf5
 8001610:	f000 f8d6 	bl	80017c0 <write8>
	write8(0x00d9, 0x05);
 8001614:	2105      	movs	r1, #5
 8001616:	20d9      	movs	r0, #217	; 0xd9
 8001618:	f000 f8d2 	bl	80017c0 <write8>
	write8(0x00db, 0xce);
 800161c:	21ce      	movs	r1, #206	; 0xce
 800161e:	20db      	movs	r0, #219	; 0xdb
 8001620:	f000 f8ce 	bl	80017c0 <write8>
	write8(0x00dc, 0x03);
 8001624:	2103      	movs	r1, #3
 8001626:	20dc      	movs	r0, #220	; 0xdc
 8001628:	f000 f8ca 	bl	80017c0 <write8>
	write8(0x00dd, 0xf8);
 800162c:	21f8      	movs	r1, #248	; 0xf8
 800162e:	20dd      	movs	r0, #221	; 0xdd
 8001630:	f000 f8c6 	bl	80017c0 <write8>
	write8(0x009f, 0x00);
 8001634:	2100      	movs	r1, #0
 8001636:	209f      	movs	r0, #159	; 0x9f
 8001638:	f000 f8c2 	bl	80017c0 <write8>
	write8(0x00a3, 0x3c);
 800163c:	213c      	movs	r1, #60	; 0x3c
 800163e:	20a3      	movs	r0, #163	; 0xa3
 8001640:	f000 f8be 	bl	80017c0 <write8>
	write8(0x00b7, 0x00);
 8001644:	2100      	movs	r1, #0
 8001646:	20b7      	movs	r0, #183	; 0xb7
 8001648:	f000 f8ba 	bl	80017c0 <write8>
	write8(0x00bb, 0x3c);
 800164c:	213c      	movs	r1, #60	; 0x3c
 800164e:	20bb      	movs	r0, #187	; 0xbb
 8001650:	f000 f8b6 	bl	80017c0 <write8>
	write8(0x00b2, 0x09);
 8001654:	2109      	movs	r1, #9
 8001656:	20b2      	movs	r0, #178	; 0xb2
 8001658:	f000 f8b2 	bl	80017c0 <write8>
	write8(0x00ca, 0x09);
 800165c:	2109      	movs	r1, #9
 800165e:	20ca      	movs	r0, #202	; 0xca
 8001660:	f000 f8ae 	bl	80017c0 <write8>
	write8(0x0198, 0x01);
 8001664:	2101      	movs	r1, #1
 8001666:	f44f 70cc 	mov.w	r0, #408	; 0x198
 800166a:	f000 f8a9 	bl	80017c0 <write8>
	write8(0x01b0, 0x17);
 800166e:	2117      	movs	r1, #23
 8001670:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8001674:	f000 f8a4 	bl	80017c0 <write8>
	write8(0x01ad, 0x00);
 8001678:	2100      	movs	r1, #0
 800167a:	f240 10ad 	movw	r0, #429	; 0x1ad
 800167e:	f000 f89f 	bl	80017c0 <write8>
	write8(0x00ff, 0x05);
 8001682:	2105      	movs	r1, #5
 8001684:	20ff      	movs	r0, #255	; 0xff
 8001686:	f000 f89b 	bl	80017c0 <write8>
	write8(0x0100, 0x05);
 800168a:	2105      	movs	r1, #5
 800168c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001690:	f000 f896 	bl	80017c0 <write8>
	write8(0x0199, 0x05);
 8001694:	2105      	movs	r1, #5
 8001696:	f240 1099 	movw	r0, #409	; 0x199
 800169a:	f000 f891 	bl	80017c0 <write8>
	write8(0x01a6, 0x1b);
 800169e:	211b      	movs	r1, #27
 80016a0:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80016a4:	f000 f88c 	bl	80017c0 <write8>
	write8(0x01ac, 0x3e);
 80016a8:	213e      	movs	r1, #62	; 0x3e
 80016aa:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 80016ae:	f000 f887 	bl	80017c0 <write8>
	write8(0x01a7, 0x1f);
 80016b2:	211f      	movs	r1, #31
 80016b4:	f240 10a7 	movw	r0, #423	; 0x1a7
 80016b8:	f000 f882 	bl	80017c0 <write8>
	write8(0x0030, 0x00);
 80016bc:	2100      	movs	r1, #0
 80016be:	2030      	movs	r0, #48	; 0x30
 80016c0:	f000 f87e 	bl	80017c0 <write8>

	// Recommended _ Public registers - See data sheet for more detail
	write8(0x0011, 0x10); // Enables polling for 'New Sample ready' when measurement completes
 80016c4:	2110      	movs	r1, #16
 80016c6:	2011      	movs	r0, #17
 80016c8:	f000 f87a 	bl	80017c0 <write8>
	write8(0x010a, 0x30); // Set the averaging sample period (compromise between lower noise and increased execution time)
 80016cc:	2130      	movs	r1, #48	; 0x30
 80016ce:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80016d2:	f000 f875 	bl	80017c0 <write8>
	write8(0x003f, 0x46); // Sets the light and dark gain (upper nibble). Dark gain should not be changed.
 80016d6:	2146      	movs	r1, #70	; 0x46
 80016d8:	203f      	movs	r0, #63	; 0x3f
 80016da:	f000 f871 	bl	80017c0 <write8>
	write8(0x0031, 0xFF); // sets the # of range measurements after which auto calibration of system is performed
 80016de:	21ff      	movs	r1, #255	; 0xff
 80016e0:	2031      	movs	r0, #49	; 0x31
 80016e2:	f000 f86d 	bl	80017c0 <write8>
	write8(0x0040, 0x63); // Set ALS integration time to 100ms
 80016e6:	2163      	movs	r1, #99	; 0x63
 80016e8:	2040      	movs	r0, #64	; 0x40
 80016ea:	f000 f869 	bl	80017c0 <write8>
	write8(0x002e, 0x01); // perform a single temperature calibration of the ranging sensor
 80016ee:	2101      	movs	r1, #1
 80016f0:	202e      	movs	r0, #46	; 0x2e
 80016f2:	f000 f865 	bl	80017c0 <write8>

	// Optional_ Public registers - See data sheet for more detail
	write8(SYSRANGE_INTERMEASUREMENT_PERIOD, 0x09); // Set default ranging inter-measurement period to 100ms
 80016f6:	2109      	movs	r1, #9
 80016f8:	201b      	movs	r0, #27
 80016fa:	f000 f861 	bl	80017c0 <write8>
	write8(0x003e, 0x31); 	// Set default ALS inter-measurement period to 500ms
 80016fe:	2131      	movs	r1, #49	; 0x31
 8001700:	203e      	movs	r0, #62	; 0x3e
 8001702:	f000 f85d 	bl	80017c0 <write8>
	write8(0x0014, 0x24); // Configures interrupt on 'New Sample Ready threshold event'
 8001706:	2124      	movs	r1, #36	; 0x24
 8001708:	2014      	movs	r0, #20
 800170a:	f000 f859 	bl	80017c0 <write8>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <VL6180X_readRange>:
 readRangeStatus} to before using the return value!
 @return Distance in millimeters if valid
 */
/**************************************************************************/

uint8_t VL6180X_readRange(void) {
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
	// wait for device to be ready for range measurement
	while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 8001718:	bf00      	nop
 800171a:	204d      	movs	r0, #77	; 0x4d
 800171c:	f000 f820 	bl	8001760 <read8>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f7      	beq.n	800171a <VL6180X_readRange+0x8>
		;

	// Start a range measurement
	write8(VL6180X_REG_SYSRANGE_START, 0x01);
 800172a:	2101      	movs	r1, #1
 800172c:	2018      	movs	r0, #24
 800172e:	f000 f847 	bl	80017c0 <write8>

	// Poll until bit 2 is set
	while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 8001732:	bf00      	nop
 8001734:	204f      	movs	r0, #79	; 0x4f
 8001736:	f000 f813 	bl	8001760 <read8>
 800173a:	4603      	mov	r3, r0
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f7      	beq.n	8001734 <VL6180X_readRange+0x22>
		;

	// read range in mm
	uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 8001744:	2062      	movs	r0, #98	; 0x62
 8001746:	f000 f80b 	bl	8001760 <read8>
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]

	// clear interrupt
	write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 800174e:	2107      	movs	r1, #7
 8001750:	2015      	movs	r0, #21
 8001752:	f000 f835 	bl	80017c0 <write8>

	return range;
 8001756:	79fb      	ldrb	r3, [r7, #7]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <read8>:
 @brief  I2C low level interfacing
 */
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t read8(uint16_t address) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af02      	add	r7, sp, #8
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	uint8_t pData[2] = { address >> 8, address };
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	733b      	strb	r3, [r7, #12]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 2, 10);
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <read8+0x58>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <read8+0x5c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b299      	uxth	r1, r3
 8001784:	f107 020c 	add.w	r2, r7, #12
 8001788:	230a      	movs	r3, #10
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2302      	movs	r3, #2
 800178e:	f006 fc0b 	bl	8007fa8 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_IT(VL6180X_i2c, _i2caddr, pData, 2);
	HAL_I2C_Master_Receive(VL6180X_i2c, _i2caddr, pData, 1, 10);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <read8+0x58>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <read8+0x5c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b299      	uxth	r1, r3
 800179c:	f107 020c 	add.w	r2, r7, #12
 80017a0:	230a      	movs	r3, #10
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	f006 fcfd 	bl	80081a4 <HAL_I2C_Master_Receive>
//	HAL_I2C_Master_Receive_IT(VL6180X_i2c, _i2caddr, pData, 1);

	data = pData[0];
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	73fb      	strb	r3, [r7, #15]
	return data;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000e8 	.word	0x200000e8
 80017bc:	200000e4 	.word	0x200000e4

080017c0 <write8>:
	data |= pData[1];
	return data;
}

// write 1 byte
void write8(uint16_t address, uint8_t data) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	4603      	mov	r3, r0
 80017c8:	460a      	mov	r2, r1
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	4613      	mov	r3, r2
 80017ce:	717b      	strb	r3, [r7, #5]
	uint8_t pData[3] = { address >> 8, address, data };
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	733b      	strb	r3, [r7, #12]
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	737b      	strb	r3, [r7, #13]
 80017e0:	797b      	ldrb	r3, [r7, #5]
 80017e2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 3, 10);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <write8+0x44>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <write8+0x48>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b299      	uxth	r1, r3
 80017ee:	f107 020c 	add.w	r2, r7, #12
 80017f2:	230a      	movs	r3, #10
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2303      	movs	r3, #3
 80017f8:	f006 fbd6 	bl	8007fa8 <HAL_I2C_Master_Transmit>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200000e8 	.word	0x200000e8
 8001808:	200000e4 	.word	0x200000e4

0800180c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x3F<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af02      	add	r7, sp, #8
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[1];
	data_u = (cmd&0xf0);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f023 030f 	bic.w	r3, r3, #15
 800181c:	72fb      	strb	r3, [r7, #11]
	data_l = ((cmd<<4)&0xf0);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	72bb      	strb	r3, [r7, #10]
	data_t[0] = data_u|0x08;  //en=1, rs=0
 8001824:	7afb      	ldrb	r3, [r7, #11]
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	b2db      	uxtb	r3, r3
 800182c:	723b      	strb	r3, [r7, #8]
	int i = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 8001832:	e002      	b.n	800183a <lcd_send_cmd+0x2e>
				i++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001840:	dbf8      	blt.n	8001834 <lcd_send_cmd+0x28>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001842:	f107 0208 	add.w	r2, r7, #8
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	217e      	movs	r1, #126	; 0x7e
 800184e:	483f      	ldr	r0, [pc, #252]	; (800194c <lcd_send_cmd+0x140>)
 8001850:	f006 fbaa 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=0, rs=0
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	f043 030c 	orr.w	r3, r3, #12
 800185a:	b2db      	uxtb	r3, r3
 800185c:	723b      	strb	r3, [r7, #8]
	i = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 8001862:	e002      	b.n	800186a <lcd_send_cmd+0x5e>
				i++;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001870:	dbf8      	blt.n	8001864 <lcd_send_cmd+0x58>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001872:	f107 0208 	add.w	r2, r7, #8
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	217e      	movs	r1, #126	; 0x7e
 800187e:	4833      	ldr	r0, [pc, #204]	; (800194c <lcd_send_cmd+0x140>)
 8001880:	f006 fb92 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x08;  //en=1, rs=0
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	b2db      	uxtb	r3, r3
 800188c:	723b      	strb	r3, [r7, #8]
	i = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 8001892:	e002      	b.n	800189a <lcd_send_cmd+0x8e>
				i++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018a0:	dbf8      	blt.n	8001894 <lcd_send_cmd+0x88>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 80018a2:	f107 0208 	add.w	r2, r7, #8
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	217e      	movs	r1, #126	; 0x7e
 80018ae:	4827      	ldr	r0, [pc, #156]	; (800194c <lcd_send_cmd+0x140>)
 80018b0:	f006 fb7a 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_l|0x08;  //en=1, rs=0
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	723b      	strb	r3, [r7, #8]
	i = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80018c2:	e002      	b.n	80018ca <lcd_send_cmd+0xbe>
				i++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018d0:	dbf8      	blt.n	80018c4 <lcd_send_cmd+0xb8>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	217e      	movs	r1, #126	; 0x7e
 80018de:	481b      	ldr	r0, [pc, #108]	; (800194c <lcd_send_cmd+0x140>)
 80018e0:	f006 fb62 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_l|0x0C;  //en=0, rs=0
 80018e4:	7abb      	ldrb	r3, [r7, #10]
 80018e6:	f043 030c 	orr.w	r3, r3, #12
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	723b      	strb	r3, [r7, #8]
	i = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80018f2:	e002      	b.n	80018fa <lcd_send_cmd+0xee>
				i++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001900:	dbf8      	blt.n	80018f4 <lcd_send_cmd+0xe8>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001902:	f107 0208 	add.w	r2, r7, #8
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	217e      	movs	r1, #126	; 0x7e
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <lcd_send_cmd+0x140>)
 8001910:	f006 fb4a 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = data_l|0x08;  //en=1, rs=0
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	b2db      	uxtb	r3, r3
 800191c:	723b      	strb	r3, [r7, #8]
	i = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 8001922:	e002      	b.n	800192a <lcd_send_cmd+0x11e>
				i++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001930:	dbf8      	blt.n	8001924 <lcd_send_cmd+0x118>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001932:	f107 0208 	add.w	r2, r7, #8
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	217e      	movs	r1, #126	; 0x7e
 800193e:	4803      	ldr	r0, [pc, #12]	; (800194c <lcd_send_cmd+0x140>)
 8001940:	f006 fb32 	bl	8007fa8 <HAL_I2C_Master_Transmit>
//	data_t[0] = data_l|0x08;  //en=0, rs=0
//	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000134 	.word	0x20000134

08001950 <lcd_send_init>:

void lcd_send_init (char cmd)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[1];
	data_u = (cmd&0xf0);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	72fb      	strb	r3, [r7, #11]
	data_l = ((cmd<<4)&0xf0);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	72bb      	strb	r3, [r7, #10]
	data_t[0] = cmd|0x08;  //en=1, rs=0
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	b2db      	uxtb	r3, r3
 8001970:	723b      	strb	r3, [r7, #8]
	int i = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
		while(i<2000){
 8001976:	e002      	b.n	800197e <lcd_send_init+0x2e>
			i++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
		while(i<2000){
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001984:	dbf8      	blt.n	8001978 <lcd_send_init+0x28>
		}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001986:	f107 0208 	add.w	r2, r7, #8
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	217e      	movs	r1, #126	; 0x7e
 8001992:	481b      	ldr	r0, [pc, #108]	; (8001a00 <lcd_send_init+0xb0>)
 8001994:	f006 fb08 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = cmd|0x0C;  //en=0, rs=0
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f043 030c 	orr.w	r3, r3, #12
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	723b      	strb	r3, [r7, #8]
	i = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80019a6:	e002      	b.n	80019ae <lcd_send_init+0x5e>
				i++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019b4:	dbf8      	blt.n	80019a8 <lcd_send_init+0x58>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 80019b6:	f107 0208 	add.w	r2, r7, #8
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	217e      	movs	r1, #126	; 0x7e
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <lcd_send_init+0xb0>)
 80019c4:	f006 faf0 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	data_t[0] = cmd|0x08;  //en=1, rs=0
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	723b      	strb	r3, [r7, #8]
	i = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80019d6:	e002      	b.n	80019de <lcd_send_init+0x8e>
				i++;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
			while(i<2000){
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019e4:	dbf8      	blt.n	80019d8 <lcd_send_init+0x88>
			}
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 80019e6:	f107 0208 	add.w	r2, r7, #8
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	217e      	movs	r1, #126	; 0x7e
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <lcd_send_init+0xb0>)
 80019f4:	f006 fad8 	bl	8007fa8 <HAL_I2C_Master_Transmit>
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000134 	.word	0x20000134

08001a04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[1];
	data_u = (data&0xf0);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f023 030f 	bic.w	r3, r3, #15
 8001a14:	72fb      	strb	r3, [r7, #11]
	data_l = ((data<<4)&0xf0);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	72bb      	strb	r3, [r7, #10]
	data_t[0] = data_u|0x09;  //en=1, rs=0
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	f043 0309 	orr.w	r3, r3, #9
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001a26:	f107 0208 	add.w	r2, r7, #8
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	217e      	movs	r1, #126	; 0x7e
 8001a32:	4845      	ldr	r0, [pc, #276]	; (8001b48 <lcd_send_data+0x144>)
 8001a34:	f006 fab8 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	int i = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001a3c:	e002      	b.n	8001a44 <lcd_send_data+0x40>
		i++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a4a:	dbf8      	blt.n	8001a3e <lcd_send_data+0x3a>
	}
	data_t[0] = data_u|0x0D;  //en=0, rs=0
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	f043 030d 	orr.w	r3, r3, #13
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001a56:	f107 0208 	add.w	r2, r7, #8
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	217e      	movs	r1, #126	; 0x7e
 8001a62:	4839      	ldr	r0, [pc, #228]	; (8001b48 <lcd_send_data+0x144>)
 8001a64:	f006 faa0 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	i = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001a6c:	e002      	b.n	8001a74 <lcd_send_data+0x70>
		i++;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3301      	adds	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a7a:	dbf8      	blt.n	8001a6e <lcd_send_data+0x6a>
	}
	data_t[0] = data_u|0x09;  //en=1, rs=0
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	f043 0309 	orr.w	r3, r3, #9
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001a86:	f107 0208 	add.w	r2, r7, #8
 8001a8a:	2364      	movs	r3, #100	; 0x64
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	217e      	movs	r1, #126	; 0x7e
 8001a92:	482d      	ldr	r0, [pc, #180]	; (8001b48 <lcd_send_data+0x144>)
 8001a94:	f006 fa88 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	i = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001a9c:	e002      	b.n	8001aa4 <lcd_send_data+0xa0>
		i++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aaa:	dbf8      	blt.n	8001a9e <lcd_send_data+0x9a>
	}
	data_t[0] = data_l|0x09;  //en=1, rs=0
 8001aac:	7abb      	ldrb	r3, [r7, #10]
 8001aae:	f043 0309 	orr.w	r3, r3, #9
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001ab6:	f107 0208 	add.w	r2, r7, #8
 8001aba:	2364      	movs	r3, #100	; 0x64
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	217e      	movs	r1, #126	; 0x7e
 8001ac2:	4821      	ldr	r0, [pc, #132]	; (8001b48 <lcd_send_data+0x144>)
 8001ac4:	f006 fa70 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	i = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001acc:	e002      	b.n	8001ad4 <lcd_send_data+0xd0>
		i++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ada:	dbf8      	blt.n	8001ace <lcd_send_data+0xca>
	}
	data_t[0] = data_l|0x0D;  //en=0, rs=0
 8001adc:	7abb      	ldrb	r3, [r7, #10]
 8001ade:	f043 030d 	orr.w	r3, r3, #13
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001ae6:	f107 0208 	add.w	r2, r7, #8
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	217e      	movs	r1, #126	; 0x7e
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <lcd_send_data+0x144>)
 8001af4:	f006 fa58 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	i = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001afc:	e002      	b.n	8001b04 <lcd_send_data+0x100>
		i++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b0a:	dbf8      	blt.n	8001afe <lcd_send_data+0xfa>
	}
	data_t[0] = data_l|0x09;  //en=1, rs=0
 8001b0c:	7abb      	ldrb	r3, [r7, #10]
 8001b0e:	f043 0309 	orr.w	r3, r3, #9
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8001b16:	f107 0208 	add.w	r2, r7, #8
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	217e      	movs	r1, #126	; 0x7e
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <lcd_send_data+0x144>)
 8001b24:	f006 fa40 	bl	8007fa8 <HAL_I2C_Master_Transmit>
	i = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001b2c:	e002      	b.n	8001b34 <lcd_send_data+0x130>
		i++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
	while(i<2000){
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b3a:	dbf8      	blt.n	8001b2e <lcd_send_data+0x12a>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000134 	.word	0x20000134

08001b4c <lcd_clear>:

void lcd_clear (void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001b52:	2080      	movs	r0, #128	; 0x80
 8001b54:	f7ff fe5a 	bl	800180c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	e005      	b.n	8001b6a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001b5e:	2020      	movs	r0, #32
 8001b60:	f7ff ff50 	bl	8001a04 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3301      	adds	r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b45      	cmp	r3, #69	; 0x45
 8001b6e:	ddf6      	ble.n	8001b5e <lcd_clear+0x12>
	}
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]

    switch (row)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <lcd_put_cur+0x18>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <lcd_put_cur+0x22>
 8001b90:	e009      	b.n	8001ba6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	603b      	str	r3, [r7, #0]
            break;
 8001b9a:	e004      	b.n	8001ba6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ba2:	603b      	str	r3, [r7, #0]
            break;
 8001ba4:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fe2e 	bl	800180c <lcd_send_cmd>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <lcd_init>:


void lcd_init (void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	lcd_send_init (0x30);
 8001bbc:	2030      	movs	r0, #48	; 0x30
 8001bbe:	f7ff fec7 	bl	8001950 <lcd_send_init>
	HAL_Delay(5);  // wait for >40ms
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	f005 f916 	bl	8006df4 <HAL_Delay>
	lcd_send_init (0x30);
 8001bc8:	2030      	movs	r0, #48	; 0x30
 8001bca:	f7ff fec1 	bl	8001950 <lcd_send_init>
	HAL_Delay(5);  // wait for >4.1ms
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f005 f910 	bl	8006df4 <HAL_Delay>
	lcd_send_init (0x30);
 8001bd4:	2030      	movs	r0, #48	; 0x30
 8001bd6:	f7ff febb 	bl	8001950 <lcd_send_init>
	HAL_Delay(1);  // wait for >100us
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f005 f90a 	bl	8006df4 <HAL_Delay>
	lcd_send_init (0x20);  // 4bit mode
 8001be0:	2020      	movs	r0, #32
 8001be2:	f7ff feb5 	bl	8001950 <lcd_send_init>
	HAL_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f005 f904 	bl	8006df4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001bec:	2028      	movs	r0, #40	; 0x28
 8001bee:	f7ff fe0d 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f005 f8fe 	bl	8006df4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001bf8:	2008      	movs	r0, #8
 8001bfa:	f7ff fe07 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f005 f8f8 	bl	8006df4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff fe01 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f005 f8f2 	bl	8006df4 <HAL_Delay>
	HAL_Delay(1);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f005 f8ef 	bl	8006df4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c16:	2006      	movs	r0, #6
 8001c18:	f7ff fdf8 	bl	800180c <lcd_send_cmd>
	HAL_Delay(1);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f005 f8e9 	bl	8006df4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001c22:	200c      	movs	r0, #12
 8001c24:	f7ff fdf2 	bl	800180c <lcd_send_cmd>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001c34:	e010      	b.n	8001c58 <lcd_send_string+0x2c>
		lcd_send_data (*str++);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fee0 	bl	8001a04 <lcd_send_data>
		int i = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
		while(i<2000){
 8001c48:	e002      	b.n	8001c50 <lcd_send_string+0x24>
			i++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
		while(i<2000){
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c56:	dbf8      	blt.n	8001c4a <lcd_send_string+0x1e>
	while (*str) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <lcd_send_string+0xa>
		}
	}
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <lcd_write>:

void lcd_write (char *str,char *str2)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	lcd_clear();
 8001c74:	f7ff ff6a 	bl	8001b4c <lcd_clear>
	lcd_put_cur(0, 0);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ff7d 	bl	8001b7a <lcd_put_cur>
	HAL_Delay(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f005 f8b7 	bl	8006df4 <HAL_Delay>
	lcd_send_string(str);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffd0 	bl	8001c2c <lcd_send_string>
	lcd_put_cur(1, 0);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff ff73 	bl	8001b7a <lcd_put_cur>
	HAL_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f005 f8ad 	bl	8006df4 <HAL_Delay>
	lcd_send_string(str2);
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f7ff ffc6 	bl	8001c2c <lcd_send_string>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cac:	ed2d 8b02 	vpush	{d8}
 8001cb0:	b093      	sub	sp, #76	; 0x4c
 8001cb2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb4:	f005 f82c 	bl	8006d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb8:	f001 fbb4 	bl	8003424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cbc:	f001 fec8 	bl	8003a50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cc0:	f001 fe72 	bl	80039a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001cc4:	f001 fc96 	bl	80035f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cc8:	f001 fcec 	bl	80036a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ccc:	f001 fd3e 	bl	800374c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cd0:	f001 fd90 	bl	80037f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cd4:	f001 fe1a 	bl	800390c <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001cd8:	f001 fe90 	bl	80039fc <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001cdc:	f001 fc5c 	bl	8003598 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001ce0:	f001 fc08 	bl	80034f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//	#define lcd_write(...) var_lcd((lcd_args){__VA_ARGS__});
//  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
	ADCPollingMethodInit();
 8001ce4:	f004 fb68 	bl	80063b8 <ADCPollingMethodInit>
	lcd_init();
 8001ce8:	f7ff ff66 	bl	8001bb8 <lcd_init>
	lcd_write("Initializing...", " ");
 8001cec:	49e8      	ldr	r1, [pc, #928]	; (8002090 <main+0x3e8>)
 8001cee:	48e9      	ldr	r0, [pc, #932]	; (8002094 <main+0x3ec>)
 8001cf0:	f7ff ffbb 	bl	8001c6a <lcd_write>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfa:	48e7      	ldr	r0, [pc, #924]	; (8002098 <main+0x3f0>)
 8001cfc:	f005 ffde 	bl	8007cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2104      	movs	r1, #4
 8001d04:	48e5      	ldr	r0, [pc, #916]	; (800209c <main+0x3f4>)
 8001d06:	f005 ffd9 	bl	8007cbc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0e:	f005 f871 	bl	8006df4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2104      	movs	r1, #4
 8001d16:	48e1      	ldr	r0, [pc, #900]	; (800209c <main+0x3f4>)
 8001d18:	f005 ffd0 	bl	8007cbc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d20:	f005 f868 	bl	8006df4 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d24:	48de      	ldr	r0, [pc, #888]	; (80020a0 <main+0x3f8>)
 8001d26:	f009 fa81 	bl	800b22c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d2a:	48de      	ldr	r0, [pc, #888]	; (80020a4 <main+0x3fc>)
 8001d2c:	f009 fa7e 	bl	800b22c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001d30:	48dd      	ldr	r0, [pc, #884]	; (80020a8 <main+0x400>)
 8001d32:	f009 fa7b 	bl	800b22c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001d36:	48dd      	ldr	r0, [pc, #884]	; (80020ac <main+0x404>)
 8001d38:	f009 fa78 	bl	800b22c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d3c:	213c      	movs	r1, #60	; 0x3c
 8001d3e:	48dc      	ldr	r0, [pc, #880]	; (80020b0 <main+0x408>)
 8001d40:	f009 fc86 	bl	800b650 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001d44:	213c      	movs	r1, #60	; 0x3c
 8001d46:	48d6      	ldr	r0, [pc, #856]	; (80020a0 <main+0x3f8>)
 8001d48:	f009 fc82 	bl	800b650 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d4c:	213c      	movs	r1, #60	; 0x3c
 8001d4e:	48d5      	ldr	r0, [pc, #852]	; (80020a4 <main+0x3fc>)
 8001d50:	f009 fc7e 	bl	800b650 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001d54:	2100      	movs	r1, #0
 8001d56:	48d4      	ldr	r0, [pc, #848]	; (80020a8 <main+0x400>)
 8001d58:	f009 fb24 	bl	800b3a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	48d2      	ldr	r0, [pc, #840]	; (80020a8 <main+0x400>)
 8001d60:	f009 fb20 	bl	800b3a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001d64:	2108      	movs	r1, #8
 8001d66:	48d0      	ldr	r0, [pc, #832]	; (80020a8 <main+0x400>)
 8001d68:	f009 fb1c 	bl	800b3a4 <HAL_TIM_PWM_Start>
	hx711_init(&loadcell, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1);
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4bc9      	ldr	r3, [pc, #804]	; (8002098 <main+0x3f0>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	49c8      	ldr	r1, [pc, #800]	; (8002098 <main+0x3f0>)
 8001d76:	48cf      	ldr	r0, [pc, #828]	; (80020b4 <main+0x40c>)
 8001d78:	f002 fce8 	bl	800474c <hx711_init>
	hx711_coef_set(&loadcell, 1, 1); // read after calibration
 8001d7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d84:	48cb      	ldr	r0, [pc, #812]	; (80020b4 <main+0x40c>)
 8001d86:	f003 f97b 	bl	8005080 <hx711_coef_set>
	hx711_init(&loadcell2, GPIOC, GPIO_PIN_2, GPIOC, GPIO_PIN_3);
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4bc2      	ldr	r3, [pc, #776]	; (8002098 <main+0x3f0>)
 8001d90:	2204      	movs	r2, #4
 8001d92:	49c1      	ldr	r1, [pc, #772]	; (8002098 <main+0x3f0>)
 8001d94:	48c8      	ldr	r0, [pc, #800]	; (80020b8 <main+0x410>)
 8001d96:	f002 fcd9 	bl	800474c <hx711_init>
	hx711_coef_set(&loadcell2, 1, 1); // read after calibration
 8001d9a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001da2:	48c5      	ldr	r0, [pc, #788]	; (80020b8 <main+0x410>)
 8001da4:	f003 f96c 	bl	8005080 <hx711_coef_set>
	AutoFox_INA226_Constructor(&ina226);
 8001da8:	48c4      	ldr	r0, [pc, #784]	; (80020bc <main+0x414>)
 8001daa:	f7ff f9e7 	bl	800117c <AutoFox_INA226_Constructor>
	AutoFox_INA226_Init(&ina226, INA226_IC2_ADDRESS, SHUNT_RESISTOR_OHMS, 10);
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	ed9f 7bb3 	vldr	d7, [pc, #716]	; 8002080 <main+0x3d8>
 8001db4:	ed9f 1bb4 	vldr	d1, [pc, #720]	; 8002088 <main+0x3e0>
 8001db8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbc:	eef0 0a67 	vmov.f32	s1, s15
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	48be      	ldr	r0, [pc, #760]	; (80020bc <main+0x414>)
 8001dc4:	f7ff f9f6 	bl	80011b4 <AutoFox_INA226_Init>
//  AutoFox_INA226_setupCalibration(&ina226,SHUNT_RESISTOR_OHMS,10);
	tcaselect(0);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f003 f96d 	bl	80050a8 <tcaselect>
	HAL_Delay(10);
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f005 f810 	bl	8006df4 <HAL_Delay>
	VL6180X_Init(&hi2c2);
 8001dd4:	48ba      	ldr	r0, [pc, #744]	; (80020c0 <main+0x418>)
 8001dd6:	f7ff fbd1 	bl	800157c <VL6180X_Init>
	HAL_Delay(100);
 8001dda:	2064      	movs	r0, #100	; 0x64
 8001ddc:	f005 f80a 	bl	8006df4 <HAL_Delay>
	tcaselect(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f003 f961 	bl	80050a8 <tcaselect>
	HAL_Delay(10);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f005 f804 	bl	8006df4 <HAL_Delay>
	VL6180X_Init(&hi2c2);
 8001dec:	48b4      	ldr	r0, [pc, #720]	; (80020c0 <main+0x418>)
 8001dee:	f7ff fbc5 	bl	800157c <VL6180X_Init>
	xr[0] = (m * (h - x[5]) * (w - x[4])) / (h * w);
 8001df2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80020c4 <main+0x41c>
 8001df6:	eddf 7ab4 	vldr	s15, [pc, #720]	; 80020c8 <main+0x420>
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfe:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80020cc <main+0x424>
 8001e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e06:	eddf 6ab2 	vldr	s13, [pc, #712]	; 80020d0 <main+0x428>
 8001e0a:	eddf 7ab2 	vldr	s15, [pc, #712]	; 80020d4 <main+0x42c>
 8001e0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e16:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80020c4 <main+0x41c>
 8001e1a:	eddf 7aad 	vldr	s15, [pc, #692]	; 80020d0 <main+0x428>
 8001e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e26:	4bac      	ldr	r3, [pc, #688]	; (80020d8 <main+0x430>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
	xr[1] = (m * (h - x[5]) * x[4]) / (h * w);
 8001e2c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80020c4 <main+0x41c>
 8001e30:	eddf 7aa5 	vldr	s15, [pc, #660]	; 80020c8 <main+0x420>
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80020cc <main+0x424>
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80020d4 <main+0x42c>
 8001e44:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e48:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80020c4 <main+0x41c>
 8001e4c:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80020d0 <main+0x428>
 8001e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	4b9f      	ldr	r3, [pc, #636]	; (80020d8 <main+0x430>)
 8001e5a:	edc3 7a01 	vstr	s15, [r3, #4]
	xr[2] = (m * x[5] * (w - x[4])) / (h * w);
 8001e5e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80020c8 <main+0x420>
 8001e62:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80020cc <main+0x424>
 8001e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6a:	eddf 6a99 	vldr	s13, [pc, #612]	; 80020d0 <main+0x428>
 8001e6e:	eddf 7a99 	vldr	s15, [pc, #612]	; 80020d4 <main+0x42c>
 8001e72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e7a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80020c4 <main+0x41c>
 8001e7e:	eddf 7a94 	vldr	s15, [pc, #592]	; 80020d0 <main+0x428>
 8001e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8a:	4b93      	ldr	r3, [pc, #588]	; (80020d8 <main+0x430>)
 8001e8c:	edc3 7a02 	vstr	s15, [r3, #8]
	xr[3] = (m * x[5] * x[4]) / (h * w);
 8001e90:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80020c8 <main+0x420>
 8001e94:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80020cc <main+0x424>
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80020d4 <main+0x42c>
 8001ea0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ea4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80020c4 <main+0x41c>
 8001ea8:	eddf 7a89 	vldr	s15, [pc, #548]	; 80020d0 <main+0x428>
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb4:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <main+0x430>)
 8001eb6:	edc3 7a03 	vstr	s15, [r3, #12]
	yr[0] = (m * (h - y[5]) * (w - y[4])) / (h * w);
 8001eba:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80020c4 <main+0x41c>
 8001ebe:	eddf 7a87 	vldr	s15, [pc, #540]	; 80020dc <main+0x434>
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec6:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80020cc <main+0x424>
 8001eca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ece:	eddf 6a80 	vldr	s13, [pc, #512]	; 80020d0 <main+0x428>
 8001ed2:	eddf 7a83 	vldr	s15, [pc, #524]	; 80020e0 <main+0x438>
 8001ed6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ede:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80020c4 <main+0x41c>
 8001ee2:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80020d0 <main+0x428>
 8001ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eee:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <main+0x43c>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
	yr[1] = (m * (h - y[5]) * y[4]) / (h * w);
 8001ef4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80020c4 <main+0x41c>
 8001ef8:	eddf 7a78 	vldr	s15, [pc, #480]	; 80020dc <main+0x434>
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80020cc <main+0x424>
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80020e0 <main+0x438>
 8001f0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f10:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80020c4 <main+0x41c>
 8001f14:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80020d0 <main+0x428>
 8001f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <main+0x43c>)
 8001f22:	edc3 7a01 	vstr	s15, [r3, #4]
	yr[2] = (m * y[5] * (w - y[4])) / (h * w);
 8001f26:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80020dc <main+0x434>
 8001f2a:	eddf 7a68 	vldr	s15, [pc, #416]	; 80020cc <main+0x424>
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	eddf 6a67 	vldr	s13, [pc, #412]	; 80020d0 <main+0x428>
 8001f36:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80020e0 <main+0x438>
 8001f3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f42:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80020c4 <main+0x41c>
 8001f46:	eddf 7a62 	vldr	s15, [pc, #392]	; 80020d0 <main+0x428>
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <main+0x43c>)
 8001f54:	edc3 7a02 	vstr	s15, [r3, #8]
	yr[3] = (m * y[5] * y[4]) / (h * w);
 8001f58:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80020dc <main+0x434>
 8001f5c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80020cc <main+0x424>
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80020e0 <main+0x438>
 8001f68:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f6c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80020c4 <main+0x41c>
 8001f70:	eddf 7a57 	vldr	s15, [pc, #348]	; 80020d0 <main+0x428>
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <main+0x43c>)
 8001f7e:	edc3 7a03 	vstr	s15, [r3, #12]
	zr[0] = (m * (h - z[5]) * (w - z[4])) / (h * w);
 8001f82:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80020c4 <main+0x41c>
 8001f86:	eddf 7a58 	vldr	s15, [pc, #352]	; 80020e8 <main+0x440>
 8001f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80020cc <main+0x424>
 8001f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f96:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80020d0 <main+0x428>
 8001f9a:	eddf 7a54 	vldr	s15, [pc, #336]	; 80020ec <main+0x444>
 8001f9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fa6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80020c4 <main+0x41c>
 8001faa:	eddf 7a49 	vldr	s15, [pc, #292]	; 80020d0 <main+0x428>
 8001fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	; (80020f0 <main+0x448>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
	zr[1] = (m * (h - z[5]) * z[4]) / (h * w);
 8001fbc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80020c4 <main+0x41c>
 8001fc0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80020e8 <main+0x440>
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80020cc <main+0x424>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80020ec <main+0x444>
 8001fd4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fd8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80020c4 <main+0x41c>
 8001fdc:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80020d0 <main+0x428>
 8001fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <main+0x448>)
 8001fea:	edc3 7a01 	vstr	s15, [r3, #4]
	zr[2] = (m * z[5] * (w - z[4])) / (h * w);
 8001fee:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80020e8 <main+0x440>
 8001ff2:	eddf 7a36 	vldr	s15, [pc, #216]	; 80020cc <main+0x424>
 8001ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffa:	eddf 6a35 	vldr	s13, [pc, #212]	; 80020d0 <main+0x428>
 8001ffe:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80020ec <main+0x444>
 8002002:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002006:	ee67 6a27 	vmul.f32	s13, s14, s15
 800200a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80020c4 <main+0x41c>
 800200e:	eddf 7a30 	vldr	s15, [pc, #192]	; 80020d0 <main+0x428>
 8002012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201a:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <main+0x448>)
 800201c:	edc3 7a02 	vstr	s15, [r3, #8]
	zr[3] = (m * z[5] * z[4]) / (h * w);
 8002020:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80020e8 <main+0x440>
 8002024:	eddf 7a29 	vldr	s15, [pc, #164]	; 80020cc <main+0x424>
 8002028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80020ec <main+0x444>
 8002030:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002034:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80020c4 <main+0x41c>
 8002038:	eddf 7a25 	vldr	s15, [pc, #148]	; 80020d0 <main+0x428>
 800203c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <main+0x448>)
 8002046:	edc3 7a03 	vstr	s15, [r3, #12]
	pr[0] = (m * (h - p[5]) * (w - p[4])) / (h * w);
 800204a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80020c4 <main+0x41c>
 800204e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80020f4 <main+0x44c>
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80020cc <main+0x424>
 800205a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800205e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80020d0 <main+0x428>
 8002062:	eddf 7a25 	vldr	s15, [pc, #148]	; 80020f8 <main+0x450>
 8002066:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800206a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800206e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80020c4 <main+0x41c>
 8002072:	eddf 7a17 	vldr	s15, [pc, #92]	; 80020d0 <main+0x428>
 8002076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207e:	e03d      	b.n	80020fc <main+0x454>
 8002080:	47ae147b 	.word	0x47ae147b
 8002084:	3f747ae1 	.word	0x3f747ae1
 8002088:	00000000 	.word	0x00000000
 800208c:	40240000 	.word	0x40240000
 8002090:	0800ded0 	.word	0x0800ded0
 8002094:	0800ded4 	.word	0x0800ded4
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	200001d0 	.word	0x200001d0
 80020a4:	20000218 	.word	0x20000218
 80020a8:	20000260 	.word	0x20000260
 80020ac:	200002a8 	.word	0x200002a8
 80020b0:	20000188 	.word	0x20000188
 80020b4:	200003cc 	.word	0x200003cc
 80020b8:	200003f4 	.word	0x200003f4
 80020bc:	20000588 	.word	0x20000588
 80020c0:	20000134 	.word	0x20000134
 80020c4:	44852000 	.word	0x44852000
 80020c8:	43d78000 	.word	0x43d78000
 80020cc:	3fc7ae14 	.word	0x3fc7ae14
 80020d0:	44924000 	.word	0x44924000
 80020d4:	440dd333 	.word	0x440dd333
 80020d8:	200005d8 	.word	0x200005d8
 80020dc:	44002000 	.word	0x44002000
 80020e0:	44124000 	.word	0x44124000
 80020e4:	200005f0 	.word	0x200005f0
 80020e8:	440c799a 	.word	0x440c799a
 80020ec:	43b8c28f 	.word	0x43b8c28f
 80020f0:	20000608 	.word	0x20000608
 80020f4:	4422f333 	.word	0x4422f333
 80020f8:	44351333 	.word	0x44351333
 80020fc:	4b89      	ldr	r3, [pc, #548]	; (8002324 <main+0x67c>)
 80020fe:	edc3 7a00 	vstr	s15, [r3]
	pr[1] = (m * (h - p[5]) * p[4]) / (h * w);
 8002102:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002328 <main+0x680>
 8002106:	eddf 7a89 	vldr	s15, [pc, #548]	; 800232c <main+0x684>
 800210a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002330 <main+0x688>
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002334 <main+0x68c>
 800211a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800211e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002328 <main+0x680>
 8002122:	eddf 7a85 	vldr	s15, [pc, #532]	; 8002338 <main+0x690>
 8002126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212e:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <main+0x67c>)
 8002130:	edc3 7a01 	vstr	s15, [r3, #4]
	pr[2] = (m * p[5] * (w - p[4])) / (h * w);
 8002134:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800232c <main+0x684>
 8002138:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8002330 <main+0x688>
 800213c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002140:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8002338 <main+0x690>
 8002144:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8002334 <main+0x68c>
 8002148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800214c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002150:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002328 <main+0x680>
 8002154:	eddf 7a78 	vldr	s15, [pc, #480]	; 8002338 <main+0x690>
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <main+0x67c>)
 8002162:	edc3 7a02 	vstr	s15, [r3, #8]
	pr[3] = (m * p[5] * p[4]) / (h * w);
 8002166:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800232c <main+0x684>
 800216a:	eddf 7a71 	vldr	s15, [pc, #452]	; 8002330 <main+0x688>
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002334 <main+0x68c>
 8002176:	ee67 6a87 	vmul.f32	s13, s15, s14
 800217a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002328 <main+0x680>
 800217e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8002338 <main+0x690>
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	4b66      	ldr	r3, [pc, #408]	; (8002324 <main+0x67c>)
 800218c:	edc3 7a03 	vstr	s15, [r3, #12]
	xc[0] = x[0] / xr[0];
 8002190:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800233c <main+0x694>
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <main+0x698>)
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219e:	4b69      	ldr	r3, [pc, #420]	; (8002344 <main+0x69c>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]
	xc[1] = x[1] / xr[1];
 80021a4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8002348 <main+0x6a0>
 80021a8:	4b65      	ldr	r3, [pc, #404]	; (8002340 <main+0x698>)
 80021aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <main+0x69c>)
 80021b4:	edc3 7a01 	vstr	s15, [r3, #4]
	xc[2] = x[2] / xr[2];
 80021b8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800234c <main+0x6a4>
 80021bc:	4b60      	ldr	r3, [pc, #384]	; (8002340 <main+0x698>)
 80021be:	ed93 7a02 	vldr	s14, [r3, #8]
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <main+0x69c>)
 80021c8:	edc3 7a02 	vstr	s15, [r3, #8]
	xc[3] = x[3] / xr[3];
 80021cc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002350 <main+0x6a8>
 80021d0:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <main+0x698>)
 80021d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80021d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021da:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <main+0x69c>)
 80021dc:	edc3 7a03 	vstr	s15, [r3, #12]
	yc[0] = y[0] / yr[0];
 80021e0:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002354 <main+0x6ac>
 80021e4:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <main+0x6b0>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <main+0x6b4>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
	yc[1] = y[1] / yr[1];
 80021f4:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002360 <main+0x6b8>
 80021f8:	4b57      	ldr	r3, [pc, #348]	; (8002358 <main+0x6b0>)
 80021fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80021fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <main+0x6b4>)
 8002204:	edc3 7a01 	vstr	s15, [r3, #4]
	yc[2] = y[2] / yr[2];
 8002208:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002364 <main+0x6bc>
 800220c:	4b52      	ldr	r3, [pc, #328]	; (8002358 <main+0x6b0>)
 800220e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002216:	4b51      	ldr	r3, [pc, #324]	; (800235c <main+0x6b4>)
 8002218:	edc3 7a02 	vstr	s15, [r3, #8]
	yc[3] = y[3] / yr[3];
 800221c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002368 <main+0x6c0>
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <main+0x6b0>)
 8002222:	ed93 7a03 	vldr	s14, [r3, #12]
 8002226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222a:	4b4c      	ldr	r3, [pc, #304]	; (800235c <main+0x6b4>)
 800222c:	edc3 7a03 	vstr	s15, [r3, #12]
	zc[0] = z[0] / zr[0];
 8002230:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800236c <main+0x6c4>
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <main+0x6c8>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223e:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <main+0x6cc>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
	zc[1] = z[1] / zr[1];
 8002244:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002378 <main+0x6d0>
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <main+0x6c8>)
 800224a:	ed93 7a01 	vldr	s14, [r3, #4]
 800224e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <main+0x6cc>)
 8002254:	edc3 7a01 	vstr	s15, [r3, #4]
	zc[2] = z[2] / zr[2];
 8002258:	eddf 6a48 	vldr	s13, [pc, #288]	; 800237c <main+0x6d4>
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <main+0x6c8>)
 800225e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <main+0x6cc>)
 8002268:	edc3 7a02 	vstr	s15, [r3, #8]
	zc[3] = z[3] / zr[3];
 800226c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002380 <main+0x6d8>
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <main+0x6c8>)
 8002272:	ed93 7a03 	vldr	s14, [r3, #12]
 8002276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <main+0x6cc>)
 800227c:	edc3 7a03 	vstr	s15, [r3, #12]
	pc[0] = p[0] / pr[0];
 8002280:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002384 <main+0x6dc>
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <main+0x67c>)
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <main+0x6e0>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	pc[1] = p[1] / pr[1];
 8002294:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800238c <main+0x6e4>
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <main+0x67c>)
 800229a:	ed93 7a01 	vldr	s14, [r3, #4]
 800229e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <main+0x6e0>)
 80022a4:	edc3 7a01 	vstr	s15, [r3, #4]
	pc[2] = p[2] / pr[2];
 80022a8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002390 <main+0x6e8>
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <main+0x67c>)
 80022ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <main+0x6e0>)
 80022b8:	edc3 7a02 	vstr	s15, [r3, #8]
	pc[3] = p[3] / pr[3];
 80022bc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002394 <main+0x6ec>
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <main+0x67c>)
 80022c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80022c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <main+0x6e0>)
 80022cc:	edc3 7a03 	vstr	s15, [r3, #12]
	rc[0] = 27306.9453;
 80022d0:	4a31      	ldr	r2, [pc, #196]	; (8002398 <main+0x6f0>)
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <main+0x6f4>)
 80022d4:	6013      	str	r3, [r2, #0]
	rc[1] = 23035.0215;
 80022d6:	4a30      	ldr	r2, [pc, #192]	; (8002398 <main+0x6f0>)
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <main+0x6f8>)
 80022da:	6053      	str	r3, [r2, #4]
	rc[2] = 100504.188;
 80022dc:	4a2e      	ldr	r2, [pc, #184]	; (8002398 <main+0x6f0>)
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <main+0x6fc>)
 80022e0:	6093      	str	r3, [r2, #8]
	rc[3] = 124988.211;
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <main+0x6f0>)
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <main+0x700>)
 80022e6:	60d3      	str	r3, [r2, #12]
	TX_BUFFER[0] = '1';
 80022e8:	4a30      	ldr	r2, [pc, #192]	; (80023ac <main+0x704>)
 80022ea:	2331      	movs	r3, #49	; 0x31
 80022ec:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (ledred==1){
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <main+0x708>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <main+0x65a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2110      	movs	r1, #16
 80022fa:	482e      	ldr	r0, [pc, #184]	; (80023b4 <main+0x70c>)
 80022fc:	f005 fcde 	bl	8007cbc <HAL_GPIO_WritePin>
 8002300:	e004      	b.n	800230c <main+0x664>

		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2110      	movs	r1, #16
 8002306:	482b      	ldr	r0, [pc, #172]	; (80023b4 <main+0x70c>)
 8002308:	f005 fcd8 	bl	8007cbc <HAL_GPIO_WritePin>

		}
		if (ledgreen==1){
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <main+0x710>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d155      	bne.n	80023c0 <main+0x718>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231a:	4828      	ldr	r0, [pc, #160]	; (80023bc <main+0x714>)
 800231c:	f005 fcce 	bl	8007cbc <HAL_GPIO_WritePin>
 8002320:	e054      	b.n	80023cc <main+0x724>
 8002322:	bf00      	nop
 8002324:	20000620 	.word	0x20000620
 8002328:	44852000 	.word	0x44852000
 800232c:	4422f333 	.word	0x4422f333
 8002330:	3fc7ae14 	.word	0x3fc7ae14
 8002334:	44351333 	.word	0x44351333
 8002338:	44924000 	.word	0x44924000
 800233c:	464c7400 	.word	0x464c7400
 8002340:	200005d8 	.word	0x200005d8
 8002344:	20000638 	.word	0x20000638
 8002348:	46276400 	.word	0x46276400
 800234c:	46fc5800 	.word	0x46fc5800
 8002350:	4716fa00 	.word	0x4716fa00
 8002354:	4637e000 	.word	0x4637e000
 8002358:	200005f0 	.word	0x200005f0
 800235c:	20000648 	.word	0x20000648
 8002360:	46066000 	.word	0x46066000
 8002364:	47091c00 	.word	0x47091c00
 8002368:	473cac00 	.word	0x473cac00
 800236c:	4648c800 	.word	0x4648c800
 8002370:	20000608 	.word	0x20000608
 8002374:	20000658 	.word	0x20000658
 8002378:	45af0000 	.word	0x45af0000
 800237c:	476f1000 	.word	0x476f1000
 8002380:	46f3c000 	.word	0x46f3c000
 8002384:	45fd2000 	.word	0x45fd2000
 8002388:	20000668 	.word	0x20000668
 800238c:	45cb2000 	.word	0x45cb2000
 8002390:	46ee4800 	.word	0x46ee4800
 8002394:	478a2080 	.word	0x478a2080
 8002398:	20000678 	.word	0x20000678
 800239c:	46d555e4 	.word	0x46d555e4
 80023a0:	46b3f60b 	.word	0x46b3f60b
 80023a4:	47c44c18 	.word	0x47c44c18
 80023a8:	47f41e1b 	.word	0x47f41e1b
 80023ac:	20000394 	.word	0x20000394
 80023b0:	20000434 	.word	0x20000434
 80023b4:	40020000 	.word	0x40020000
 80023b8:	20000435 	.word	0x20000435
 80023bc:	40020400 	.word	0x40020400

				}
				else{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c6:	48d9      	ldr	r0, [pc, #868]	; (800272c <main+0xa84>)
 80023c8:	f005 fc78 	bl	8007cbc <HAL_GPIO_WritePin>

				}
		buttonfunction();
 80023cc:	f004 f84a 	bl	8006464 <buttonfunction>
		if (emergency == 0) {
 80023d0:	4bd7      	ldr	r3, [pc, #860]	; (8002730 <main+0xa88>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8764 	bne.w	80032a2 <main+0x15fa>
			switch (state) {
 80023da:	4bd6      	ldr	r3, [pc, #856]	; (8002734 <main+0xa8c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f240 538e 	movw	r3, #1422	; 0x58e
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f000 83a3 	beq.w	8002b2e <main+0xe86>
 80023e8:	f240 538e 	movw	r3, #1422	; 0x58e
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f300 875a 	bgt.w	80032a6 <main+0x15fe>
 80023f2:	2a8e      	cmp	r2, #142	; 0x8e
 80023f4:	f300 8130 	bgt.w	8002658 <main+0x9b0>
 80023f8:	f112 0f03 	cmn.w	r2, #3
 80023fc:	f2c0 8753 	blt.w	80032a6 <main+0x15fe>
 8002400:	1cd3      	adds	r3, r2, #3
 8002402:	2b91      	cmp	r3, #145	; 0x91
 8002404:	f200 874f 	bhi.w	80032a6 <main+0x15fe>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <main+0x768>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	0800269d 	.word	0x0800269d
 8002414:	08002679 	.word	0x08002679
 8002418:	08002667 	.word	0x08002667
 800241c:	08002759 	.word	0x08002759
 8002420:	080027d1 	.word	0x080027d1
 8002424:	08002867 	.word	0x08002867
 8002428:	080032a7 	.word	0x080032a7
 800242c:	080032a7 	.word	0x080032a7
 8002430:	080032a7 	.word	0x080032a7
 8002434:	080032a7 	.word	0x080032a7
 8002438:	080032a7 	.word	0x080032a7
 800243c:	080032a7 	.word	0x080032a7
 8002440:	080032a7 	.word	0x080032a7
 8002444:	080032a7 	.word	0x080032a7
 8002448:	0800290d 	.word	0x0800290d
 800244c:	08002943 	.word	0x08002943
 8002450:	080029e1 	.word	0x080029e1
 8002454:	080032a7 	.word	0x080032a7
 8002458:	08002b99 	.word	0x08002b99
 800245c:	0800306b 	.word	0x0800306b
 8002460:	0800308d 	.word	0x0800308d
 8002464:	080030b9 	.word	0x080030b9
 8002468:	08003105 	.word	0x08003105
 800246c:	0800312b 	.word	0x0800312b
 8002470:	080031f5 	.word	0x080031f5
 8002474:	0800326d 	.word	0x0800326d
 8002478:	0800328b 	.word	0x0800328b
 800247c:	080032a7 	.word	0x080032a7
 8002480:	080032a7 	.word	0x080032a7
 8002484:	080032a7 	.word	0x080032a7
 8002488:	080032a7 	.word	0x080032a7
 800248c:	080032a7 	.word	0x080032a7
 8002490:	080032a7 	.word	0x080032a7
 8002494:	080032a7 	.word	0x080032a7
 8002498:	080032a7 	.word	0x080032a7
 800249c:	080032a7 	.word	0x080032a7
 80024a0:	080032a7 	.word	0x080032a7
 80024a4:	080032a7 	.word	0x080032a7
 80024a8:	080032a7 	.word	0x080032a7
 80024ac:	080032a7 	.word	0x080032a7
 80024b0:	080032a7 	.word	0x080032a7
 80024b4:	080032a7 	.word	0x080032a7
 80024b8:	080032a7 	.word	0x080032a7
 80024bc:	080032a7 	.word	0x080032a7
 80024c0:	080032a7 	.word	0x080032a7
 80024c4:	080032a7 	.word	0x080032a7
 80024c8:	080032a7 	.word	0x080032a7
 80024cc:	080032a7 	.word	0x080032a7
 80024d0:	080032a7 	.word	0x080032a7
 80024d4:	080032a7 	.word	0x080032a7
 80024d8:	080032a7 	.word	0x080032a7
 80024dc:	080032a7 	.word	0x080032a7
 80024e0:	080032a7 	.word	0x080032a7
 80024e4:	080032a7 	.word	0x080032a7
 80024e8:	080032a7 	.word	0x080032a7
 80024ec:	080032a7 	.word	0x080032a7
 80024f0:	080032a7 	.word	0x080032a7
 80024f4:	080032a7 	.word	0x080032a7
 80024f8:	080032a7 	.word	0x080032a7
 80024fc:	080032a7 	.word	0x080032a7
 8002500:	080032a7 	.word	0x080032a7
 8002504:	080032a7 	.word	0x080032a7
 8002508:	080032a7 	.word	0x080032a7
 800250c:	080032a7 	.word	0x080032a7
 8002510:	080032a7 	.word	0x080032a7
 8002514:	080032a7 	.word	0x080032a7
 8002518:	080032a7 	.word	0x080032a7
 800251c:	080032a7 	.word	0x080032a7
 8002520:	080032a7 	.word	0x080032a7
 8002524:	080032a7 	.word	0x080032a7
 8002528:	080032a7 	.word	0x080032a7
 800252c:	080032a7 	.word	0x080032a7
 8002530:	080032a7 	.word	0x080032a7
 8002534:	080032a7 	.word	0x080032a7
 8002538:	080032a7 	.word	0x080032a7
 800253c:	080032a7 	.word	0x080032a7
 8002540:	080032a7 	.word	0x080032a7
 8002544:	080032a7 	.word	0x080032a7
 8002548:	080032a7 	.word	0x080032a7
 800254c:	080032a7 	.word	0x080032a7
 8002550:	080032a7 	.word	0x080032a7
 8002554:	080032a7 	.word	0x080032a7
 8002558:	080032a7 	.word	0x080032a7
 800255c:	080032a7 	.word	0x080032a7
 8002560:	080032a7 	.word	0x080032a7
 8002564:	080032a7 	.word	0x080032a7
 8002568:	080032a7 	.word	0x080032a7
 800256c:	080032a7 	.word	0x080032a7
 8002570:	080032a7 	.word	0x080032a7
 8002574:	080032a7 	.word	0x080032a7
 8002578:	080032a7 	.word	0x080032a7
 800257c:	080032a7 	.word	0x080032a7
 8002580:	080032a7 	.word	0x080032a7
 8002584:	080032a7 	.word	0x080032a7
 8002588:	080032a7 	.word	0x080032a7
 800258c:	080032a7 	.word	0x080032a7
 8002590:	080032a7 	.word	0x080032a7
 8002594:	080032a7 	.word	0x080032a7
 8002598:	080032a7 	.word	0x080032a7
 800259c:	080032a7 	.word	0x080032a7
 80025a0:	080032a7 	.word	0x080032a7
 80025a4:	080032a7 	.word	0x080032a7
 80025a8:	080032a7 	.word	0x080032a7
 80025ac:	080032a7 	.word	0x080032a7
 80025b0:	080032a7 	.word	0x080032a7
 80025b4:	080032a7 	.word	0x080032a7
 80025b8:	080032a7 	.word	0x080032a7
 80025bc:	080032a7 	.word	0x080032a7
 80025c0:	080032a7 	.word	0x080032a7
 80025c4:	080032a7 	.word	0x080032a7
 80025c8:	080032a7 	.word	0x080032a7
 80025cc:	080032a7 	.word	0x080032a7
 80025d0:	080032a7 	.word	0x080032a7
 80025d4:	080032a7 	.word	0x080032a7
 80025d8:	080032a7 	.word	0x080032a7
 80025dc:	080032a7 	.word	0x080032a7
 80025e0:	080032a7 	.word	0x080032a7
 80025e4:	080032a7 	.word	0x080032a7
 80025e8:	08002923 	.word	0x08002923
 80025ec:	080032a7 	.word	0x080032a7
 80025f0:	080032a7 	.word	0x080032a7
 80025f4:	080032a7 	.word	0x080032a7
 80025f8:	080032a7 	.word	0x080032a7
 80025fc:	080032a7 	.word	0x080032a7
 8002600:	080032a7 	.word	0x080032a7
 8002604:	080032a7 	.word	0x080032a7
 8002608:	080032a7 	.word	0x080032a7
 800260c:	080032a7 	.word	0x080032a7
 8002610:	080032a7 	.word	0x080032a7
 8002614:	080032a7 	.word	0x080032a7
 8002618:	080032a7 	.word	0x080032a7
 800261c:	080032a7 	.word	0x080032a7
 8002620:	080032a7 	.word	0x080032a7
 8002624:	080032a7 	.word	0x080032a7
 8002628:	080032a7 	.word	0x080032a7
 800262c:	08002abf 	.word	0x08002abf
 8002630:	08002ad7 	.word	0x08002ad7
 8002634:	080032a7 	.word	0x080032a7
 8002638:	080032a7 	.word	0x080032a7
 800263c:	080032a7 	.word	0x080032a7
 8002640:	080032a7 	.word	0x080032a7
 8002644:	080032a7 	.word	0x080032a7
 8002648:	080032a7 	.word	0x080032a7
 800264c:	080032a7 	.word	0x080032a7
 8002650:	08002af1 	.word	0x08002af1
 8002654:	08002b19 	.word	0x08002b19
 8002658:	f240 5384 	movw	r3, #1412	; 0x584
 800265c:	429a      	cmp	r2, r3
 800265e:	f000 8252 	beq.w	8002b06 <main+0xe5e>
				if (zerostate == 0) {
					lcd_write("Ready for", "drone to land");
					state = 0;
				}
			default:
				break;
 8002662:	f000 be20 	b.w	80032a6 <main+0x15fe>
				zerostate = 1;
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <main+0xa90>)
 8002668:	2301      	movs	r3, #1
 800266a:	6013      	str	r3, [r2, #0]
				state = -2;
 800266c:	4a31      	ldr	r2, [pc, #196]	; (8002734 <main+0xa8c>)
 800266e:	f06f 0301 	mvn.w	r3, #1
 8002672:	6013      	str	r3, [r2, #0]
				break;
 8002674:	f000 be36 	b.w	80032e4 <main+0x163c>
				if (zerostate == 0) {
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <main+0xa90>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8614 	bne.w	80032aa <main+0x1602>
					initial_time = micros();
 8002682:	f002 f81f 	bl	80046c4 <micros>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	492c      	ldr	r1, [pc, #176]	; (800273c <main+0xa94>)
 800268c:	e9c1 2300 	strd	r2, r3, [r1]
					state = -3;
 8002690:	4a28      	ldr	r2, [pc, #160]	; (8002734 <main+0xa8c>)
 8002692:	f06f 0302 	mvn.w	r3, #2
 8002696:	6013      	str	r3, [r2, #0]
				break;
 8002698:	f000 be07 	b.w	80032aa <main+0x1602>
				loadcell_flushing();
 800269c:	f003 fd44 	bl	8006128 <loadcell_flushing>
				if (micros() - initial_time >= 15000000) {
 80026a0:	f002 f810 	bl	80046c4 <micros>
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <main+0xa94>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	ebb0 0a02 	subs.w	sl, r0, r2
 80026ae:	eb61 0b03 	sbc.w	fp, r1, r3
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <main+0xa98>)
 80026b4:	459a      	cmp	sl, r3
 80026b6:	f17b 0300 	sbcs.w	r3, fp, #0
 80026ba:	f0c0 85f8 	bcc.w	80032ae <main+0x1606>
					hx711_tare(&loadcell, 4, 1);
 80026be:	2201      	movs	r2, #1
 80026c0:	2104      	movs	r1, #4
 80026c2:	4820      	ldr	r0, [pc, #128]	; (8002744 <main+0xa9c>)
 80026c4:	f002 f92e 	bl	8004924 <hx711_tare>
					hx711_tare(&loadcell2, 4, 2);
 80026c8:	2202      	movs	r2, #2
 80026ca:	2104      	movs	r1, #4
 80026cc:	481e      	ldr	r0, [pc, #120]	; (8002748 <main+0xaa0>)
 80026ce:	f002 f929 	bl	8004924 <hx711_tare>
					hx711_calibration(&loadcell, 2, rc[0]);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <main+0xaa4>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	eeb0 0a67 	vmov.f32	s0, s15
 80026dc:	2102      	movs	r1, #2
 80026de:	4819      	ldr	r0, [pc, #100]	; (8002744 <main+0xa9c>)
 80026e0:	f002 f9ee 	bl	8004ac0 <hx711_calibration>
					hx711_calibration(&loadcell2, 2, rc[1]);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <main+0xaa4>)
 80026e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	2102      	movs	r1, #2
 80026f0:	4815      	ldr	r0, [pc, #84]	; (8002748 <main+0xaa0>)
 80026f2:	f002 f9e5 	bl	8004ac0 <hx711_calibration>
					hx711_calibration(&loadcell, 1, rc[2]);
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <main+0xaa4>)
 80026f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002700:	2101      	movs	r1, #1
 8002702:	4810      	ldr	r0, [pc, #64]	; (8002744 <main+0xa9c>)
 8002704:	f002 f9dc 	bl	8004ac0 <hx711_calibration>
					hx711_calibration(&loadcell2, 1, rc[3]);
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <main+0xaa4>)
 800270a:	edd3 7a03 	vldr	s15, [r3, #12]
 800270e:	eeb0 0a67 	vmov.f32	s0, s15
 8002712:	2101      	movs	r1, #1
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <main+0xaa0>)
 8002716:	f002 f9d3 	bl	8004ac0 <hx711_calibration>
					state = 0;
 800271a:	4a06      	ldr	r2, [pc, #24]	; (8002734 <main+0xa8c>)
 800271c:	2300      	movs	r3, #0
 800271e:	6013      	str	r3, [r2, #0]
					lcd_write("Ready for", "drone to land");
 8002720:	490b      	ldr	r1, [pc, #44]	; (8002750 <main+0xaa8>)
 8002722:	480c      	ldr	r0, [pc, #48]	; (8002754 <main+0xaac>)
 8002724:	f7ff faa1 	bl	8001c6a <lcd_write>
				break;
 8002728:	f000 bdc1 	b.w	80032ae <main+0x1606>
 800272c:	40020400 	.word	0x40020400
 8002730:	200005c8 	.word	0x200005c8
 8002734:	2000004c 	.word	0x2000004c
 8002738:	200005a0 	.word	0x200005a0
 800273c:	20000688 	.word	0x20000688
 8002740:	00e4e1c0 	.word	0x00e4e1c0
 8002744:	200003cc 	.word	0x200003cc
 8002748:	200003f4 	.word	0x200003f4
 800274c:	20000678 	.word	0x20000678
 8002750:	0800dee4 	.word	0x0800dee4
 8002754:	0800def4 	.word	0x0800def4
				loadcell_flushing();
 8002758:	f003 fce6 	bl	8006128 <loadcell_flushing>
				if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 800275c:	4b84      	ldr	r3, [pc, #528]	; (8002970 <main+0xcc8>)
 800275e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002762:	4b84      	ldr	r3, [pc, #528]	; (8002974 <main+0xccc>)
 8002764:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276c:	4b80      	ldr	r3, [pc, #512]	; (8002970 <main+0xcc8>)
 800276e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002772:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ loadcell2.weightA >= 1.80) {
 8002776:	4b7f      	ldr	r3, [pc, #508]	; (8002974 <main+0xccc>)
 8002778:	edd3 7a08 	vldr	s15, [r3, #32]
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	ee17 0a90 	vmov	r0, s15
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
				if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 8002788:	a377      	add	r3, pc, #476	; (adr r3, 8002968 <main+0xcc0>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fe f9b9 	bl	8000b04 <__aeabi_dcmpge>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <main+0xb0c>
					weight_time = micros();
 8002798:	f001 ff94 	bl	80046c4 <micros>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4975      	ldr	r1, [pc, #468]	; (8002978 <main+0xcd0>)
 80027a2:	e9c1 2300 	strd	r2, r3, [r1]
					state = 1;
 80027a6:	4a75      	ldr	r2, [pc, #468]	; (800297c <main+0xcd4>)
 80027a8:	2301      	movs	r3, #1
 80027aa:	6013      	str	r3, [r2, #0]
					lcd_write("weight detected", "wait for 5 sec");
 80027ac:	4974      	ldr	r1, [pc, #464]	; (8002980 <main+0xcd8>)
 80027ae:	4875      	ldr	r0, [pc, #468]	; (8002984 <main+0xcdc>)
 80027b0:	f7ff fa5b 	bl	8001c6a <lcd_write>
				if (joybutton[3] == 1) {
 80027b4:	4b74      	ldr	r3, [pc, #464]	; (8002988 <main+0xce0>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 857a 	bne.w	80032b2 <main+0x160a>
					lcd_write("Pushing drone", "to charging area");
 80027be:	4973      	ldr	r1, [pc, #460]	; (800298c <main+0xce4>)
 80027c0:	4873      	ldr	r0, [pc, #460]	; (8002990 <main+0xce8>)
 80027c2:	f7ff fa52 	bl	8001c6a <lcd_write>
					state = 11;
 80027c6:	4a6d      	ldr	r2, [pc, #436]	; (800297c <main+0xcd4>)
 80027c8:	230b      	movs	r3, #11
 80027ca:	6013      	str	r3, [r2, #0]
				break;
 80027cc:	f000 bd71 	b.w	80032b2 <main+0x160a>
				loadcell_flushing();
 80027d0:	f003 fcaa 	bl	8006128 <loadcell_flushing>
				if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 80027d4:	4b66      	ldr	r3, [pc, #408]	; (8002970 <main+0xcc8>)
 80027d6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027da:	4b66      	ldr	r3, [pc, #408]	; (8002974 <main+0xccc>)
 80027dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <main+0xcc8>)
 80027e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ea:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ loadcell2.weightA <= 1.80) {
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <main+0xccc>)
 80027f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	ee17 0a90 	vmov	r0, s15
 80027fc:	f7fd fea4 	bl	8000548 <__aeabi_f2d>
				if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 8002800:	a359      	add	r3, pc, #356	; (adr r3, 8002968 <main+0xcc0>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fe f973 	bl	8000af0 <__aeabi_dcmple>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <main+0xb76>
					state = 0;
 8002810:	4a5a      	ldr	r2, [pc, #360]	; (800297c <main+0xcd4>)
 8002812:	2300      	movs	r3, #0
 8002814:	6013      	str	r3, [r2, #0]
					lcd_write("Ready for", "drone to land");
 8002816:	495f      	ldr	r1, [pc, #380]	; (8002994 <main+0xcec>)
 8002818:	485f      	ldr	r0, [pc, #380]	; (8002998 <main+0xcf0>)
 800281a:	f7ff fa26 	bl	8001c6a <lcd_write>
				if (micros() - weight_time >= 5000000) {
 800281e:	f001 ff51 	bl	80046c4 <micros>
 8002822:	4b55      	ldr	r3, [pc, #340]	; (8002978 <main+0xcd0>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	1a84      	subs	r4, r0, r2
 800282a:	62bc      	str	r4, [r7, #40]	; 0x28
 800282c:	eb61 0303 	sbc.w	r3, r1, r3
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <main+0xcf4>)
 8002834:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002838:	4602      	mov	r2, r0
 800283a:	429a      	cmp	r2, r3
 800283c:	460b      	mov	r3, r1
 800283e:	f173 0300 	sbcs.w	r3, r3, #0
 8002842:	f0c0 8538 	bcc.w	80032b6 <main+0x160e>
					state = 2;
 8002846:	4a4d      	ldr	r2, [pc, #308]	; (800297c <main+0xcd4>)
 8002848:	2302      	movs	r3, #2
 800284a:	6013      	str	r3, [r2, #0]
					bluetooth_time = micros();
 800284c:	f001 ff3a 	bl	80046c4 <micros>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4952      	ldr	r1, [pc, #328]	; (80029a0 <main+0xcf8>)
 8002856:	e9c1 2300 	strd	r2, r3, [r1]
					lcd_write("Detecting drone", "communication...");
 800285a:	4952      	ldr	r1, [pc, #328]	; (80029a4 <main+0xcfc>)
 800285c:	4852      	ldr	r0, [pc, #328]	; (80029a8 <main+0xd00>)
 800285e:	f7ff fa04 	bl	8001c6a <lcd_write>
				break;
 8002862:	f000 bd28 	b.w	80032b6 <main+0x160e>
				TX_BUFFER[0] = '1';
 8002866:	4a51      	ldr	r2, [pc, #324]	; (80029ac <main+0xd04>)
 8002868:	2331      	movs	r3, #49	; 0x31
 800286a:	7013      	strb	r3, [r2, #0]
				if (micros() - bluetooth_timestamp >= 500000) {
 800286c:	f001 ff2a 	bl	80046c4 <micros>
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <main+0xd08>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	1a84      	subs	r4, r0, r2
 8002878:	623c      	str	r4, [r7, #32]
 800287a:	eb61 0303 	sbc.w	r3, r1, r3
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <main+0xd0c>)
 8002882:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002886:	4602      	mov	r2, r0
 8002888:	429a      	cmp	r2, r3
 800288a:	460b      	mov	r3, r1
 800288c:	f173 0300 	sbcs.w	r3, r3, #0
 8002890:	d30c      	bcc.n	80028ac <main+0xc04>
					bluetooth_timestamp = micros();
 8002892:	f001 ff17 	bl	80046c4 <micros>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4945      	ldr	r1, [pc, #276]	; (80029b0 <main+0xd08>)
 800289c:	e9c1 2300 	strd	r2, r3, [r1]
					HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 10);
 80028a0:	230a      	movs	r3, #10
 80028a2:	2201      	movs	r2, #1
 80028a4:	4941      	ldr	r1, [pc, #260]	; (80029ac <main+0xd04>)
 80028a6:	4844      	ldr	r0, [pc, #272]	; (80029b8 <main+0xd10>)
 80028a8:	f009 fdb5 	bl	800c416 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 80028ac:	2201      	movs	r2, #1
 80028ae:	4943      	ldr	r1, [pc, #268]	; (80029bc <main+0xd14>)
 80028b0:	4841      	ldr	r0, [pc, #260]	; (80029b8 <main+0xd10>)
 80028b2:	f009 fe42 	bl	800c53a <HAL_UART_Receive_IT>
				if (inputchar == '1') {
 80028b6:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <main+0xd18>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b31      	cmp	r3, #49	; 0x31
 80028bc:	d109      	bne.n	80028d2 <main+0xc2a>
					lcd_write("Pushing drone", "to charging area");
 80028be:	4933      	ldr	r1, [pc, #204]	; (800298c <main+0xce4>)
 80028c0:	4833      	ldr	r0, [pc, #204]	; (8002990 <main+0xce8>)
 80028c2:	f7ff f9d2 	bl	8001c6a <lcd_write>
					state = 11;
 80028c6:	4a2d      	ldr	r2, [pc, #180]	; (800297c <main+0xcd4>)
 80028c8:	230b      	movs	r3, #11
 80028ca:	6013      	str	r3, [r2, #0]
					inputchar = '0';
 80028cc:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <main+0xd18>)
 80028ce:	2330      	movs	r3, #48	; 0x30
 80028d0:	6013      	str	r3, [r2, #0]
				if (micros() - bluetooth_time >= 5000000) {
 80028d2:	f001 fef7 	bl	80046c4 <micros>
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <main+0xcf8>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	1a84      	subs	r4, r0, r2
 80028de:	61bc      	str	r4, [r7, #24]
 80028e0:	eb61 0303 	sbc.w	r3, r1, r3
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <main+0xcf4>)
 80028e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ec:	4602      	mov	r2, r0
 80028ee:	429a      	cmp	r2, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	f173 0300 	sbcs.w	r3, r3, #0
 80028f6:	f0c0 84e0 	bcc.w	80032ba <main+0x1612>
					lcd_write("Ready for", "drone to land");
 80028fa:	4926      	ldr	r1, [pc, #152]	; (8002994 <main+0xcec>)
 80028fc:	4826      	ldr	r0, [pc, #152]	; (8002998 <main+0xcf0>)
 80028fe:	f7ff f9b4 	bl	8001c6a <lcd_write>
					state = 0;
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <main+0xcd4>)
 8002904:	2300      	movs	r3, #0
 8002906:	6013      	str	r3, [r2, #0]
				break;
 8002908:	f000 bcd7 	b.w	80032ba <main+0x1612>
				ptg1 = 597;
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <main+0xd1c>)
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <main+0xd20>)
 8002910:	6013      	str	r3, [r2, #0]
				activate1 = 1;
 8002912:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <main+0xd24>)
 8002914:	2301      	movs	r3, #1
 8002916:	6013      	str	r3, [r2, #0]
				state = 115;
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <main+0xcd4>)
 800291a:	2373      	movs	r3, #115	; 0x73
 800291c:	6013      	str	r3, [r2, #0]
				break;
 800291e:	f000 bce1 	b.w	80032e4 <main+0x163c>
				if (activate1 == 0) {
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <main+0xd24>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 84c9 	bne.w	80032be <main+0x1616>
					ptg1 = 583;
 800292c:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <main+0xd1c>)
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <main+0xd28>)
 8002930:	6013      	str	r3, [r2, #0]
					activate1 = 1;
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <main+0xd24>)
 8002934:	2301      	movs	r3, #1
 8002936:	6013      	str	r3, [r2, #0]
					state = 12;
 8002938:	4a10      	ldr	r2, [pc, #64]	; (800297c <main+0xcd4>)
 800293a:	230c      	movs	r3, #12
 800293c:	6013      	str	r3, [r2, #0]
				break;
 800293e:	f000 bcbe 	b.w	80032be <main+0x1616>
				if (activate1 == 0) {
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <main+0xd24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 84bb 	bne.w	80032c2 <main+0x161a>
					ptg2 = 615;
 800294c:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <main+0xd2c>)
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <main+0xd30>)
 8002950:	6013      	str	r3, [r2, #0]
					activate2 = 1;
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <main+0xd34>)
 8002954:	2301      	movs	r3, #1
 8002956:	6013      	str	r3, [r2, #0]
					state = 13;
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <main+0xcd4>)
 800295a:	230d      	movs	r3, #13
 800295c:	6013      	str	r3, [r2, #0]
				break;
 800295e:	f000 bcb0 	b.w	80032c2 <main+0x161a>
 8002962:	bf00      	nop
 8002964:	f3af 8000 	nop.w
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	3ffccccc 	.word	0x3ffccccc
 8002970:	200003cc 	.word	0x200003cc
 8002974:	200003f4 	.word	0x200003f4
 8002978:	20000690 	.word	0x20000690
 800297c:	2000004c 	.word	0x2000004c
 8002980:	0800df00 	.word	0x0800df00
 8002984:	0800df10 	.word	0x0800df10
 8002988:	200006c0 	.word	0x200006c0
 800298c:	0800df20 	.word	0x0800df20
 8002990:	0800df34 	.word	0x0800df34
 8002994:	0800dee4 	.word	0x0800dee4
 8002998:	0800def4 	.word	0x0800def4
 800299c:	004c4b40 	.word	0x004c4b40
 80029a0:	20000698 	.word	0x20000698
 80029a4:	0800df44 	.word	0x0800df44
 80029a8:	0800df58 	.word	0x0800df58
 80029ac:	20000394 	.word	0x20000394
 80029b0:	200006a0 	.word	0x200006a0
 80029b4:	0007a120 	.word	0x0007a120
 80029b8:	200002f0 	.word	0x200002f0
 80029bc:	20000378 	.word	0x20000378
 80029c0:	20000398 	.word	0x20000398
 80029c4:	200005b4 	.word	0x200005b4
 80029c8:	44154000 	.word	0x44154000
 80029cc:	200005a8 	.word	0x200005a8
 80029d0:	4411c000 	.word	0x4411c000
 80029d4:	200005b8 	.word	0x200005b8
 80029d8:	4419c000 	.word	0x4419c000
 80029dc:	200005ac 	.word	0x200005ac
				laser();
 80029e0:	f003 fc04 	bl	80061ec <laser>
				if (activate2 == 0) {
 80029e4:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <main+0xea0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 846c 	bne.w	80032c6 <main+0x161e>
					if (range1 <= 180 && range2 >= 200) {
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <main+0xea4>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002b50 <main+0xea8>
 80029f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	d813      	bhi.n	8002a2a <main+0xd82>
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <main+0xeac>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002b58 <main+0xeb0>
 8002a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	db09      	blt.n	8002a2a <main+0xd82>
						state = 142;
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <main+0xeb4>)
 8002a18:	238e      	movs	r3, #142	; 0x8e
 8002a1a:	6013      	str	r3, [r2, #0]
						chance = 0;
 8002a1c:	4950      	ldr	r1, [pc, #320]	; (8002b60 <main+0xeb8>)
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9c1 2300 	strd	r2, r3, [r1]
					if (range2 <= 180 && range1 >= 200) {
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <main+0xeac>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002b50 <main+0xea8>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d813      	bhi.n	8002a66 <main+0xdbe>
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <main+0xea4>)
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002b58 <main+0xeb0>
 8002a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	db09      	blt.n	8002a66 <main+0xdbe>
						state = 141;
 8002a52:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <main+0xeb4>)
 8002a54:	238d      	movs	r3, #141	; 0x8d
 8002a56:	6013      	str	r3, [r2, #0]
						chance = 0;
 8002a58:	4941      	ldr	r1, [pc, #260]	; (8002b60 <main+0xeb8>)
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9c1 2300 	strd	r2, r3, [r1]
					if (chance == 0) {
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <main+0xeb8>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	d106      	bne.n	8002a7e <main+0xdd6>
						chance = micros();
 8002a70:	f001 fe28 	bl	80046c4 <micros>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4939      	ldr	r1, [pc, #228]	; (8002b60 <main+0xeb8>)
 8002a7a:	e9c1 2300 	strd	r2, r3, [r1]
					if (micros() - chance >= 3000000) {
 8002a7e:	f001 fe21 	bl	80046c4 <micros>
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <main+0xeb8>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	1a84      	subs	r4, r0, r2
 8002a8a:	613c      	str	r4, [r7, #16]
 8002a8c:	eb61 0303 	sbc.w	r3, r1, r3
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <main+0xebc>)
 8002a94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a98:	4602      	mov	r2, r0
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	f173 0300 	sbcs.w	r3, r3, #0
 8002aa2:	f0c0 8410 	bcc.w	80032c6 <main+0x161e>
						state = 132;
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <main+0xeb4>)
 8002aa8:	2384      	movs	r3, #132	; 0x84
 8002aaa:	6013      	str	r3, [r2, #0]
						chance = 0;
 8002aac:	492c      	ldr	r1, [pc, #176]	; (8002b60 <main+0xeb8>)
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002aba:	f000 bc04 	b.w	80032c6 <main+0x161e>
				lcd_write("Error can't find", "going back");
 8002abe:	492a      	ldr	r1, [pc, #168]	; (8002b68 <main+0xec0>)
 8002ac0:	482a      	ldr	r0, [pc, #168]	; (8002b6c <main+0xec4>)
 8002ac2:	f7ff f8d2 	bl	8001c6a <lcd_write>
				zerostate = 1;
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <main+0xec8>)
 8002ac8:	2301      	movs	r3, #1
 8002aca:	6013      	str	r3, [r2, #0]
				state = 133;
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <main+0xeb4>)
 8002ace:	2385      	movs	r3, #133	; 0x85
 8002ad0:	6013      	str	r3, [r2, #0]
				break;
 8002ad2:	f000 bc07 	b.w	80032e4 <main+0x163c>
				if (zerostate == 0) {
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <main+0xec8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 83f5 	bne.w	80032ca <main+0x1622>
					lcd_write("Ready for", "drone to land");
 8002ae0:	4924      	ldr	r1, [pc, #144]	; (8002b74 <main+0xecc>)
 8002ae2:	4825      	ldr	r0, [pc, #148]	; (8002b78 <main+0xed0>)
 8002ae4:	f7ff f8c1 	bl	8001c6a <lcd_write>
					state = 0;
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <main+0xeb4>)
 8002aea:	2300      	movs	r3, #0
 8002aec:	6013      	str	r3, [r2, #0]
				break;
 8002aee:	e3ec      	b.n	80032ca <main+0x1622>
				ptg2 = 685;
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <main+0xed4>)
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <main+0xed8>)
 8002af4:	6013      	str	r3, [r2, #0]
				activate2 = 1;
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <main+0xea0>)
 8002af8:	2301      	movs	r3, #1
 8002afa:	6013      	str	r3, [r2, #0]
				state = 1412;
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <main+0xeb4>)
 8002afe:	f240 5384 	movw	r3, #1412	; 0x584
 8002b02:	6013      	str	r3, [r2, #0]
				break;
 8002b04:	e3ee      	b.n	80032e4 <main+0x163c>
				if (activate2 == 0) {
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <main+0xea0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 83df 	bne.w	80032ce <main+0x1626>
					state = 15;
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <main+0xeb4>)
 8002b12:	230f      	movs	r3, #15
 8002b14:	6013      	str	r3, [r2, #0]
				break;
 8002b16:	e3da      	b.n	80032ce <main+0x1626>
				ptg1 = 655;
 8002b18:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <main+0xedc>)
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <main+0xee0>)
 8002b1c:	6013      	str	r3, [r2, #0]
				activate1 = 1;
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <main+0xee4>)
 8002b20:	2301      	movs	r3, #1
 8002b22:	6013      	str	r3, [r2, #0]
				state = 1422;
 8002b24:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <main+0xeb4>)
 8002b26:	f240 538e 	movw	r3, #1422	; 0x58e
 8002b2a:	6013      	str	r3, [r2, #0]
				break;
 8002b2c:	e3da      	b.n	80032e4 <main+0x163c>
				if (activate1 == 0) {
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <main+0xee4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 83cd 	bne.w	80032d2 <main+0x162a>
					lcd_write("Charging....", " ");
 8002b38:	4915      	ldr	r1, [pc, #84]	; (8002b90 <main+0xee8>)
 8002b3a:	4816      	ldr	r0, [pc, #88]	; (8002b94 <main+0xeec>)
 8002b3c:	f7ff f895 	bl	8001c6a <lcd_write>
					state = 15;
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <main+0xeb4>)
 8002b42:	230f      	movs	r3, #15
 8002b44:	6013      	str	r3, [r2, #0]
				break;
 8002b46:	e3c4      	b.n	80032d2 <main+0x162a>
 8002b48:	200005ac 	.word	0x200005ac
 8002b4c:	20000598 	.word	0x20000598
 8002b50:	43340000 	.word	0x43340000
 8002b54:	2000059c 	.word	0x2000059c
 8002b58:	43480000 	.word	0x43480000
 8002b5c:	2000004c 	.word	0x2000004c
 8002b60:	200005d0 	.word	0x200005d0
 8002b64:	002dc6c0 	.word	0x002dc6c0
 8002b68:	0800df68 	.word	0x0800df68
 8002b6c:	0800df74 	.word	0x0800df74
 8002b70:	200005a0 	.word	0x200005a0
 8002b74:	0800dee4 	.word	0x0800dee4
 8002b78:	0800def4 	.word	0x0800def4
 8002b7c:	200005b8 	.word	0x200005b8
 8002b80:	442b4000 	.word	0x442b4000
 8002b84:	200005b4 	.word	0x200005b4
 8002b88:	4423c000 	.word	0x4423c000
 8002b8c:	200005a8 	.word	0x200005a8
 8002b90:	0800ded0 	.word	0x0800ded0
 8002b94:	0800df88 	.word	0x0800df88
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b9e:	48b8      	ldr	r0, [pc, #736]	; (8002e80 <main+0x11d8>)
 8002ba0:	f005 f88c 	bl	8007cbc <HAL_GPIO_WritePin>
				HAL_UART_Receive_IT(&huart1, RX_BUFFER2, 8);
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	49b7      	ldr	r1, [pc, #732]	; (8002e84 <main+0x11dc>)
 8002ba8:	48b7      	ldr	r0, [pc, #732]	; (8002e88 <main+0x11e0>)
 8002baa:	f009 fcc6 	bl	800c53a <HAL_UART_Receive_IT>
				voltage_uV = inputchar;
 8002bae:	4bb7      	ldr	r3, [pc, #732]	; (8002e8c <main+0x11e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcb6 	bl	8000524 <__aeabi_i2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	49b4      	ldr	r1, [pc, #720]	; (8002e90 <main+0x11e8>)
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_Delay(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f004 f916 	bl	8006df4 <HAL_Delay>
				current_uA = AutoFox_INA226_GetCurrent_uA(&ina226);
 8002bc8:	48b2      	ldr	r0, [pc, #712]	; (8002e94 <main+0x11ec>)
 8002bca:	f7fe fcbf 	bl	800154c <AutoFox_INA226_GetCurrent_uA>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fca7 	bl	8000524 <__aeabi_i2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	49af      	ldr	r1, [pc, #700]	; (8002e98 <main+0x11f0>)
 8002bdc:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_Delay(1);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f004 f907 	bl	8006df4 <HAL_Delay>
				currentcontrol();
 8002be6:	f003 fb63 	bl	80062b0 <currentcontrol>
				voltage_uV = voltage_uV - current_uA/20000;
 8002bea:	4ba9      	ldr	r3, [pc, #676]	; (8002e90 <main+0x11e8>)
 8002bec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	; (8002e98 <main+0x11f0>)
 8002bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf6:	a39e      	add	r3, pc, #632	; (adr r3, 8002e70 <main+0x11c8>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd fe26 	bl	800084c <__aeabi_ddiv>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7fd fb3e 	bl	8000288 <__aeabi_dsub>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	4b9e      	ldr	r3, [pc, #632]	; (8002e90 <main+0x11e8>)
 8002c16:	e9c3 0100 	strd	r0, r1, [r3]
				if (micros() - lcd_timestamp >= 100000) {
 8002c1a:	f001 fd53 	bl	80046c4 <micros>
 8002c1e:	4b9f      	ldr	r3, [pc, #636]	; (8002e9c <main+0x11f4>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	1a84      	subs	r4, r0, r2
 8002c26:	60bc      	str	r4, [r7, #8]
 8002c28:	eb61 0303 	sbc.w	r3, r1, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b9c      	ldr	r3, [pc, #624]	; (8002ea0 <main+0x11f8>)
 8002c30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c34:	4602      	mov	r2, r0
 8002c36:	429a      	cmp	r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	f173 0300 	sbcs.w	r3, r3, #0
 8002c3e:	f0c0 8156 	bcc.w	8002eee <main+0x1246>
					lcd_timestamp = micros();
 8002c42:	f001 fd3f 	bl	80046c4 <micros>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4994      	ldr	r1, [pc, #592]	; (8002e9c <main+0x11f4>)
 8002c4c:	e9c1 2300 	strd	r2, r3, [r1]
					TX_BUFFER[0] = '2';
 8002c50:	4a94      	ldr	r2, [pc, #592]	; (8002ea4 <main+0x11fc>)
 8002c52:	2332      	movs	r3, #50	; 0x32
 8002c54:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, TX_BUFFER, 1, 10);
 8002c56:	230a      	movs	r3, #10
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4992      	ldr	r1, [pc, #584]	; (8002ea4 <main+0x11fc>)
 8002c5c:	488a      	ldr	r0, [pc, #552]	; (8002e88 <main+0x11e0>)
 8002c5e:	f009 fbda 	bl	800c416 <HAL_UART_Transmit>
					if (chargemenu == 0) {
 8002c62:	4b91      	ldr	r3, [pc, #580]	; (8002ea8 <main+0x1200>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d168      	bne.n	8002d3c <main+0x1094>
								(int) (voltage_uV / 1000),
 8002c6a:	4b89      	ldr	r3, [pc, #548]	; (8002e90 <main+0x11e8>)
 8002c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	4b8d      	ldr	r3, [pc, #564]	; (8002eac <main+0x1204>)
 8002c76:	f7fd fde9 	bl	800084c <__aeabi_ddiv>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
						sprintf(string, "Now:%d.%dV %d.%dA ",
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff53 	bl	8000b2c <__aeabi_d2iz>
 8002c86:	4606      	mov	r6, r0
								((int) voltage_uV % 1000) / 10,
 8002c88:	4b81      	ldr	r3, [pc, #516]	; (8002e90 <main+0x11e8>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ff4b 	bl	8000b2c <__aeabi_d2iz>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <main+0x1208>)
 8002c9a:	fb83 2301 	smull	r2, r3, r3, r1
 8002c9e:	119a      	asrs	r2, r3, #6
 8002ca0:	17cb      	asrs	r3, r1, #31
 8002ca2:	1ad2      	subs	r2, r2, r3
 8002ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	1aca      	subs	r2, r1, r3
						sprintf(string, "Now:%d.%dV %d.%dA ",
 8002cae:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <main+0x120c>)
 8002cb0:	fb83 1302 	smull	r1, r3, r3, r2
 8002cb4:	1099      	asrs	r1, r3, #2
 8002cb6:	17d3      	asrs	r3, r2, #31
 8002cb8:	1acd      	subs	r5, r1, r3
								(int) (current_uA / 1000000),
 8002cba:	4b77      	ldr	r3, [pc, #476]	; (8002e98 <main+0x11f0>)
 8002cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cc0:	a36d      	add	r3, pc, #436	; (adr r3, 8002e78 <main+0x11d0>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fdc1 	bl	800084c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
						sprintf(string, "Now:%d.%dV %d.%dA ",
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff2b 	bl	8000b2c <__aeabi_d2iz>
 8002cd6:	4604      	mov	r4, r0
								((int) current_uA % 1000000) / 10000);
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <main+0x11f0>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ff23 	bl	8000b2c <__aeabi_d2iz>
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <main+0x1210>)
 8002cea:	fb83 2301 	smull	r2, r3, r3, r1
 8002cee:	149a      	asrs	r2, r3, #18
 8002cf0:	17cb      	asrs	r3, r1, #31
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	4b71      	ldr	r3, [pc, #452]	; (8002ebc <main+0x1214>)
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	1aca      	subs	r2, r1, r3
						sprintf(string, "Now:%d.%dV %d.%dA ",
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <main+0x1218>)
 8002cfe:	fb83 1302 	smull	r1, r3, r3, r2
 8002d02:	1319      	asrs	r1, r3, #12
 8002d04:	17d3      	asrs	r3, r2, #31
 8002d06:	1acb      	subs	r3, r1, r3
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	9400      	str	r4, [sp, #0]
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	4632      	mov	r2, r6
 8002d10:	496c      	ldr	r1, [pc, #432]	; (8002ec4 <main+0x121c>)
 8002d12:	486d      	ldr	r0, [pc, #436]	; (8002ec8 <main+0x1220>)
 8002d14:	f00a fbdc 	bl	800d4d0 <siprintf>
						lcd_put_cur(1, 0);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe ff2d 	bl	8001b7a <lcd_put_cur>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d24:	e004      	b.n	8002d30 <main+0x1088>
							hx711_delay_us();
 8002d26:	f001 fce7 	bl	80046f8 <hx711_delay_us>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	ddf7      	ble.n	8002d26 <main+0x107e>
						lcd_send_string(string);
 8002d36:	4864      	ldr	r0, [pc, #400]	; (8002ec8 <main+0x1220>)
 8002d38:	f7fe ff78 	bl	8001c2c <lcd_send_string>
					if (chargemenu == 1) {
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <main+0x1200>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d15c      	bne.n	8002dfe <main+0x1156>
						sprintf(string, "%d.%dA Now:%d.%dA ",
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <main+0x1224>)
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
								((int) (chargingcurrent * 10)) % 10,
 8002d4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <main+0x1224>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d60:	ee17 1a90 	vmov	r1, s15
						sprintf(string, "%d.%dA Now:%d.%dA ",
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <main+0x120c>)
 8002d66:	fb83 2301 	smull	r2, r3, r3, r1
 8002d6a:	109a      	asrs	r2, r3, #2
 8002d6c:	17cb      	asrs	r3, r1, #31
 8002d6e:	1ad4      	subs	r4, r2, r3
 8002d70:	4623      	mov	r3, r4
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4423      	add	r3, r4
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	1acc      	subs	r4, r1, r3
								(int) (current_uA / 1000000),
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <main+0x11f0>)
 8002d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d80:	a33d      	add	r3, pc, #244	; (adr r3, 8002e78 <main+0x11d0>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fd61 	bl	800084c <__aeabi_ddiv>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
						sprintf(string, "%d.%dA Now:%d.%dA ",
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd fecb 	bl	8000b2c <__aeabi_d2iz>
 8002d96:	4605      	mov	r5, r0
								((int) current_uA % 1000000) / 10000);
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <main+0x11f0>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fec3 	bl	8000b2c <__aeabi_d2iz>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <main+0x1210>)
 8002daa:	fb83 2301 	smull	r2, r3, r3, r1
 8002dae:	149a      	asrs	r2, r3, #18
 8002db0:	17cb      	asrs	r3, r1, #31
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <main+0x1214>)
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	1aca      	subs	r2, r1, r3
						sprintf(string, "%d.%dA Now:%d.%dA ",
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <main+0x1218>)
 8002dbe:	fb83 1302 	smull	r1, r3, r3, r2
 8002dc2:	1319      	asrs	r1, r3, #12
 8002dc4:	17d3      	asrs	r3, r2, #31
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	9500      	str	r5, [sp, #0]
 8002dcc:	4623      	mov	r3, r4
 8002dce:	ee18 2a10 	vmov	r2, s16
 8002dd2:	493f      	ldr	r1, [pc, #252]	; (8002ed0 <main+0x1228>)
 8002dd4:	483c      	ldr	r0, [pc, #240]	; (8002ec8 <main+0x1220>)
 8002dd6:	f00a fb7b 	bl	800d4d0 <siprintf>
						lcd_put_cur(1, 0);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe fecc 	bl	8001b7a <lcd_put_cur>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002de2:	2300      	movs	r3, #0
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de6:	e004      	b.n	8002df2 <main+0x114a>
							hx711_delay_us();
 8002de8:	f001 fc86 	bl	80046f8 <hx711_delay_us>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	3301      	adds	r3, #1
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	ddf7      	ble.n	8002de8 <main+0x1140>
						lcd_send_string(string);
 8002df8:	4833      	ldr	r0, [pc, #204]	; (8002ec8 <main+0x1220>)
 8002dfa:	f7fe ff17 	bl	8001c2c <lcd_send_string>
					if (chargemenu == -1) {
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <main+0x1200>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d172      	bne.n	8002eee <main+0x1246>
								(int) (voltage_uV / 1000),
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <main+0x11e8>)
 8002e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <main+0x1204>)
 8002e14:	f7fd fd1a 	bl	800084c <__aeabi_ddiv>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
						sprintf(string, "Now:%d.%dV",
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7fd fe84 	bl	8000b2c <__aeabi_d2iz>
 8002e24:	4604      	mov	r4, r0
								((int) voltage_uV % 1000) / 10);
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <main+0x11e8>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd fe7c 	bl	8000b2c <__aeabi_d2iz>
 8002e34:	4601      	mov	r1, r0
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <main+0x1208>)
 8002e38:	fb83 2301 	smull	r2, r3, r3, r1
 8002e3c:	119a      	asrs	r2, r3, #6
 8002e3e:	17cb      	asrs	r3, r1, #31
 8002e40:	1ad2      	subs	r2, r2, r3
 8002e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	1aca      	subs	r2, r1, r3
						sprintf(string, "Now:%d.%dV",
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <main+0x120c>)
 8002e4e:	fb83 1302 	smull	r1, r3, r3, r2
 8002e52:	1099      	asrs	r1, r3, #2
 8002e54:	17d3      	asrs	r3, r2, #31
 8002e56:	1acb      	subs	r3, r1, r3
 8002e58:	4622      	mov	r2, r4
 8002e5a:	491e      	ldr	r1, [pc, #120]	; (8002ed4 <main+0x122c>)
 8002e5c:	481a      	ldr	r0, [pc, #104]	; (8002ec8 <main+0x1220>)
 8002e5e:	f00a fb37 	bl	800d4d0 <siprintf>
						lcd_put_cur(1, 0);
 8002e62:	2100      	movs	r1, #0
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fe fe88 	bl	8001b7a <lcd_put_cur>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6e:	e038      	b.n	8002ee2 <main+0x123a>
 8002e70:	00000000 	.word	0x00000000
 8002e74:	40d38800 	.word	0x40d38800
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	412e8480 	.word	0x412e8480
 8002e80:	40020800 	.word	0x40020800
 8002e84:	2000038c 	.word	0x2000038c
 8002e88:	200002f0 	.word	0x200002f0
 8002e8c:	20000398 	.word	0x20000398
 8002e90:	20000578 	.word	0x20000578
 8002e94:	20000588 	.word	0x20000588
 8002e98:	20000580 	.word	0x20000580
 8002e9c:	200006b0 	.word	0x200006b0
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	20000394 	.word	0x20000394
 8002ea8:	20000710 	.word	0x20000710
 8002eac:	408f4000 	.word	0x408f4000
 8002eb0:	10624dd3 	.word	0x10624dd3
 8002eb4:	66666667 	.word	0x66666667
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	000f4240 	.word	0x000f4240
 8002ec0:	68db8bad 	.word	0x68db8bad
 8002ec4:	0800df98 	.word	0x0800df98
 8002ec8:	2000037c 	.word	0x2000037c
 8002ecc:	20000050 	.word	0x20000050
 8002ed0:	0800dfac 	.word	0x0800dfac
 8002ed4:	0800dfc0 	.word	0x0800dfc0
							hx711_delay_us();
 8002ed8:	f001 fc0e 	bl	80046f8 <hx711_delay_us>
						for (int c3 = 0; c3 <= 100; c3++) {
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	3301      	adds	r3, #1
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	ddf7      	ble.n	8002ed8 <main+0x1230>
						lcd_send_string(string);
 8002ee8:	489f      	ldr	r0, [pc, #636]	; (8003168 <main+0x14c0>)
 8002eea:	f7fe fe9f 	bl	8001c2c <lcd_send_string>
				if (chargemenu == 0) {
 8002eee:	4b9f      	ldr	r3, [pc, #636]	; (800316c <main+0x14c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d117      	bne.n	8002f26 <main+0x127e>
					if (joyx[2] == 1) {
 8002ef6:	4b9e      	ldr	r3, [pc, #632]	; (8003170 <main+0x14c8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <main+0x1264>
						lcd_write("Adjusting CC:", " ");
 8002efe:	499d      	ldr	r1, [pc, #628]	; (8003174 <main+0x14cc>)
 8002f00:	489d      	ldr	r0, [pc, #628]	; (8003178 <main+0x14d0>)
 8002f02:	f7fe feb2 	bl	8001c6a <lcd_write>
						chargemenu = 1;
 8002f06:	4a99      	ldr	r2, [pc, #612]	; (800316c <main+0x14c4>)
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
					if (joyx[2] == -1) {
 8002f0c:	4b98      	ldr	r3, [pc, #608]	; (8003170 <main+0x14c8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d107      	bne.n	8002f26 <main+0x127e>
						lcd_write("Finish charged?", " ");
 8002f16:	4997      	ldr	r1, [pc, #604]	; (8003174 <main+0x14cc>)
 8002f18:	4898      	ldr	r0, [pc, #608]	; (800317c <main+0x14d4>)
 8002f1a:	f7fe fea6 	bl	8001c6a <lcd_write>
						chargemenu = -1;
 8002f1e:	4a93      	ldr	r2, [pc, #588]	; (800316c <main+0x14c4>)
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	6013      	str	r3, [r2, #0]
				if (chargemenu == 1) {
 8002f26:	4b91      	ldr	r3, [pc, #580]	; (800316c <main+0x14c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d153      	bne.n	8002fd6 <main+0x132e>
					if (joyx[2] == -1) {
 8002f2e:	4b90      	ldr	r3, [pc, #576]	; (8003170 <main+0x14c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d106      	bne.n	8002f46 <main+0x129e>
						lcd_write("Charging....", " ");
 8002f38:	498e      	ldr	r1, [pc, #568]	; (8003174 <main+0x14cc>)
 8002f3a:	4891      	ldr	r0, [pc, #580]	; (8003180 <main+0x14d8>)
 8002f3c:	f7fe fe95 	bl	8001c6a <lcd_write>
						chargemenu = 0;
 8002f40:	4a8a      	ldr	r2, [pc, #552]	; (800316c <main+0x14c4>)
 8002f42:	2300      	movs	r3, #0
 8002f44:	6013      	str	r3, [r2, #0]
					if (joyy[2] == 1)
 8002f46:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <main+0x14dc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d112      	bne.n	8002f74 <main+0x12cc>
						chargingcurrent += 0.1;
 8002f4e:	4b8e      	ldr	r3, [pc, #568]	; (8003188 <main+0x14e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd faf8 	bl	8000548 <__aeabi_f2d>
 8002f58:	a37f      	add	r3, pc, #508	; (adr r3, 8003158 <main+0x14b0>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd f995 	bl	800028c <__adddf3>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fe27 	bl	8000bbc <__aeabi_d2f>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b85      	ldr	r3, [pc, #532]	; (8003188 <main+0x14e0>)
 8002f72:	601a      	str	r2, [r3, #0]
					if (joyy[2] == -1)
 8002f74:	4b83      	ldr	r3, [pc, #524]	; (8003184 <main+0x14dc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d112      	bne.n	8002fa4 <main+0x12fc>
						chargingcurrent -= 0.1;
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <main+0x14e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fae0 	bl	8000548 <__aeabi_f2d>
 8002f88:	a373      	add	r3, pc, #460	; (adr r3, 8003158 <main+0x14b0>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd f97b 	bl	8000288 <__aeabi_dsub>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fe0f 	bl	8000bbc <__aeabi_d2f>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b79      	ldr	r3, [pc, #484]	; (8003188 <main+0x14e0>)
 8002fa2:	601a      	str	r2, [r3, #0]
					if (chargingcurrent >= 10) {
 8002fa4:	4b78      	ldr	r3, [pc, #480]	; (8003188 <main+0x14e0>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	db02      	blt.n	8002fbe <main+0x1316>
						chargingcurrent = 10;
 8002fb8:	4a73      	ldr	r2, [pc, #460]	; (8003188 <main+0x14e0>)
 8002fba:	4b74      	ldr	r3, [pc, #464]	; (800318c <main+0x14e4>)
 8002fbc:	6013      	str	r3, [r2, #0]
					if (chargingcurrent <= 0) {
 8002fbe:	4b72      	ldr	r3, [pc, #456]	; (8003188 <main+0x14e0>)
 8002fc0:	edd3 7a00 	vldr	s15, [r3]
 8002fc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d803      	bhi.n	8002fd6 <main+0x132e>
						chargingcurrent = 0;
 8002fce:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <main+0x14e0>)
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	6013      	str	r3, [r2, #0]
				if (chargemenu == -1) {
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <main+0x14c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d11e      	bne.n	800301e <main+0x1376>
					if (joyx[2] == 1) {
 8002fe0:	4b63      	ldr	r3, [pc, #396]	; (8003170 <main+0x14c8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <main+0x134e>
						lcd_write("Charging....", " ");
 8002fe8:	4962      	ldr	r1, [pc, #392]	; (8003174 <main+0x14cc>)
 8002fea:	4865      	ldr	r0, [pc, #404]	; (8003180 <main+0x14d8>)
 8002fec:	f7fe fe3d 	bl	8001c6a <lcd_write>
						chargemenu = 0;
 8002ff0:	4a5e      	ldr	r2, [pc, #376]	; (800316c <main+0x14c4>)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6013      	str	r3, [r2, #0]
					if (joybutton[3] == 1) {
 8002ff6:	4b66      	ldr	r3, [pc, #408]	; (8003190 <main+0x14e8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10f      	bne.n	800301e <main+0x1376>
						lcd_write("Pushing drone", "back to center");
 8002ffe:	4965      	ldr	r1, [pc, #404]	; (8003194 <main+0x14ec>)
 8003000:	4865      	ldr	r0, [pc, #404]	; (8003198 <main+0x14f0>)
 8003002:	f7fe fe32 	bl	8001c6a <lcd_write>
						chargemenu = 0;
 8003006:	4a59      	ldr	r2, [pc, #356]	; (800316c <main+0x14c4>)
 8003008:	2300      	movs	r3, #0
 800300a:	6013      	str	r3, [r2, #0]
						state = 16;
 800300c:	4a63      	ldr	r2, [pc, #396]	; (800319c <main+0x14f4>)
 800300e:	2310      	movs	r3, #16
 8003010:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003018:	4861      	ldr	r0, [pc, #388]	; (80031a0 <main+0x14f8>)
 800301a:	f004 fe4f 	bl	8007cbc <HAL_GPIO_WritePin>
				if (voltage_uV >= 25180 && chargingcurrent <= 0) {
 800301e:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <main+0x14fc>)
 8003020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003024:	a34e      	add	r3, pc, #312	; (adr r3, 8003160 <main+0x14b8>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fd6b 	bl	8000b04 <__aeabi_dcmpge>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d100      	bne.n	8003036 <main+0x138e>
				break;
 8003034:	e156      	b.n	80032e4 <main+0x163c>
				if (voltage_uV >= 25180 && chargingcurrent <= 0) {
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <main+0x14e0>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d900      	bls.n	8003048 <main+0x13a0>
				break;
 8003046:	e14d      	b.n	80032e4 <main+0x163c>
					lcd_write("Pushing drone", "back to center");
 8003048:	4952      	ldr	r1, [pc, #328]	; (8003194 <main+0x14ec>)
 800304a:	4853      	ldr	r0, [pc, #332]	; (8003198 <main+0x14f0>)
 800304c:	f7fe fe0d 	bl	8001c6a <lcd_write>
					state = 16;
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <main+0x14f4>)
 8003052:	2310      	movs	r3, #16
 8003054:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305c:	4850      	ldr	r0, [pc, #320]	; (80031a0 <main+0x14f8>)
 800305e:	f004 fe2d 	bl	8007cbc <HAL_GPIO_WritePin>
					chargemenu = 0;
 8003062:	4a42      	ldr	r2, [pc, #264]	; (800316c <main+0x14c4>)
 8003064:	2300      	movs	r3, #0
 8003066:	6013      	str	r3, [r2, #0]
				break;
 8003068:	e13c      	b.n	80032e4 <main+0x163c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003070:	484b      	ldr	r0, [pc, #300]	; (80031a0 <main+0x14f8>)
 8003072:	f004 fe23 	bl	8007cbc <HAL_GPIO_WritePin>
				ptg1 = 0;
 8003076:	4a4c      	ldr	r2, [pc, #304]	; (80031a8 <main+0x1500>)
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	6013      	str	r3, [r2, #0]
				activate1 = 1;
 800307e:	4a4b      	ldr	r2, [pc, #300]	; (80031ac <main+0x1504>)
 8003080:	2301      	movs	r3, #1
 8003082:	6013      	str	r3, [r2, #0]
				state = 17;
 8003084:	4a45      	ldr	r2, [pc, #276]	; (800319c <main+0x14f4>)
 8003086:	2311      	movs	r3, #17
 8003088:	6013      	str	r3, [r2, #0]
				break;
 800308a:	e12b      	b.n	80032e4 <main+0x163c>
				if (distancemetre1 <= 500) {
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <main+0x1508>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80031b4 <main+0x150c>
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	d900      	bls.n	80030a2 <main+0x13fa>
				break;
 80030a0:	e120      	b.n	80032e4 <main+0x163c>
					ptg2 = 0;
 80030a2:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <main+0x1510>)
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	6013      	str	r3, [r2, #0]
					activate2 = 1;
 80030aa:	4a44      	ldr	r2, [pc, #272]	; (80031bc <main+0x1514>)
 80030ac:	2301      	movs	r3, #1
 80030ae:	6013      	str	r3, [r2, #0]
					state = 18;
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <main+0x14f4>)
 80030b2:	2312      	movs	r3, #18
 80030b4:	6013      	str	r3, [r2, #0]
				break;
 80030b6:	e115      	b.n	80032e4 <main+0x163c>
				if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <main+0x1508>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80031b4 <main+0x150c>
 80030c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d900      	bls.n	80030ce <main+0x1426>
				break;
 80030cc:	e10a      	b.n	80032e4 <main+0x163c>
				if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 80030ce:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <main+0x1518>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80031c4 <main+0x151c>
 80030d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e0:	d900      	bls.n	80030e4 <main+0x143c>
				break;
 80030e2:	e0ff      	b.n	80032e4 <main+0x163c>
					ptg3 = 635;
 80030e4:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <main+0x1520>)
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <main+0x1524>)
 80030e8:	6013      	str	r3, [r2, #0]
					in5 = 1;
 80030ea:	4a39      	ldr	r2, [pc, #228]	; (80031d0 <main+0x1528>)
 80030ec:	2301      	movs	r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
					in6 = 0;
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <main+0x152c>)
 80030f2:	2300      	movs	r3, #0
 80030f4:	6013      	str	r3, [r2, #0]
					activate3 = 1;
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <main+0x1530>)
 80030f8:	2301      	movs	r3, #1
 80030fa:	6013      	str	r3, [r2, #0]
					state = 19;
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <main+0x14f4>)
 80030fe:	2313      	movs	r3, #19
 8003100:	6013      	str	r3, [r2, #0]
				break;
 8003102:	e0ef      	b.n	80032e4 <main+0x163c>
				if (activate3 == 0) {
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <main+0x1530>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 80e4 	bne.w	80032d6 <main+0x162e>
					lcd_write("Go back to", "initialize state");
 800310e:	4933      	ldr	r1, [pc, #204]	; (80031dc <main+0x1534>)
 8003110:	4833      	ldr	r0, [pc, #204]	; (80031e0 <main+0x1538>)
 8003112:	f7fe fdaa 	bl	8001c6a <lcd_write>
					zerostate = 1;
 8003116:	4a33      	ldr	r2, [pc, #204]	; (80031e4 <main+0x153c>)
 8003118:	2301      	movs	r3, #1
 800311a:	6013      	str	r3, [r2, #0]
					state = 20;
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <main+0x14f4>)
 800311e:	2314      	movs	r3, #20
 8003120:	6013      	str	r3, [r2, #0]
					activate2 = 0;
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <main+0x1514>)
 8003124:	2300      	movs	r3, #0
 8003126:	6013      	str	r3, [r2, #0]
				break;
 8003128:	e0d5      	b.n	80032d6 <main+0x162e>
				if (zerostate == 0) {
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <main+0x153c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80d3 	bne.w	80032da <main+0x1632>
					weight_time = micros();
 8003134:	f001 fac6 	bl	80046c4 <micros>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	492a      	ldr	r1, [pc, #168]	; (80031e8 <main+0x1540>)
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
					lcd_write("wait for drone", "to fly off");
 8003142:	492a      	ldr	r1, [pc, #168]	; (80031ec <main+0x1544>)
 8003144:	482a      	ldr	r0, [pc, #168]	; (80031f0 <main+0x1548>)
 8003146:	f7fe fd90 	bl	8001c6a <lcd_write>
					state = 21;
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <main+0x14f4>)
 800314c:	2315      	movs	r3, #21
 800314e:	6013      	str	r3, [r2, #0]
				break;
 8003150:	e0c3      	b.n	80032da <main+0x1632>
 8003152:	bf00      	nop
 8003154:	f3af 8000 	nop.w
 8003158:	9999999a 	.word	0x9999999a
 800315c:	3fb99999 	.word	0x3fb99999
 8003160:	00000000 	.word	0x00000000
 8003164:	40d89700 	.word	0x40d89700
 8003168:	2000037c 	.word	0x2000037c
 800316c:	20000710 	.word	0x20000710
 8003170:	200006d0 	.word	0x200006d0
 8003174:	0800ded0 	.word	0x0800ded0
 8003178:	0800dfcc 	.word	0x0800dfcc
 800317c:	0800dfdc 	.word	0x0800dfdc
 8003180:	0800df88 	.word	0x0800df88
 8003184:	200006dc 	.word	0x200006dc
 8003188:	20000050 	.word	0x20000050
 800318c:	41200000 	.word	0x41200000
 8003190:	200006c0 	.word	0x200006c0
 8003194:	0800dfec 	.word	0x0800dfec
 8003198:	0800df34 	.word	0x0800df34
 800319c:	2000004c 	.word	0x2000004c
 80031a0:	40020800 	.word	0x40020800
 80031a4:	20000578 	.word	0x20000578
 80031a8:	200005b4 	.word	0x200005b4
 80031ac:	200005a8 	.word	0x200005a8
 80031b0:	20000500 	.word	0x20000500
 80031b4:	43fa0000 	.word	0x43fa0000
 80031b8:	200005b8 	.word	0x200005b8
 80031bc:	200005ac 	.word	0x200005ac
 80031c0:	20000504 	.word	0x20000504
 80031c4:	437a0000 	.word	0x437a0000
 80031c8:	200005bc 	.word	0x200005bc
 80031cc:	441ec000 	.word	0x441ec000
 80031d0:	200003c0 	.word	0x200003c0
 80031d4:	200003c4 	.word	0x200003c4
 80031d8:	200005b0 	.word	0x200005b0
 80031dc:	0800dffc 	.word	0x0800dffc
 80031e0:	0800e010 	.word	0x0800e010
 80031e4:	200005a0 	.word	0x200005a0
 80031e8:	20000690 	.word	0x20000690
 80031ec:	0800e01c 	.word	0x0800e01c
 80031f0:	0800e028 	.word	0x0800e028
				loadcell_flushing();
 80031f4:	f002 ff98 	bl	8006128 <loadcell_flushing>
				if (micros() - weight_time >= 5000000) {
 80031f8:	f001 fa64 	bl	80046c4 <micros>
 80031fc:	4b74      	ldr	r3, [pc, #464]	; (80033d0 <main+0x1728>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	1a84      	subs	r4, r0, r2
 8003204:	603c      	str	r4, [r7, #0]
 8003206:	eb61 0303 	sbc.w	r3, r1, r3
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	4b71      	ldr	r3, [pc, #452]	; (80033d4 <main+0x172c>)
 800320e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003212:	4602      	mov	r2, r0
 8003214:	429a      	cmp	r2, r3
 8003216:	460b      	mov	r3, r1
 8003218:	f173 0300 	sbcs.w	r3, r3, #0
 800321c:	d35f      	bcc.n	80032de <main+0x1636>
					if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 800321e:	4b6e      	ldr	r3, [pc, #440]	; (80033d8 <main+0x1730>)
 8003220:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <main+0x1734>)
 8003226:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800322a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <main+0x1730>)
 8003230:	edd3 7a08 	vldr	s15, [r3, #32]
 8003234:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ loadcell2.weightA <= 1.80) {
 8003238:	4b68      	ldr	r3, [pc, #416]	; (80033dc <main+0x1734>)
 800323a:	edd3 7a08 	vldr	s15, [r3, #32]
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	ee17 0a90 	vmov	r0, s15
 8003246:	f7fd f97f 	bl	8000548 <__aeabi_f2d>
					if (loadcell.weightB + loadcell2.weightB + loadcell.weightA
 800324a:	a35f      	add	r3, pc, #380	; (adr r3, 80033c8 <main+0x1720>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd fc4e 	bl	8000af0 <__aeabi_dcmple>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d100      	bne.n	800325c <main+0x15b4>
				break;
 800325a:	e040      	b.n	80032de <main+0x1636>
						state = 0;
 800325c:	4a60      	ldr	r2, [pc, #384]	; (80033e0 <main+0x1738>)
 800325e:	2300      	movs	r3, #0
 8003260:	6013      	str	r3, [r2, #0]
						lcd_write("Ready for", "drone to land");
 8003262:	4960      	ldr	r1, [pc, #384]	; (80033e4 <main+0x173c>)
 8003264:	4860      	ldr	r0, [pc, #384]	; (80033e8 <main+0x1740>)
 8003266:	f7fe fd00 	bl	8001c6a <lcd_write>
				break;
 800326a:	e038      	b.n	80032de <main+0x1636>
				if (emergency == 0) {
 800326c:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <main+0x1744>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d136      	bne.n	80032e2 <main+0x163a>
					lcd_write("Go back to", "initialize state");
 8003274:	495e      	ldr	r1, [pc, #376]	; (80033f0 <main+0x1748>)
 8003276:	485f      	ldr	r0, [pc, #380]	; (80033f4 <main+0x174c>)
 8003278:	f7fe fcf7 	bl	8001c6a <lcd_write>
					zerostate = 1;
 800327c:	4a5e      	ldr	r2, [pc, #376]	; (80033f8 <main+0x1750>)
 800327e:	2301      	movs	r3, #1
 8003280:	6013      	str	r3, [r2, #0]
					state = 23;
 8003282:	4a57      	ldr	r2, [pc, #348]	; (80033e0 <main+0x1738>)
 8003284:	2317      	movs	r3, #23
 8003286:	6013      	str	r3, [r2, #0]
				break;
 8003288:	e02b      	b.n	80032e2 <main+0x163a>
				if (zerostate == 0) {
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <main+0x1750>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <main+0x15fe>
					lcd_write("Ready for", "drone to land");
 8003292:	4954      	ldr	r1, [pc, #336]	; (80033e4 <main+0x173c>)
 8003294:	4854      	ldr	r0, [pc, #336]	; (80033e8 <main+0x1740>)
 8003296:	f7fe fce8 	bl	8001c6a <lcd_write>
					state = 0;
 800329a:	4a51      	ldr	r2, [pc, #324]	; (80033e0 <main+0x1738>)
 800329c:	2300      	movs	r3, #0
 800329e:	6013      	str	r3, [r2, #0]
				break;
 80032a0:	e001      	b.n	80032a6 <main+0x15fe>
			}
		}
 80032a2:	bf00      	nop
 80032a4:	e01e      	b.n	80032e4 <main+0x163c>
				break;
 80032a6:	bf00      	nop
 80032a8:	e01c      	b.n	80032e4 <main+0x163c>
				break;
 80032aa:	bf00      	nop
 80032ac:	e01a      	b.n	80032e4 <main+0x163c>
				break;
 80032ae:	bf00      	nop
 80032b0:	e018      	b.n	80032e4 <main+0x163c>
				break;
 80032b2:	bf00      	nop
 80032b4:	e016      	b.n	80032e4 <main+0x163c>
				break;
 80032b6:	bf00      	nop
 80032b8:	e014      	b.n	80032e4 <main+0x163c>
				break;
 80032ba:	bf00      	nop
 80032bc:	e012      	b.n	80032e4 <main+0x163c>
				break;
 80032be:	bf00      	nop
 80032c0:	e010      	b.n	80032e4 <main+0x163c>
				break;
 80032c2:	bf00      	nop
 80032c4:	e00e      	b.n	80032e4 <main+0x163c>
				break;
 80032c6:	bf00      	nop
 80032c8:	e00c      	b.n	80032e4 <main+0x163c>
				break;
 80032ca:	bf00      	nop
 80032cc:	e00a      	b.n	80032e4 <main+0x163c>
				break;
 80032ce:	bf00      	nop
 80032d0:	e008      	b.n	80032e4 <main+0x163c>
				break;
 80032d2:	bf00      	nop
 80032d4:	e006      	b.n	80032e4 <main+0x163c>
				break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <main+0x163c>
				break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <main+0x163c>
				break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <main+0x163c>
				break;
 80032e2:	bf00      	nop
//		laser();
		if (state == 22) {
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <main+0x1738>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b16      	cmp	r3, #22
 80032ea:	d10a      	bne.n	8003302 <main+0x165a>
				if(once == 0){
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <main+0x1754>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <main+0x165a>
					once = 1;
 80032f4:	4a41      	ldr	r2, [pc, #260]	; (80033fc <main+0x1754>)
 80032f6:	2301      	movs	r3, #1
 80032f8:	6013      	str	r3, [r2, #0]
					lcd_write("Emergency", "detected");
 80032fa:	4941      	ldr	r1, [pc, #260]	; (8003400 <main+0x1758>)
 80032fc:	4841      	ldr	r0, [pc, #260]	; (8003404 <main+0x175c>)
 80032fe:	f7fe fcb4 	bl	8001c6a <lcd_write>
			}
		}
//	  Limit switch
		limitswitchlowpass();
 8003302:	f002 f833 	bl	800536c <limitswitchlowpass>
//	  set zero
		setzero();
 8003306:	f002 fd6b 	bl	8005de0 <setzero>
//	  Distance measurement
		distancemeasurement();
 800330a:	f002 f8e1 	bl	80054d0 <distancemeasurement>
//	  velocity measurement
		if (micros() - Timestamp_Encoder >= 100) {
 800330e:	f001 f9d9 	bl	80046c4 <micros>
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <main+0x1760>)
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	ebb0 0802 	subs.w	r8, r0, r2
 800331c:	eb61 0903 	sbc.w	r9, r1, r3
 8003320:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8003324:	f179 0300 	sbcs.w	r3, r9, #0
 8003328:	d301      	bcc.n	800332e <main+0x1686>
			velocitymeasurement();
 800332a:	f002 fac1 	bl	80058b0 <velocitymeasurement>
		}
//		laser();
//	  go to position
		if (activate1 == 1 && zerostate == 0) {
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <main+0x1764>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <main+0x169e>
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <main+0x1750>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <main+0x169e>
			gotoposition(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f002 fbf2 	bl	8005b28 <gotoposition>
 8003344:	e00b      	b.n	800335e <main+0x16b6>
		} else if (activate1 == 1 && zerostate == 0) {
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <main+0x1764>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <main+0x16b6>
 800334e:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <main+0x1750>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <main+0x16b6>
			require1 = 0;
 8003356:	4a2e      	ldr	r2, [pc, #184]	; (8003410 <main+0x1768>)
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	6013      	str	r3, [r2, #0]
		}
		if (activate2 == 1 && zerostate == 0) {
 800335e:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <main+0x176c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <main+0x16ce>
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <main+0x1750>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <main+0x16ce>
			gotoposition(2);
 800336e:	2002      	movs	r0, #2
 8003370:	f002 fbda 	bl	8005b28 <gotoposition>
 8003374:	e00b      	b.n	800338e <main+0x16e6>
		} else if (activate2 == 1 && zerostate == 0) {
 8003376:	4b27      	ldr	r3, [pc, #156]	; (8003414 <main+0x176c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <main+0x16e6>
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <main+0x1750>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <main+0x16e6>
			require2 = 0;
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <main+0x1770>)
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	6013      	str	r3, [r2, #0]
		}
		if (activate3 == 1 && zerostate == 0) {
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <main+0x1774>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <main+0x16fe>
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <main+0x1750>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <main+0x16fe>
			gotoposition(3);
 800339e:	2003      	movs	r0, #3
 80033a0:	f002 fbc2 	bl	8005b28 <gotoposition>
 80033a4:	e00b      	b.n	80033be <main+0x1716>
		} else if (activate3 == 1 && zerostate == 0) {
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <main+0x1774>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <main+0x1716>
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <main+0x1750>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <main+0x1716>
			require3 = 0;
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <main+0x1778>)
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	6013      	str	r3, [r2, #0]
		}
//	  PWM drive
		pwmdrive();
 80033be:	f002 fe23 	bl	8006008 <pwmdrive>
		if (ledred==1){
 80033c2:	f7fe bf94 	b.w	80022ee <main+0x646>
 80033c6:	bf00      	nop
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	3ffccccc 	.word	0x3ffccccc
 80033d0:	20000690 	.word	0x20000690
 80033d4:	004c4b40 	.word	0x004c4b40
 80033d8:	200003cc 	.word	0x200003cc
 80033dc:	200003f4 	.word	0x200003f4
 80033e0:	2000004c 	.word	0x2000004c
 80033e4:	0800dee4 	.word	0x0800dee4
 80033e8:	0800def4 	.word	0x0800def4
 80033ec:	200005c8 	.word	0x200005c8
 80033f0:	0800dffc 	.word	0x0800dffc
 80033f4:	0800e010 	.word	0x0800e010
 80033f8:	200005a0 	.word	0x200005a0
 80033fc:	20000714 	.word	0x20000714
 8003400:	0800e038 	.word	0x0800e038
 8003404:	0800e044 	.word	0x0800e044
 8003408:	200005c0 	.word	0x200005c0
 800340c:	200005a8 	.word	0x200005a8
 8003410:	200004b4 	.word	0x200004b4
 8003414:	200005ac 	.word	0x200005ac
 8003418:	200004cc 	.word	0x200004cc
 800341c:	200005b0 	.word	0x200005b0
 8003420:	200004e4 	.word	0x200004e4

08003424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b094      	sub	sp, #80	; 0x50
 8003428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342a:	f107 0320 	add.w	r3, r7, #32
 800342e:	2230      	movs	r2, #48	; 0x30
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f00a f844 	bl	800d4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <SystemClock_Config+0xc8>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <SystemClock_Config+0xc8>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <SystemClock_Config+0xc8>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <SystemClock_Config+0xcc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <SystemClock_Config+0xcc>)
 800346e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <SystemClock_Config+0xcc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003480:	2302      	movs	r3, #2
 8003482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003484:	2301      	movs	r3, #1
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003488:	2310      	movs	r3, #16
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348c:	2302      	movs	r3, #2
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003490:	2300      	movs	r3, #0
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003494:	2308      	movs	r3, #8
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003498:	2364      	movs	r3, #100	; 0x64
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800349c:	2302      	movs	r3, #2
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034a0:	2304      	movs	r3, #4
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a4:	f107 0320 	add.w	r3, r7, #32
 80034a8:	4618      	mov	r0, r3
 80034aa:	f007 f9d7 	bl	800a85c <HAL_RCC_OscConfig>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034b4:	f003 f888 	bl	80065c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b8:	230f      	movs	r3, #15
 80034ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2103      	movs	r1, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f007 fc39 	bl	800ad4c <HAL_RCC_ClockConfig>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80034e0:	f003 f872 	bl	80065c8 <Error_Handler>
  }
}
 80034e4:	bf00      	nop
 80034e6:	3750      	adds	r7, #80	; 0x50
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034fa:	463b      	mov	r3, r7
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <MX_ADC1_Init+0x98>)
 8003508:	4a21      	ldr	r2, [pc, #132]	; (8003590 <MX_ADC1_Init+0x9c>)
 800350a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <MX_ADC1_Init+0x98>)
 800350e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MX_ADC1_Init+0x98>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <MX_ADC1_Init+0x98>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_ADC1_Init+0x98>)
 8003522:	2200      	movs	r2, #0
 8003524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <MX_ADC1_Init+0x98>)
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <MX_ADC1_Init+0x98>)
 8003530:	2200      	movs	r2, #0
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <MX_ADC1_Init+0x98>)
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <MX_ADC1_Init+0xa0>)
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <MX_ADC1_Init+0x98>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <MX_ADC1_Init+0x98>)
 8003542:	2201      	movs	r2, #1
 8003544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_ADC1_Init+0x98>)
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <MX_ADC1_Init+0x98>)
 8003550:	2201      	movs	r2, #1
 8003552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <MX_ADC1_Init+0x98>)
 8003556:	f003 fc71 	bl	8006e3c <HAL_ADC_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003560:	f003 f832 	bl	80065c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003564:	230e      	movs	r3, #14
 8003566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003570:	463b      	mov	r3, r7
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_ADC1_Init+0x98>)
 8003576:	f003 fe25 	bl	80071c4 <HAL_ADC_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003580:	f003 f822 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200000ec 	.word	0x200000ec
 8003590:	40012000 	.word	0x40012000
 8003594:	0f000001 	.word	0x0f000001

08003598 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <MX_I2C2_Init+0x50>)
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <MX_I2C2_Init+0x54>)
 80035a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035a4:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <MX_I2C2_Init+0x58>)
 80035a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035d4:	4804      	ldr	r0, [pc, #16]	; (80035e8 <MX_I2C2_Init+0x50>)
 80035d6:	f004 fba3 	bl	8007d20 <HAL_I2C_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80035e0:	f002 fff2 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000134 	.word	0x20000134
 80035ec:	40005800 	.word	0x40005800
 80035f0:	000186a0 	.word	0x000186a0

080035f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f009 ff5c 	bl	800d4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <MX_TIM1_Init+0xa8>)
 8003612:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <MX_TIM1_Init+0xac>)
 8003614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <MX_TIM1_Init+0xa8>)
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <MX_TIM1_Init+0xa8>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <MX_TIM1_Init+0xa8>)
 8003624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <MX_TIM1_Init+0xa8>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_TIM1_Init+0xa8>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <MX_TIM1_Init+0xa8>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800363c:	2303      	movs	r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003644:	2301      	movs	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	4619      	mov	r1, r3
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <MX_TIM1_Init+0xa8>)
 8003668:	f007 ff4c 	bl	800b504 <HAL_TIM_Encoder_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003672:	f002 ffa9 	bl	80065c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4806      	ldr	r0, [pc, #24]	; (800369c <MX_TIM1_Init+0xa8>)
 8003684:	f008 fdf8 	bl	800c278 <HAL_TIMEx_MasterConfigSynchronization>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800368e:	f002 ff9b 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003692:	bf00      	nop
 8003694:	3730      	adds	r7, #48	; 0x30
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000188 	.word	0x20000188
 80036a0:	40010000 	.word	0x40010000

080036a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f009 ff04 	bl	800d4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e2:	4b19      	ldr	r3, [pc, #100]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036e8:	2303      	movs	r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4619      	mov	r1, r3
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <MX_TIM2_Init+0xa4>)
 8003714:	f007 fef6 	bl	800b504 <HAL_TIM_Encoder_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800371e:	f002 ff53 	bl	80065c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <MX_TIM2_Init+0xa4>)
 8003730:	f008 fda2 	bl	800c278 <HAL_TIMEx_MasterConfigSynchronization>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800373a:	f002 ff45 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200001d0 	.word	0x200001d0

0800374c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f009 feb0 	bl	800d4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <MX_TIM3_Init+0xa0>)
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <MX_TIM3_Init+0xa4>)
 800376c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <MX_TIM3_Init+0xa0>)
 800377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <MX_TIM3_Init+0xa0>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800378e:	2303      	movs	r3, #3
 8003790:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003796:	2301      	movs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4619      	mov	r1, r3
 80037b8:	480c      	ldr	r0, [pc, #48]	; (80037ec <MX_TIM3_Init+0xa0>)
 80037ba:	f007 fea3 	bl	800b504 <HAL_TIM_Encoder_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f002 ff00 	bl	80065c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_TIM3_Init+0xa0>)
 80037d6:	f008 fd4f 	bl	800c278 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037e0:	f002 fef2 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037e4:	bf00      	nop
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000218 	.word	0x20000218
 80037f0:	40000400 	.word	0x40000400

080037f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	; 0x38
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003808:	f107 0320 	add.w	r3, r7, #32
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	615a      	str	r2, [r3, #20]
 8003822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <MX_TIM4_Init+0x110>)
 8003826:	4a38      	ldr	r2, [pc, #224]	; (8003908 <MX_TIM4_Init+0x114>)
 8003828:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <MX_TIM4_Init+0x110>)
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <MX_TIM4_Init+0x110>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <MX_TIM4_Init+0x110>)
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <MX_TIM4_Init+0x110>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <MX_TIM4_Init+0x110>)
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800384a:	482e      	ldr	r0, [pc, #184]	; (8003904 <MX_TIM4_Init+0x110>)
 800384c:	f007 fc9e 	bl	800b18c <HAL_TIM_Base_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003856:	f002 feb7 	bl	80065c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800385a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003864:	4619      	mov	r1, r3
 8003866:	4827      	ldr	r0, [pc, #156]	; (8003904 <MX_TIM4_Init+0x110>)
 8003868:	f008 f94a 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003872:	f002 fea9 	bl	80065c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003876:	4823      	ldr	r0, [pc, #140]	; (8003904 <MX_TIM4_Init+0x110>)
 8003878:	f007 fd3a 	bl	800b2f0 <HAL_TIM_PWM_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003882:	f002 fea1 	bl	80065c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800388e:	f107 0320 	add.w	r3, r7, #32
 8003892:	4619      	mov	r1, r3
 8003894:	481b      	ldr	r0, [pc, #108]	; (8003904 <MX_TIM4_Init+0x110>)
 8003896:	f008 fcef 	bl	800c278 <HAL_TIMEx_MasterConfigSynchronization>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80038a0:	f002 fe92 	bl	80065c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038a4:	2360      	movs	r3, #96	; 0x60
 80038a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	4619      	mov	r1, r3
 80038ba:	4812      	ldr	r0, [pc, #72]	; (8003904 <MX_TIM4_Init+0x110>)
 80038bc:	f008 f85e 	bl	800b97c <HAL_TIM_PWM_ConfigChannel>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80038c6:	f002 fe7f 	bl	80065c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2204      	movs	r2, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <MX_TIM4_Init+0x110>)
 80038d2:	f008 f853 	bl	800b97c <HAL_TIM_PWM_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80038dc:	f002 fe74 	bl	80065c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	2208      	movs	r2, #8
 80038e4:	4619      	mov	r1, r3
 80038e6:	4807      	ldr	r0, [pc, #28]	; (8003904 <MX_TIM4_Init+0x110>)
 80038e8:	f008 f848 	bl	800b97c <HAL_TIM_PWM_ConfigChannel>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80038f2:	f002 fe69 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80038f6:	4803      	ldr	r0, [pc, #12]	; (8003904 <MX_TIM4_Init+0x110>)
 80038f8:	f003 f84e 	bl	8006998 <HAL_TIM_MspPostInit>

}
 80038fc:	bf00      	nop
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000260 	.word	0x20000260
 8003908:	40000800 	.word	0x40000800

0800390c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003920:	463b      	mov	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <MX_TIM5_Init+0x94>)
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <MX_TIM5_Init+0x98>)
 800392c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <MX_TIM5_Init+0x94>)
 8003930:	2263      	movs	r2, #99	; 0x63
 8003932:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <MX_TIM5_Init+0x94>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <MX_TIM5_Init+0x94>)
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_TIM5_Init+0x94>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <MX_TIM5_Init+0x94>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800394e:	4814      	ldr	r0, [pc, #80]	; (80039a0 <MX_TIM5_Init+0x94>)
 8003950:	f007 fc1c 	bl	800b18c <HAL_TIM_Base_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800395a:	f002 fe35 	bl	80065c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4619      	mov	r1, r3
 800396a:	480d      	ldr	r0, [pc, #52]	; (80039a0 <MX_TIM5_Init+0x94>)
 800396c:	f008 f8c8 	bl	800bb00 <HAL_TIM_ConfigClockSource>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003976:	f002 fe27 	bl	80065c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003982:	463b      	mov	r3, r7
 8003984:	4619      	mov	r1, r3
 8003986:	4806      	ldr	r0, [pc, #24]	; (80039a0 <MX_TIM5_Init+0x94>)
 8003988:	f008 fc76 	bl	800c278 <HAL_TIMEx_MasterConfigSynchronization>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003992:	f002 fe19 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200002a8 	.word	0x200002a8
 80039a4:	40000c00 	.word	0x40000c00

080039a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <MX_USART1_UART_Init+0x50>)
 80039b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039ce:	220c      	movs	r2, #12
 80039d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039de:	4805      	ldr	r0, [pc, #20]	; (80039f4 <MX_USART1_UART_Init+0x4c>)
 80039e0:	f008 fccc 	bl	800c37c <HAL_UART_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039ea:	f002 fded 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200002f0 	.word	0x200002f0
 80039f8:	40011000 	.word	0x40011000

080039fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <MX_USART6_UART_Init+0x50>)
 8003a04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a22:	220c      	movs	r2, #12
 8003a24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <MX_USART6_UART_Init+0x4c>)
 8003a34:	f008 fca2 	bl	800c37c <HAL_UART_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003a3e:	f002 fdc3 	bl	80065c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000334 	.word	0x20000334
 8003a4c:	40011400 	.word	0x40011400

08003a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	4b84      	ldr	r3, [pc, #528]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a83      	ldr	r2, [pc, #524]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a67      	ldr	r2, [pc, #412]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <MX_GPIO_Init+0x22c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8003af2:	2200      	movs	r2, #0
 8003af4:	f641 4105 	movw	r1, #7173	; 0x1c05
 8003af8:	4861      	ldr	r0, [pc, #388]	; (8003c80 <MX_GPIO_Init+0x230>)
 8003afa:	f004 f8df 	bl	8007cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8003afe:	2200      	movs	r2, #0
 8003b00:	213c      	movs	r1, #60	; 0x3c
 8003b02:	4860      	ldr	r0, [pc, #384]	; (8003c84 <MX_GPIO_Init+0x234>)
 8003b04:	f004 f8da 	bl	8007cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f249 013f 	movw	r1, #36927	; 0x903f
 8003b0e:	485e      	ldr	r0, [pc, #376]	; (8003c88 <MX_GPIO_Init+0x238>)
 8003b10:	f004 f8d4 	bl	8007cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2104      	movs	r1, #4
 8003b18:	485c      	ldr	r0, [pc, #368]	; (8003c8c <MX_GPIO_Init+0x23c>)
 8003b1a:	f004 f8cf 	bl	8007cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4852      	ldr	r0, [pc, #328]	; (8003c80 <MX_GPIO_Init+0x230>)
 8003b36:	f003 ff25 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8003b3a:	f641 4305 	movw	r3, #7173	; 0x1c05
 8003b3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b40:	2301      	movs	r3, #1
 8003b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	484b      	ldr	r0, [pc, #300]	; (8003c80 <MX_GPIO_Init+0x230>)
 8003b54:	f003 ff16 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8003b58:	f240 338a 	movw	r3, #906	; 0x38a
 8003b5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4844      	ldr	r0, [pc, #272]	; (8003c80 <MX_GPIO_Init+0x230>)
 8003b6e:	f003 ff09 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LD2_Pin;
 8003b72:	232c      	movs	r3, #44	; 0x2c
 8003b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4619      	mov	r1, r3
 8003b88:	483e      	ldr	r0, [pc, #248]	; (8003c84 <MX_GPIO_Init+0x234>)
 8003b8a:	f003 fefb 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b8e:	2310      	movs	r3, #16
 8003b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b92:	2311      	movs	r3, #17
 8003b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4837      	ldr	r0, [pc, #220]	; (8003c84 <MX_GPIO_Init+0x234>)
 8003ba6:	f003 feed 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB15
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15
 8003baa:	f248 0327 	movw	r3, #32807	; 0x8027
 8003bae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4831      	ldr	r0, [pc, #196]	; (8003c88 <MX_GPIO_Init+0x238>)
 8003bc4:	f003 fede 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bce:	2311      	movs	r3, #17
 8003bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	4829      	ldr	r0, [pc, #164]	; (8003c88 <MX_GPIO_Init+0x238>)
 8003be2:	f003 fecf 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003be6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4823      	ldr	r0, [pc, #140]	; (8003c88 <MX_GPIO_Init+0x238>)
 8003bfc:	f003 fec2 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c00:	2340      	movs	r3, #64	; 0x40
 8003c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c04:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0e:	f107 0314 	add.w	r3, r7, #20
 8003c12:	4619      	mov	r1, r3
 8003c14:	481a      	ldr	r0, [pc, #104]	; (8003c80 <MX_GPIO_Init+0x230>)
 8003c16:	f003 feb5 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4816      	ldr	r0, [pc, #88]	; (8003c8c <MX_GPIO_Init+0x23c>)
 8003c32:	f003 fea7 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003c36:	2318      	movs	r3, #24
 8003c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	480e      	ldr	r0, [pc, #56]	; (8003c88 <MX_GPIO_Init+0x238>)
 8003c4e:	f003 fe99 	bl	8007984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2100      	movs	r1, #0
 8003c56:	2017      	movs	r0, #23
 8003c58:	f003 fdbd 	bl	80077d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c5c:	2017      	movs	r0, #23
 8003c5e:	f003 fdd6 	bl	800780e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	2028      	movs	r0, #40	; 0x28
 8003c68:	f003 fdb5 	bl	80077d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c6c:	2028      	movs	r0, #40	; 0x28
 8003c6e:	f003 fdce 	bl	800780e <HAL_NVIC_EnableIRQ>

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40020800 	.word	0x40020800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020c00 	.word	0x40020c00

08003c90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	if (state == 2)
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_UART_RxCpltCallback+0xa8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d104      	bne.n	8003caa <HAL_UART_RxCpltCallback+0x1a>
		inputchar = *RX_BUFFER;
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_UART_RxCpltCallback+0xac>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_UART_RxCpltCallback+0xb0>)
 8003ca8:	601a      	str	r2, [r3, #0]
	if (state == 15) {
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <HAL_UART_RxCpltCallback+0xa8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d13c      	bne.n	8003d2c <HAL_UART_RxCpltCallback+0x9c>
		if (RX_BUFFER2[3] == 0 && RX_BUFFER2[4] == 0 && RX_BUFFER2[5] == 0
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x52>
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x52>
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003cc4:	795b      	ldrb	r3, [r3, #5]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x52>
				&& RX_BUFFER2[6] == 0 && RX_BUFFER2[7] == 0) {
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003ccc:	799b      	ldrb	r3, [r3, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x52>
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003cd4:	79db      	ldrb	r3, [r3, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x52>
			inputchar = 0;
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_UART_RxCpltCallback+0xb0>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
					+ (((int) RX_BUFFER2[5] - 48) * 100)
					+ (((int) RX_BUFFER2[6] - 48) * 10)
					+ ((int) RX_BUFFER2[7] - 48);
		}
	}
}
 8003ce0:	e024      	b.n	8003d2c <HAL_UART_RxCpltCallback+0x9c>
			inputchar = ((int) RX_BUFFER2[3] - 48) * 10000
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003ce4:	78db      	ldrb	r3, [r3, #3]
 8003ce6:	3b30      	subs	r3, #48	; 0x30
 8003ce8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
					+ (((int) RX_BUFFER2[4] - 48) * 1000)
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	3b30      	subs	r3, #48	; 0x30
 8003cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	441a      	add	r2, r3
					+ (((int) RX_BUFFER2[5] - 48) * 100)
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003d02:	795b      	ldrb	r3, [r3, #5]
 8003d04:	3b30      	subs	r3, #48	; 0x30
 8003d06:	2164      	movs	r1, #100	; 0x64
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	18d1      	adds	r1, r2, r3
					+ (((int) RX_BUFFER2[6] - 48) * 10)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003d10:	799b      	ldrb	r3, [r3, #6]
 8003d12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	18ca      	adds	r2, r1, r3
					+ ((int) RX_BUFFER2[7] - 48);
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_UART_RxCpltCallback+0xb4>)
 8003d22:	79db      	ldrb	r3, [r3, #7]
 8003d24:	3b30      	subs	r3, #48	; 0x30
 8003d26:	4413      	add	r3, r2
			inputchar = ((int) RX_BUFFER2[3] - 48) * 10000
 8003d28:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <HAL_UART_RxCpltCallback+0xb0>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	2000004c 	.word	0x2000004c
 8003d3c:	20000378 	.word	0x20000378
 8003d40:	20000398 	.word	0x20000398
 8003d44:	2000038c 	.word	0x2000038c

08003d48 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d120      	bne.n	8003d9a <HAL_GPIO_EXTI_Callback+0x52>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1) {
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	4812      	ldr	r0, [pc, #72]	; (8003da4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d5c:	f003 ff96 	bl	8007c8c <HAL_GPIO_ReadPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10f      	bne.n	8003d86 <HAL_GPIO_EXTI_Callback+0x3e>
//			lcd_write('Emergency', 'detected');
			state = 22;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_GPIO_EXTI_Callback+0x60>)
 8003d68:	2216      	movs	r2, #22
 8003d6a:	601a      	str	r2, [r3, #0]
			emergency = 1;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_GPIO_EXTI_Callback+0x64>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
			once = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_GPIO_EXTI_Callback+0x68>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7e:	4809      	ldr	r0, [pc, #36]	; (8003da4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d80:	f003 ff9c 	bl	8007cbc <HAL_GPIO_WritePin>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0) {
			emergency = 0;
		}
	}
}
 8003d84:	e009      	b.n	8003d9a <HAL_GPIO_EXTI_Callback+0x52>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 0) {
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	4806      	ldr	r0, [pc, #24]	; (8003da4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d8a:	f003 ff7f 	bl	8007c8c <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_GPIO_EXTI_Callback+0x52>
			emergency = 0;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_GPIO_EXTI_Callback+0x64>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020800 	.word	0x40020800
 8003da8:	2000004c 	.word	0x2000004c
 8003dac:	200005c8 	.word	0x200005c8
 8003db0:	20000714 	.word	0x20000714
 8003db4:	00000000 	.word	0x00000000

08003db8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += 4294967295;
 8003dc8:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	1e54      	subs	r4, r2, #1
 8003dd0:	f143 0500 	adc.w	r5, r3, #0
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003dd6:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d114      	bne.n	8003e0c <HAL_TIM_PeriodElapsedCallback+0x54>
		if ((TIM2->CNT) <= 32000) {
 8003de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003dec:	d807      	bhi.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x46>
			distancestamp2 += 65535;
 8003dee:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003df6:	33ff      	adds	r3, #255	; 0xff
 8003df8:	4a47      	ldr	r2, [pc, #284]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e006      	b.n	8003e0c <HAL_TIM_PeriodElapsedCallback+0x54>
		} else {
			distancestamp2 -= 65535;
 8003dfe:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003e06:	3bff      	subs	r3, #255	; 0xff
 8003e08:	4a43      	ldr	r2, [pc, #268]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003e0a:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim3) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a43      	ldr	r2, [pc, #268]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d113      	bne.n	8003e3c <HAL_TIM_PeriodElapsedCallback+0x84>
		if ((TIM3->CNT) <= 32000) {
 8003e14:	4b42      	ldr	r3, [pc, #264]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003e1c:	d807      	bhi.n	8003e2e <HAL_TIM_PeriodElapsedCallback+0x76>
			distancestamp3 += 65535;
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e26:	33ff      	adds	r3, #255	; 0xff
 8003e28:	4a3e      	ldr	r2, [pc, #248]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e006      	b.n	8003e3c <HAL_TIM_PeriodElapsedCallback+0x84>
		} else {
			distancestamp3 -= 65535;
 8003e2e:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003e36:	3bff      	subs	r3, #255	; 0xff
 8003e38:	4a3a      	ldr	r2, [pc, #232]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003e3a:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim4) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f040 8414 	bne.w	800466e <HAL_TIM_PeriodElapsedCallback+0x8b6>
		if (require1 == 0) {
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	d104      	bne.n	8003e60 <HAL_TIM_PeriodElapsedCallback+0xa8>
			errorpid1[0] = 0;
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e0ce      	b.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x246>
		} else if (require1 <= 0) {
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	d86f      	bhi.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x198>
			errorpid1[0] = velocitypulse1
					- require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 8003e70:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fb67 	bl	8000548 <__aeabi_f2d>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	460d      	mov	r5, r1
 8003e7e:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb60 	bl	8000548 <__aeabi_f2d>
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003e8e:	f7fc fbb3 	bl	80005f8 <__aeabi_dmul>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003ea0:	f7fc fbaa 	bl	80005f8 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003eb2:	f7fc fba1 	bl	80005f8 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003ec4:	f7fc fb98 	bl	80005f8 <__aeabi_dmul>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003ed6:	f7fc fcb9 	bl	800084c <__aeabi_ddiv>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003ee8:	f7fc fcb0 	bl	800084c <__aeabi_ddiv>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f7fc f9c8 	bl	8000288 <__aeabi_dsub>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fe5c 	bl	8000bbc <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
			errorpid1[0] = velocitypulse1
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e078      	b.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x246>
 8003f0c:	200002a8 	.word	0x200002a8
 8003f10:	20000000 	.word	0x20000000
 8003f14:	200001d0 	.word	0x200001d0
 8003f18:	20000044 	.word	0x20000044
 8003f1c:	20000218 	.word	0x20000218
 8003f20:	40000400 	.word	0x40000400
 8003f24:	20000048 	.word	0x20000048
 8003f28:	20000260 	.word	0x20000260
 8003f2c:	200004b4 	.word	0x200004b4
 8003f30:	200004ac 	.word	0x200004ac
 8003f34:	20000524 	.word	0x20000524
 8003f38:	40280000 	.word	0x40280000
 8003f3c:	40500000 	.word	0x40500000
 8003f40:	40100000 	.word	0x40100000
 8003f44:	40340000 	.word	0x40340000
 8003f48:	402e0000 	.word	0x402e0000
 8003f4c:	40200000 	.word	0x40200000
		} else if (require1 > 0) {
 8003f50:	4b97      	ldr	r3, [pc, #604]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	dd4e      	ble.n	8003ffe <HAL_TIM_PeriodElapsedCallback+0x246>
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8003f60:	4b93      	ldr	r3, [pc, #588]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc faef 	bl	8000548 <__aeabi_f2d>
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	4b91      	ldr	r3, [pc, #580]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8003f70:	f7fc fb42 	bl	80005f8 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003f82:	f7fc fb39 	bl	80005f8 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	4b8a      	ldr	r3, [pc, #552]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8003f94:	f7fc fb30 	bl	80005f8 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	4b86      	ldr	r3, [pc, #536]	; (80041c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003fa6:	f7fc fb27 	bl	80005f8 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	4b83      	ldr	r3, [pc, #524]	; (80041c4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003fb8:	f7fc fc48 	bl	800084c <__aeabi_ddiv>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003fca:	f7fc fc3f 	bl	800084c <__aeabi_ddiv>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4614      	mov	r4, r2
 8003fd4:	461d      	mov	r5, r3
					- velocitypulse1;
 8003fd6:	4b7d      	ldr	r3, [pc, #500]	; (80041cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7fc f94e 	bl	8000288 <__aeabi_dsub>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc fde2 	bl	8000bbc <__aeabi_d2f>
 8003ff8:	4603      	mov	r3, r0
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8003ffa:	4a75      	ldr	r2, [pc, #468]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8003ffc:	6013      	str	r3, [r2, #0]
		}
		sumpid1 = sumpid1 + errorpid1[0];
 8003ffe:	4b74      	ldr	r3, [pc, #464]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004000:	ed93 7a00 	vldr	s14, [r3]
 8004004:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8004010:	edc3 7a00 	vstr	s15, [r3]
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 8004014:	4b6e      	ldr	r3, [pc, #440]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004016:	ed93 7a00 	vldr	s14, [r3]
 800401a:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004024:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <HAL_TIM_PeriodElapsedCallback+0x424>)
 8004026:	edd3 6a00 	vldr	s13, [r3]
 800402a:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800402c:	edd3 7a00 	vldr	s15, [r3]
 8004030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004034:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd1 * (errorpid1[0] - errorpid1[1]));
 8004038:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800403a:	edd3 6a00 	vldr	s13, [r3]
 800403e:	4b64      	ldr	r3, [pc, #400]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004040:	edd3 7a01 	vldr	s15, [r3, #4]
 8004044:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004048:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 8004056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405a:	ee17 2a90 	vmov	r2, s15
 800405e:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004060:	601a      	str	r2, [r3, #0]
		errorpid1[1] = errorpid1[0];
 8004062:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8004068:	6053      	str	r3, [r2, #4]
		if (pwm1 < 0) {
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da18      	bge.n	80040a4 <HAL_TIM_PeriodElapsedCallback+0x2ec>
			pwm1 = -pwm1;
 8004072:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	425b      	negs	r3, r3
 8004078:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800407a:	6013      	str	r3, [r2, #0]
			in1 = !in1;
 800407c:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800408e:	601a      	str	r2, [r3, #0]
			in2 = !in2;
 8004090:	4b56      	ldr	r3, [pc, #344]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x434>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x434>)
 80040a2:	601a      	str	r2, [r3, #0]
		}
		if (pwm1 > 5000)
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	dd03      	ble.n	80040b8 <HAL_TIM_PeriodElapsedCallback+0x300>
			pwm1 = 5000;
 80040b0:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	601a      	str	r2, [r3, #0]
		if ((limitswitch1 == 1 && in1 == 0 && in2 == 1) || emergency == 1) {
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_TIM_PeriodElapsedCallback+0x318>
 80040c0:	4b49      	ldr	r3, [pc, #292]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <HAL_TIM_PeriodElapsedCallback+0x318>
 80040c8:	4b48      	ldr	r3, [pc, #288]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x434>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d003      	beq.n	80040d8 <HAL_TIM_PeriodElapsedCallback+0x320>
 80040d0:	4b48      	ldr	r3, [pc, #288]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d108      	bne.n	80040ea <HAL_TIM_PeriodElapsedCallback+0x332>
			pwm1 = 0;
 80040d8:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
			in1 = 0;
 80040de:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
			in2 = 0;
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x434>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
		}
		if (require2 == 0) {
 80040ea:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_PeriodElapsedCallback+0x34c>
			errorpid2[0] = 0;
 80040fa:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x444>)
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e0d6      	b.n	80042b2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
		} else if (require2 <= 0) {
 8004104:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004112:	d877      	bhi.n	8004204 <HAL_TIM_PeriodElapsedCallback+0x44c>
			errorpid2[0] = velocitypulse2
					- require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 8004114:	4b3a      	ldr	r3, [pc, #232]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc fa15 	bl	8000548 <__aeabi_f2d>
 800411e:	4604      	mov	r4, r0
 8004120:	460d      	mov	r5, r1
 8004122:	4b35      	ldr	r3, [pc, #212]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc fa0e 	bl	8000548 <__aeabi_f2d>
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8004132:	f7fc fa61 	bl	80005f8 <__aeabi_dmul>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8004156:	f7fc fa4f 	bl	80005f8 <__aeabi_dmul>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8004168:	f7fc fa46 	bl	80005f8 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800417a:	f7fc fb67 	bl	800084c <__aeabi_ddiv>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800418c:	f7fc fb5e 	bl	800084c <__aeabi_ddiv>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4620      	mov	r0, r4
 8004196:	4629      	mov	r1, r5
 8004198:	f7fc f876 	bl	8000288 <__aeabi_dsub>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7fc fd0a 	bl	8000bbc <__aeabi_d2f>
 80041a8:	4603      	mov	r3, r0
			errorpid2[0] = velocitypulse2
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x444>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e080      	b.n	80042b2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
 80041b0:	200004b4 	.word	0x200004b4
 80041b4:	40280000 	.word	0x40280000
 80041b8:	40500000 	.word	0x40500000
 80041bc:	40100000 	.word	0x40100000
 80041c0:	40340000 	.word	0x40340000
 80041c4:	402e0000 	.word	0x402e0000
 80041c8:	40200000 	.word	0x40200000
 80041cc:	20000524 	.word	0x20000524
 80041d0:	200004ac 	.word	0x200004ac
 80041d4:	200004a8 	.word	0x200004a8
 80041d8:	20000038 	.word	0x20000038
 80041dc:	200004a4 	.word	0x200004a4
 80041e0:	200004a0 	.word	0x200004a0
 80041e4:	200003b0 	.word	0x200003b0
 80041e8:	200003a8 	.word	0x200003a8
 80041ec:	200003ac 	.word	0x200003ac
 80041f0:	200004e8 	.word	0x200004e8
 80041f4:	200005c8 	.word	0x200005c8
 80041f8:	200004cc 	.word	0x200004cc
 80041fc:	200004c4 	.word	0x200004c4
 8004200:	20000528 	.word	0x20000528
		} else if (require2 > 0) {
 8004204:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004212:	dd4e      	ble.n	80042b2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8004214:	4b98      	ldr	r3, [pc, #608]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f995 	bl	8000548 <__aeabi_f2d>
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	4b96      	ldr	r3, [pc, #600]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8004224:	f7fc f9e8 	bl	80005f8 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	4b92      	ldr	r3, [pc, #584]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004236:	f7fc f9df 	bl	80005f8 <__aeabi_dmul>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	4b8f      	ldr	r3, [pc, #572]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8004248:	f7fc f9d6 	bl	80005f8 <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	4b8b      	ldr	r3, [pc, #556]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 800425a:	f7fc f9cd 	bl	80005f8 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 800426c:	f7fc faee 	bl	800084c <__aeabi_ddiv>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	4b84      	ldr	r3, [pc, #528]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800427e:	f7fc fae5 	bl	800084c <__aeabi_ddiv>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4614      	mov	r4, r2
 8004288:	461d      	mov	r5, r3
					- velocitypulse2;
 800428a:	4b82      	ldr	r3, [pc, #520]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f95a 	bl	8000548 <__aeabi_f2d>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4620      	mov	r0, r4
 800429a:	4629      	mov	r1, r5
 800429c:	f7fb fff4 	bl	8000288 <__aeabi_dsub>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc fc88 	bl	8000bbc <__aeabi_d2f>
 80042ac:	4603      	mov	r3, r0
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80042b0:	6013      	str	r3, [r2, #0]
		}
		sumpid2 = sumpid2 + errorpid2[0];
 80042b2:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80042b4:	ed93 7a00 	vldr	s14, [r3]
 80042b8:	4b78      	ldr	r3, [pc, #480]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 80042ba:	edd3 7a00 	vldr	s15, [r3]
 80042be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042c2:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 80042c4:	edc3 7a00 	vstr	s15, [r3]
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 80042c8:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80042ca:	ed93 7a00 	vldr	s14, [r3]
 80042ce:	4b74      	ldr	r3, [pc, #464]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d8:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80042da:	edd3 6a00 	vldr	s13, [r3]
 80042de:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 80042e0:	edd3 7a00 	vldr	s15, [r3]
 80042e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd2 * (errorpid2[0] - errorpid2[1]));
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80042ee:	edd3 6a00 	vldr	s13, [r3]
 80042f2:	4b69      	ldr	r3, [pc, #420]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80042f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80042f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004306:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 800430a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800430e:	ee17 2a90 	vmov	r2, s15
 8004312:	4b66      	ldr	r3, [pc, #408]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8004314:	601a      	str	r2, [r3, #0]
		errorpid2[1] = errorpid2[0];
 8004316:	4b60      	ldr	r3, [pc, #384]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a5f      	ldr	r2, [pc, #380]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 800431c:	6053      	str	r3, [r2, #4]
		if (pwm2 < 0) {
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da18      	bge.n	8004358 <HAL_TIM_PeriodElapsedCallback+0x5a0>
			pwm2 = -pwm2;
 8004326:	4b61      	ldr	r3, [pc, #388]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	425b      	negs	r3, r3
 800432c:	4a5f      	ldr	r2, [pc, #380]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 800432e:	6013      	str	r3, [r2, #0]
			in3 = !in3;
 8004330:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8004342:	601a      	str	r2, [r3, #0]
			in4 = !in4;
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8004356:	601a      	str	r2, [r3, #0]
		}
		if (pwm2 > 5000)
 8004358:	4b54      	ldr	r3, [pc, #336]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	dd03      	ble.n	800436c <HAL_TIM_PeriodElapsedCallback+0x5b4>
			pwm2 = 5000;
 8004364:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	601a      	str	r2, [r3, #0]
		if ((limitswitch2 == 1 && in3 == 0 && in4 == 1) || emergency == 1) {
 800436c:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8004374:	4b4e      	ldr	r3, [pc, #312]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_TIM_PeriodElapsedCallback+0x5cc>
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d003      	beq.n	800438c <HAL_TIM_PeriodElapsedCallback+0x5d4>
 8004384:	4b4d      	ldr	r3, [pc, #308]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x704>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_TIM_PeriodElapsedCallback+0x5da>
			pwm2 = 0;
 800438c:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
		}
		if (require3 == 0) {
 8004392:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_PeriodElapsedCallback+0x5f4>
			errorpid3[0] = 0;
 80043a2:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e0f1      	b.n	8004590 <HAL_TIM_PeriodElapsedCallback+0x7d8>
		} else if (require3 <= 0) {
 80043ac:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <HAL_TIM_PeriodElapsedCallback+0x708>)
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	f200 8089 	bhi.w	80044d0 <HAL_TIM_PeriodElapsedCallback+0x718>
			errorpid3[0] = velocitypulse3
					- require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0 / 5.08;
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f8c0 	bl	8000548 <__aeabi_f2d>
 80043c8:	4604      	mov	r4, r0
 80043ca:	460d      	mov	r5, r1
 80043cc:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <HAL_TIM_PeriodElapsedCallback+0x708>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8b9 	bl	8000548 <__aeabi_f2d>
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80043dc:	f7fc f90c 	bl	80005f8 <__aeabi_dmul>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80043ee:	f7fc f903 	bl	80005f8 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8004400:	f7fc f8fa 	bl	80005f8 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8004412:	f7fc f8f1 	bl	80005f8 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004424:	f7fc fa12 	bl	800084c <__aeabi_ddiv>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8004436:	f7fc fa09 	bl	800084c <__aeabi_ddiv>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	a30b      	add	r3, pc, #44	; (adr r3, 8004470 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc fa00 	bl	800084c <__aeabi_ddiv>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb ff18 	bl	8000288 <__aeabi_dsub>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	f7fc fbac 	bl	8000bbc <__aeabi_d2f>
 8004464:	4603      	mov	r3, r0
			errorpid3[0] = velocitypulse3
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e091      	b.n	8004590 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 800446c:	f3af 8000 	nop.w
 8004470:	851eb852 	.word	0x851eb852
 8004474:	401451eb 	.word	0x401451eb
 8004478:	200004cc 	.word	0x200004cc
 800447c:	40280000 	.word	0x40280000
 8004480:	40500000 	.word	0x40500000
 8004484:	40100000 	.word	0x40100000
 8004488:	40340000 	.word	0x40340000
 800448c:	402e0000 	.word	0x402e0000
 8004490:	40200000 	.word	0x40200000
 8004494:	20000528 	.word	0x20000528
 8004498:	200004c4 	.word	0x200004c4
 800449c:	200004c0 	.word	0x200004c0
 80044a0:	2000003c 	.word	0x2000003c
 80044a4:	200004bc 	.word	0x200004bc
 80044a8:	200004b8 	.word	0x200004b8
 80044ac:	200003bc 	.word	0x200003bc
 80044b0:	200003b4 	.word	0x200003b4
 80044b4:	200003b8 	.word	0x200003b8
 80044b8:	200004ec 	.word	0x200004ec
 80044bc:	200005c8 	.word	0x200005c8
 80044c0:	200004e4 	.word	0x200004e4
 80044c4:	200004dc 	.word	0x200004dc
 80044c8:	2000052c 	.word	0x2000052c
 80044cc:	40240000 	.word	0x40240000
		} else if (require3 > 0) {
 80044d0:	4b6b      	ldr	r3, [pc, #428]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044de:	dd57      	ble.n	8004590 <HAL_TIM_PeriodElapsedCallback+0x7d8>
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0
 80044e0:	4b67      	ldr	r3, [pc, #412]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc f82f 	bl	8000548 <__aeabi_f2d>
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	4b65      	ldr	r3, [pc, #404]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80044f0:	f7fc f882 	bl	80005f8 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8004502:	f7fc f879 	bl	80005f8 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8004514:	f7fc f870 	bl	80005f8 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8004526:	f7fc f867 	bl	80005f8 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8004538:	f7fc f988 	bl	800084c <__aeabi_ddiv>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800454a:	f7fc f97f 	bl	800084c <__aeabi_ddiv>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
					/ 5.08 - velocitypulse3;
 8004556:	a348      	add	r3, pc, #288	; (adr r3, 8004678 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fc f976 	bl	800084c <__aeabi_ddiv>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fb ffeb 	bl	8000548 <__aeabi_f2d>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fb fe85 	bl	8000288 <__aeabi_dsub>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f7fc fb19 	bl	8000bbc <__aeabi_d2f>
 800458a:	4603      	mov	r3, r0
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0
 800458c:	4a43      	ldr	r2, [pc, #268]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800458e:	6013      	str	r3, [r2, #0]
		}
		sumpid3 = sumpid3 + errorpid3[0];
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8004592:	ed93 7a00 	vldr	s14, [r3]
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a0:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80045a2:	edc3 7a00 	vstr	s15, [r3]
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80045a8:	ed93 7a00 	vldr	s14, [r3]
 80045ac:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b6:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80045b8:	edd3 6a00 	vldr	s13, [r3]
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80045be:	edd3 7a00 	vldr	s15, [r3]
 80045c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd3 * (errorpid3[0] - errorpid3[1]));
 80045ca:	4b34      	ldr	r3, [pc, #208]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80045cc:	edd3 6a00 	vldr	s13, [r3]
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80045d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80045da:	4b34      	ldr	r3, [pc, #208]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e4:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 80045e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ec:	ee17 2a90 	vmov	r2, s15
 80045f0:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80045f2:	601a      	str	r2, [r3, #0]
		errorpid3[1] = errorpid3[0];
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80045fa:	6053      	str	r3, [r2, #4]
		if (pwm3 < 0) {
 80045fc:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da18      	bge.n	8004636 <HAL_TIM_PeriodElapsedCallback+0x87e>
			pwm3 = -pwm3;
 8004604:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	425b      	negs	r3, r3
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800460c:	6013      	str	r3, [r2, #0]
			in5 = !in5;
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8004620:	601a      	str	r2, [r3, #0]
			in6 = !in6;
 8004622:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8004634:	601a      	str	r2, [r3, #0]
		}
		if (pwm3 > 4000)
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800463e:	dd03      	ble.n	8004648 <HAL_TIM_PeriodElapsedCallback+0x890>
			pwm3 = 4000;
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8004642:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004646:	601a      	str	r2, [r3, #0]
		if ((limitswitch3 == 1 && in5 == 0 && in6 == 1) || emergency == 1) {
 8004648:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <HAL_TIM_PeriodElapsedCallback+0x904>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_TIM_PeriodElapsedCallback+0x8a8>
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <HAL_TIM_PeriodElapsedCallback+0x8a8>
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d003      	beq.n	8004668 <HAL_TIM_PeriodElapsedCallback+0x8b0>
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_TIM_PeriodElapsedCallback+0x8b6>
			pwm3 = 0;
 8004668:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bdb0      	pop	{r4, r5, r7, pc}
 8004676:	bf00      	nop
 8004678:	851eb852 	.word	0x851eb852
 800467c:	401451eb 	.word	0x401451eb
 8004680:	200004e4 	.word	0x200004e4
 8004684:	40280000 	.word	0x40280000
 8004688:	40500000 	.word	0x40500000
 800468c:	40100000 	.word	0x40100000
 8004690:	402e0000 	.word	0x402e0000
 8004694:	40240000 	.word	0x40240000
 8004698:	2000052c 	.word	0x2000052c
 800469c:	200004dc 	.word	0x200004dc
 80046a0:	200004d8 	.word	0x200004d8
 80046a4:	20000040 	.word	0x20000040
 80046a8:	200004d4 	.word	0x200004d4
 80046ac:	200004d0 	.word	0x200004d0
 80046b0:	200003c8 	.word	0x200003c8
 80046b4:	200003c0 	.word	0x200003c0
 80046b8:	200003c4 	.word	0x200003c4
 80046bc:	200004f0 	.word	0x200004f0
 80046c0:	200005c8 	.word	0x200005c8

080046c4 <micros>:

uint64_t micros() {
 80046c4:	b4b0      	push	{r4, r5, r7}
 80046c6:	af00      	add	r7, sp, #0
	return _micros + htim5.Instance->CNT;
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <micros+0x2c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2200      	movs	r2, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	4611      	mov	r1, r2
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <micros+0x30>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	1884      	adds	r4, r0, r2
 80046dc:	eb41 0503 	adc.w	r5, r1, r3
 80046e0:	4622      	mov	r2, r4
 80046e2:	462b      	mov	r3, r5
}
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bcb0      	pop	{r4, r5, r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200002a8 	.word	0x200002a8
 80046f4:	20000000 	.word	0x20000000

080046f8 <hx711_delay_us>:
//#############################################################################################
void hx711_delay_us(void) {
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	uint64_t delay = micros();
 80046fe:	f7ff ffe1 	bl	80046c4 <micros>
 8004702:	e9c7 0100 	strd	r0, r1, [r7]
	while (delay - micros() <= 1)
 8004706:	bf00      	nop
 8004708:	f7ff ffdc 	bl	80046c4 <micros>
 800470c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004710:	1a14      	subs	r4, r2, r0
 8004712:	eb63 0501 	sbc.w	r5, r3, r1
 8004716:	2c02      	cmp	r4, #2
 8004718:	f175 0300 	sbcs.w	r3, r5, #0
 800471c:	d3f4      	bcc.n	8004708 <hx711_delay_us+0x10>
		;
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bdb0      	pop	{r4, r5, r7, pc}

08004728 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711) {
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	while (hx711->lock)
 8004730:	bf00      	nop
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7f1b      	ldrb	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1fb      	bne.n	8004732 <hx711_lock+0xa>
		;
	hx711->lock = 1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	771a      	strb	r2, [r3, #28]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <hx711_init>:
void hx711_unlock(hx711_t *hx711) {
	hx711->lock = 0;
}
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin,
		GPIO_TypeDef *dat_gpio, uint16_t dat_pin) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
	hx711_lock(hx711);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff ffe3 	bl	8004728 <hx711_lock>
	hx711->clk_gpio = clk_gpio;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
	hx711->clk_pin = clk_pin;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	811a      	strh	r2, [r3, #8]
	hx711->dat_gpio = dat_gpio;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	hx711->dat_pin = dat_pin;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004778:	815a      	strh	r2, [r3, #10]

	GPIO_InitTypeDef gpio = { 0 };
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	611a      	str	r2, [r3, #16]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004792:	2302      	movs	r3, #2
 8004794:	623b      	str	r3, [r7, #32]
	gpio.Pin = clk_pin;
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(clk_gpio, &gpio);
 800479a:	f107 0314 	add.w	r3, r7, #20
 800479e:	4619      	mov	r1, r3
 80047a0:	68b8      	ldr	r0, [r7, #8]
 80047a2:	f003 f8ef 	bl	8007984 <HAL_GPIO_Init>
	gpio.Mode = GPIO_MODE_INPUT;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_PULLUP;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ae:	2302      	movs	r3, #2
 80047b0:	623b      	str	r3, [r7, #32]
	gpio.Pin = dat_pin;
 80047b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80047b4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dat_gpio, &gpio);
 80047b6:	f107 0314 	add.w	r3, r7, #20
 80047ba:	4619      	mov	r1, r3
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f003 f8e1 	bl	8007984 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	891b      	ldrh	r3, [r3, #8]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4619      	mov	r1, r3
 80047ce:	f003 fa75 	bl	8007cbc <HAL_GPIO_WritePin>
	hx711_delay(10);
 80047d2:	200a      	movs	r0, #10
 80047d4:	f002 fb0e 	bl	8006df4 <HAL_Delay>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	891b      	ldrh	r3, [r3, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	4619      	mov	r1, r3
 80047e4:	f003 fa6a 	bl	8007cbc <HAL_GPIO_WritePin>
	hx711_delay(10);
 80047e8:	200a      	movs	r0, #10
 80047ea:	f002 fb03 	bl	8006df4 <HAL_Delay>
}
 80047ee:	bf00      	nop
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
	if (tare == 1) {
 8004804:	4b44      	ldr	r3, [pc, #272]	; (8004918 <hx711_value+0x120>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d11a      	bne.n	8004842 <hx711_value+0x4a>
		uint32_t startTime = HAL_GetTick();
 800480c:	f002 fae6 	bl	8006ddc <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8004812:	e008      	b.n	8004826 <hx711_value+0x2e>
			if (HAL_GetTick() - startTime > 150)
 8004814:	f002 fae2 	bl	8006ddc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b96      	cmp	r3, #150	; 0x96
 8004820:	d901      	bls.n	8004826 <hx711_value+0x2e>
				return 0;
 8004822:	2300      	movs	r3, #0
 8004824:	e074      	b.n	8004910 <hx711_value+0x118>
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	895b      	ldrh	r3, [r3, #10]
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f003 fa2b 	bl	8007c8c <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d0eb      	beq.n	8004814 <hx711_value+0x1c>
		}
		tare = 0;
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <hx711_value+0x120>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	895b      	ldrh	r3, [r3, #10]
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f003 fa1d 	bl	8007c8c <HAL_GPIO_ReadPin>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d15a      	bne.n	800490e <hx711_value+0x116>
		for (int8_t i = 0; i < 24; i++) {
 8004858:	2300      	movs	r3, #0
 800485a:	74fb      	strb	r3, [r7, #19]
 800485c:	e02a      	b.n	80048b4 <hx711_value+0xbc>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	891b      	ldrh	r3, [r3, #8]
 8004866:	2201      	movs	r2, #1
 8004868:	4619      	mov	r1, r3
 800486a:	f003 fa27 	bl	8007cbc <HAL_GPIO_WritePin>
			hx711_delay_us();
 800486e:	f7ff ff43 	bl	80046f8 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	891b      	ldrh	r3, [r3, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	f003 fa1d 	bl	8007cbc <HAL_GPIO_WritePin>
			hx711_delay_us();
 8004882:	f7ff ff39 	bl	80046f8 <hx711_delay_us>
			data = data << 1;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	617b      	str	r3, [r7, #20]
			if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	895b      	ldrh	r3, [r3, #10]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f003 f9f8 	bl	8007c8c <HAL_GPIO_ReadPin>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d102      	bne.n	80048a8 <hx711_value+0xb0>
					== GPIO_PIN_SET)
				data++;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	3301      	adds	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
		for (int8_t i = 0; i < 24; i++) {
 80048a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	74fb      	strb	r3, [r7, #19]
 80048b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80048b8:	2b17      	cmp	r3, #23
 80048ba:	ddd0      	ble.n	800485e <hx711_value+0x66>
		}
		for (int8_t i = 0; i < hx711_channel; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	74bb      	strb	r3, [r7, #18]
 80048c0:	e019      	b.n	80048f6 <hx711_value+0xfe>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	891b      	ldrh	r3, [r3, #8]
 80048ca:	2201      	movs	r2, #1
 80048cc:	4619      	mov	r1, r3
 80048ce:	f003 f9f5 	bl	8007cbc <HAL_GPIO_WritePin>
			hx711_delay_us();
 80048d2:	f7ff ff11 	bl	80046f8 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	891b      	ldrh	r3, [r3, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	4619      	mov	r1, r3
 80048e2:	f003 f9eb 	bl	8007cbc <HAL_GPIO_WritePin>
			hx711_delay_us();
 80048e6:	f7ff ff07 	bl	80046f8 <hx711_delay_us>
		for (int8_t i = 0; i < hx711_channel; i++) {
 80048ea:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	74bb      	strb	r3, [r7, #18]
 80048f6:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <hx711_value+0x124>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	dbdf      	blt.n	80048c2 <hx711_value+0xca>
		}
		data = data ^ 0x800000;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004908:	617b      	str	r3, [r7, #20]
		return data;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e000      	b.n	8004910 <hx711_value+0x118>
	} else {
		return 100000;
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <hx711_value+0x128>)
	}
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2000049c 	.word	0x2000049c
 800491c:	20000008 	.word	0x20000008
 8004920:	000186a0 	.word	0x000186a0

08004924 <hx711_tare>:
	int32_t answer = (int32_t) (ave / sample);
	hx711_unlock(hx711);
	return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample, int unit) {
 8004924:	b480      	push	{r7}
 8004926:	b08b      	sub	sp, #44	; 0x2c
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	460b      	mov	r3, r1
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	817b      	strh	r3, [r7, #10]
	if (unit == 1) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d158      	bne.n	80049ea <hx711_tare+0xc6>
		float w1 = 0;
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
		float w2 = 0;
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	623b      	str	r3, [r7, #32]
		for (int i = 1; i < 5; i++) {
 8004944:	2301      	movs	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e01a      	b.n	8004980 <hx711_tare+0x5c>
			w1 += tareweight1[i];
 800494a:	4a59      	ldr	r2, [pc, #356]	; (8004ab0 <hx711_tare+0x18c>)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	edd3 7a00 	vldr	s15, [r3]
 8004956:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			w2 += tareweight2[i];
 8004962:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <hx711_tare+0x190>)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004976:	edc7 7a08 	vstr	s15, [r7, #32]
		for (int i = 1; i < 5; i++) {
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3301      	adds	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b04      	cmp	r3, #4
 8004984:	dde1      	ble.n	800494a <hx711_tare+0x26>
		}
		hx711->offsetA = (w1 * (hx711->coefA)) / 4 + (hx711->offsetA);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	ed93 7a04 	vldr	s14, [r3, #16]
 800498c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004994:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004998:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w2 * (hx711->coefB)) / 4 + (hx711->offsetB);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80049be:	edd7 7a08 	vldr	s15, [r7, #32]
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80049ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e2:	ee17 2a90 	vmov	r2, s15
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	615a      	str	r2, [r3, #20]
	}
	if (unit == 2) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d158      	bne.n	8004aa2 <hx711_tare+0x17e>
		float w3 = 0;
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
		float w4 = 0;
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
		for (int i = 1; i < 5; i++) {
 80049fc:	2301      	movs	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	e01a      	b.n	8004a38 <hx711_tare+0x114>
			w3 += tareweight3[i];
 8004a02:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <hx711_tare+0x194>)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	edd3 7a00 	vldr	s15, [r3]
 8004a0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a16:	edc7 7a06 	vstr	s15, [r7, #24]
			w4 += tareweight4[i];
 8004a1a:	4a28      	ldr	r2, [pc, #160]	; (8004abc <hx711_tare+0x198>)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	edd3 7a00 	vldr	s15, [r3]
 8004a26:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a2e:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 1; i < 5; i++) {
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3301      	adds	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	dde1      	ble.n	8004a02 <hx711_tare+0xde>
		}
		hx711->offsetA = (w3 * (hx711->coefA)) / 4 + (hx711->offsetA);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a44:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004a50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a68:	ee17 2a90 	vmov	r2, s15
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w4 * (hx711->coefB)) / 4 + (hx711->offsetB);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	ed93 7a06 	vldr	s14, [r3, #24]
 8004a76:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004a82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a9a:	ee17 2a90 	vmov	r2, s15
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	615a      	str	r2, [r3, #20]
	}

}
 8004aa2:	bf00      	nop
 8004aa4:	372c      	adds	r7, #44	; 0x2c
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000438 	.word	0x20000438
 8004ab4:	2000044c 	.word	0x2000044c
 8004ab8:	20000460 	.word	0x20000460
 8004abc:	20000474 	.word	0x20000474

08004ac0 <hx711_calibration>:
//#############################################################################################
void hx711_calibration(hx711_t *hx711, int32_t channel, float scale) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	ed87 0a01 	vstr	s0, [r7, #4]

	if (channel == 1) {
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <hx711_calibration+0x1a>
		hx711->coefA = scale;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
	}
	if (channel == 2) {
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d102      	bne.n	8004ae6 <hx711_calibration+0x26>
		hx711->coefB = scale;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	619a      	str	r2, [r3, #24]
	}

}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <hx711_weight>:
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample, uint8_t num) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	807b      	strh	r3, [r7, #2]
 8004b00:	4613      	mov	r3, r2
 8004b02:	707b      	strb	r3, [r7, #1]
	if (hx_711readtimestamp[1] == 1 && num == 1) {
 8004b04:	4b83      	ldr	r3, [pc, #524]	; (8004d14 <hx711_weight+0x220>)
 8004b06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b0a:	1e51      	subs	r1, r2, #1
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	d143      	bne.n	8004b98 <hx711_weight+0xa4>
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d140      	bne.n	8004b98 <hx711_weight+0xa4>
		if (loadcellc1 > 0 && loadcellc1 < 10) {
 8004b16:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <hx711_weight+0x224>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03c      	beq.n	8004b98 <hx711_weight+0xa4>
 8004b1e:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <hx711_weight+0x224>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b09      	cmp	r3, #9
 8004b24:	d838      	bhi.n	8004b98 <hx711_weight+0xa4>
			hx711_channel = 1;
 8004b26:	4b7d      	ldr	r3, [pc, #500]	; (8004d1c <hx711_weight+0x228>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
			int value = hx711_value(hx711);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fe63 	bl	80047f8 <hx711_value>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24
			if (value != 100000) {
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	4a7a      	ldr	r2, [pc, #488]	; (8004d20 <hx711_weight+0x22c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d02d      	beq.n	8004b98 <hx711_weight+0xa4>
				if (start == 1)
 8004b3c:	4b79      	ldr	r3, [pc, #484]	; (8004d24 <hx711_weight+0x230>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d103      	bne.n	8004b4c <hx711_weight+0x58>
					start = 0;
 8004b44:	4b77      	ldr	r3, [pc, #476]	; (8004d24 <hx711_weight+0x230>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e025      	b.n	8004b98 <hx711_weight+0xa4>
				else {
					loadcellc1 -= 1;
 8004b4c:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <hx711_weight+0x224>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b70      	ldr	r3, [pc, #448]	; (8004d18 <hx711_weight+0x224>)
 8004b56:	701a      	strb	r2, [r3, #0]
					timecheck[1] += 1;
 8004b58:	4b73      	ldr	r3, [pc, #460]	; (8004d28 <hx711_weight+0x234>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a72      	ldr	r2, [pc, #456]	; (8004d28 <hx711_weight+0x234>)
 8004b60:	6053      	str	r3, [r2, #4]
					ave1 += value;
 8004b62:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <hx711_weight+0x238>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	4413      	add	r3, r2
 8004b6a:	4a70      	ldr	r2, [pc, #448]	; (8004d2c <hx711_weight+0x238>)
 8004b6c:	6013      	str	r3, [r2, #0]
					if (loadcellc1 == 0) {
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	; (8004d18 <hx711_weight+0x224>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d110      	bne.n	8004b98 <hx711_weight+0xa4>
						hx_711readtimestamp[1] = 2;
 8004b76:	4967      	ldr	r1, [pc, #412]	; (8004d14 <hx711_weight+0x220>)
 8004b78:	f04f 0202 	mov.w	r2, #2
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 8004b84:	f7ff fd9e 	bl	80046c4 <micros>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4961      	ldr	r1, [pc, #388]	; (8004d14 <hx711_weight+0x220>)
 8004b8e:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 8004b92:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <hx711_weight+0x230>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp[1] == 2 && num == 1) {
 8004b98:	4b5e      	ldr	r3, [pc, #376]	; (8004d14 <hx711_weight+0x220>)
 8004b9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b9e:	1e91      	subs	r1, r2, #2
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	d14e      	bne.n	8004c42 <hx711_weight+0x14e>
 8004ba4:	787b      	ldrb	r3, [r7, #1]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d14b      	bne.n	8004c42 <hx711_weight+0x14e>
		if (loadcellc2 > 0 && loadcellc2 < 10) {
 8004baa:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <hx711_weight+0x23c>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d047      	beq.n	8004c42 <hx711_weight+0x14e>
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	; (8004d30 <hx711_weight+0x23c>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b09      	cmp	r3, #9
 8004bb8:	d843      	bhi.n	8004c42 <hx711_weight+0x14e>
			hx711_channel = 2;
 8004bba:	4b58      	ldr	r3, [pc, #352]	; (8004d1c <hx711_weight+0x228>)
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	601a      	str	r2, [r3, #0]
			int value2 = hx711_value(hx711);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fe19 	bl	80047f8 <hx711_value>
 8004bc6:	6238      	str	r0, [r7, #32]
			if (value2 != 100000) {
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	4a55      	ldr	r2, [pc, #340]	; (8004d20 <hx711_weight+0x22c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d038      	beq.n	8004c42 <hx711_weight+0x14e>
				if (start == 1) {
 8004bd0:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <hx711_weight+0x230>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d109      	bne.n	8004bec <hx711_weight+0xf8>
					start = 0;
 8004bd8:	4b52      	ldr	r3, [pc, #328]	; (8004d24 <hx711_weight+0x230>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
					timecheck[0] = micros();
 8004bde:	f7ff fd71 	bl	80046c4 <micros>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <hx711_weight+0x234>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e02a      	b.n	8004c42 <hx711_weight+0x14e>
				} else {
					timecheck[1] = micros() - timecheck[0];
 8004bec:	f7ff fd6a 	bl	80046c4 <micros>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b4c      	ldr	r3, [pc, #304]	; (8004d28 <hx711_weight+0x234>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <hx711_weight+0x234>)
 8004bfe:	605a      	str	r2, [r3, #4]
					loadcellc2 -= 1;
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <hx711_weight+0x23c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <hx711_weight+0x23c>)
 8004c0a:	701a      	strb	r2, [r3, #0]
					ave2 += value2;
 8004c0c:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <hx711_weight+0x240>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	4413      	add	r3, r2
 8004c14:	4a47      	ldr	r2, [pc, #284]	; (8004d34 <hx711_weight+0x240>)
 8004c16:	6013      	str	r3, [r2, #0]
					if (loadcellc2 == 0) {
 8004c18:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <hx711_weight+0x23c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <hx711_weight+0x14e>
						hx_711readtimestamp[1] = 1;
 8004c20:	493c      	ldr	r1, [pc, #240]	; (8004d14 <hx711_weight+0x220>)
 8004c22:	f04f 0201 	mov.w	r2, #1
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 8004c2e:	f7ff fd49 	bl	80046c4 <micros>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4937      	ldr	r1, [pc, #220]	; (8004d14 <hx711_weight+0x220>)
 8004c38:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 8004c3c:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <hx711_weight+0x230>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 1 && num == 2) {
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <hx711_weight+0x244>)
 8004c44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c48:	1e51      	subs	r1, r2, #1
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	d13e      	bne.n	8004ccc <hx711_weight+0x1d8>
 8004c4e:	787b      	ldrb	r3, [r7, #1]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d13b      	bne.n	8004ccc <hx711_weight+0x1d8>
		if (loadcellc3 > 0 && loadcellc3 < 10) {
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <hx711_weight+0x248>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d037      	beq.n	8004ccc <hx711_weight+0x1d8>
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <hx711_weight+0x248>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d833      	bhi.n	8004ccc <hx711_weight+0x1d8>
			hx711_channel = 1;
 8004c64:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <hx711_weight+0x228>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
			int value3 = hx711_value(hx711);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fdc4 	bl	80047f8 <hx711_value>
 8004c70:	61f8      	str	r0, [r7, #28]
			if (value3 != 100000) {
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <hx711_weight+0x22c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d028      	beq.n	8004ccc <hx711_weight+0x1d8>
				if (start2 == 1)
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <hx711_weight+0x24c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d103      	bne.n	8004c8a <hx711_weight+0x196>
					start2 = 0;
 8004c82:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <hx711_weight+0x24c>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e020      	b.n	8004ccc <hx711_weight+0x1d8>
				else {
					loadcellc3 -= 1;
 8004c8a:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <hx711_weight+0x248>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <hx711_weight+0x248>)
 8004c94:	701a      	strb	r2, [r3, #0]
					ave3 += value3;
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <hx711_weight+0x250>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <hx711_weight+0x250>)
 8004ca0:	6013      	str	r3, [r2, #0]
					if (loadcellc3 == 0) {
 8004ca2:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <hx711_weight+0x248>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d110      	bne.n	8004ccc <hx711_weight+0x1d8>
						hx_711readtimestamp2[1] = 2;
 8004caa:	4923      	ldr	r1, [pc, #140]	; (8004d38 <hx711_weight+0x244>)
 8004cac:	f04f 0202 	mov.w	r2, #2
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 8004cb8:	f7ff fd04 	bl	80046c4 <micros>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	491d      	ldr	r1, [pc, #116]	; (8004d38 <hx711_weight+0x244>)
 8004cc2:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <hx711_weight+0x24c>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 2 && num == 2) {
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <hx711_weight+0x244>)
 8004cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cd2:	1e91      	subs	r1, r2, #2
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	d15a      	bne.n	8004d8e <hx711_weight+0x29a>
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d157      	bne.n	8004d8e <hx711_weight+0x29a>
		if (loadcellc4 > 0 && loadcellc4 < 10) {
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <hx711_weight+0x254>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d053      	beq.n	8004d8e <hx711_weight+0x29a>
 8004ce6:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <hx711_weight+0x254>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b09      	cmp	r3, #9
 8004cec:	d84f      	bhi.n	8004d8e <hx711_weight+0x29a>
			hx711_channel = 2;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <hx711_weight+0x228>)
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]
			int value4 = hx711_value(hx711);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fd7f 	bl	80047f8 <hx711_value>
 8004cfa:	61b8      	str	r0, [r7, #24]
			if (value4 != 100000) {
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <hx711_weight+0x22c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d044      	beq.n	8004d8e <hx711_weight+0x29a>
				if (start2 == 1)
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <hx711_weight+0x24c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d11f      	bne.n	8004d4c <hx711_weight+0x258>
					start2 = 0;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <hx711_weight+0x24c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e03c      	b.n	8004d8e <hx711_weight+0x29a>
 8004d14:	20000010 	.word	0x20000010
 8004d18:	20000430 	.word	0x20000430
 8004d1c:	20000008 	.word	0x20000008
 8004d20:	000186a0 	.word	0x000186a0
 8004d24:	20000030 	.word	0x20000030
 8004d28:	20000428 	.word	0x20000428
 8004d2c:	20000488 	.word	0x20000488
 8004d30:	20000431 	.word	0x20000431
 8004d34:	2000048c 	.word	0x2000048c
 8004d38:	20000020 	.word	0x20000020
 8004d3c:	20000432 	.word	0x20000432
 8004d40:	20000034 	.word	0x20000034
 8004d44:	20000490 	.word	0x20000490
 8004d48:	20000433 	.word	0x20000433
				else {
					loadcellc4 -= 1;
 8004d4c:	4bb1      	ldr	r3, [pc, #708]	; (8005014 <hx711_weight+0x520>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4baf      	ldr	r3, [pc, #700]	; (8005014 <hx711_weight+0x520>)
 8004d56:	701a      	strb	r2, [r3, #0]
					ave4 += value4;
 8004d58:	4baf      	ldr	r3, [pc, #700]	; (8005018 <hx711_weight+0x524>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	4aad      	ldr	r2, [pc, #692]	; (8005018 <hx711_weight+0x524>)
 8004d62:	6013      	str	r3, [r2, #0]
					if (loadcellc4 == 0) {
 8004d64:	4bab      	ldr	r3, [pc, #684]	; (8005014 <hx711_weight+0x520>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d110      	bne.n	8004d8e <hx711_weight+0x29a>
						hx_711readtimestamp2[1] = 1;
 8004d6c:	49ab      	ldr	r1, [pc, #684]	; (800501c <hx711_weight+0x528>)
 8004d6e:	f04f 0201 	mov.w	r2, #1
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 8004d7a:	f7ff fca3 	bl	80046c4 <micros>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	49a6      	ldr	r1, [pc, #664]	; (800501c <hx711_weight+0x528>)
 8004d84:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 8004d88:	4ba5      	ldr	r3, [pc, #660]	; (8005020 <hx711_weight+0x52c>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	if ((loadcellc1 <= 0 || loadcellc1 >= 5) && loadcellc1 != 10 && num == 1) {
 8004d8e:	4ba5      	ldr	r3, [pc, #660]	; (8005024 <hx711_weight+0x530>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <hx711_weight+0x2aa>
 8004d96:	4ba3      	ldr	r3, [pc, #652]	; (8005024 <hx711_weight+0x530>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d94c      	bls.n	8004e38 <hx711_weight+0x344>
 8004d9e:	4ba1      	ldr	r3, [pc, #644]	; (8005024 <hx711_weight+0x530>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b0a      	cmp	r3, #10
 8004da4:	d048      	beq.n	8004e38 <hx711_weight+0x344>
 8004da6:	787b      	ldrb	r3, [r7, #1]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d145      	bne.n	8004e38 <hx711_weight+0x344>
		int32_t data = (int32_t) (ave1 / sample);
 8004dac:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <hx711_weight+0x534>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004db6:	617b      	str	r3, [r7, #20]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	ed93 7a04 	vldr	s14, [r3, #16]
 8004dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc1 = 10;
 8004dd8:	4b92      	ldr	r3, [pc, #584]	; (8005024 <hx711_weight+0x530>)
 8004dda:	220a      	movs	r2, #10
 8004ddc:	701a      	strb	r2, [r3, #0]
		tareweight1[(int) tareweight1[0] + 1] = hx711->weightA;
 8004dde:	4b93      	ldr	r3, [pc, #588]	; (800502c <hx711_weight+0x538>)
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de8:	ee17 3a90 	vmov	r3, s15
 8004dec:	3301      	adds	r3, #1
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a12      	ldr	r2, [r2, #32]
 8004df2:	498e      	ldr	r1, [pc, #568]	; (800502c <hx711_weight+0x538>)
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	601a      	str	r2, [r3, #0]
		tareweight1[0] = fabs(((int) tareweight1[0] + 1) % 4);
 8004dfa:	4b8c      	ldr	r3, [pc, #560]	; (800502c <hx711_weight+0x538>)
 8004dfc:	edd3 7a00 	vldr	s15, [r3]
 8004e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e04:	ee17 3a90 	vmov	r3, s15
 8004e08:	3301      	adds	r3, #1
 8004e0a:	425a      	negs	r2, r3
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	f002 0203 	and.w	r2, r2, #3
 8004e14:	bf58      	it	pl
 8004e16:	4253      	negpl	r3, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fb fb83 	bl	8000524 <__aeabi_i2d>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fb fec9 	bl	8000bbc <__aeabi_d2f>
 8004e2a:	ee07 0a90 	vmov	s15, r0
 8004e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e32:	4b7e      	ldr	r3, [pc, #504]	; (800502c <hx711_weight+0x538>)
 8004e34:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc2 <= 0 || loadcellc2 >= 5) && loadcellc2 != 10 && num == 1) {
 8004e38:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <hx711_weight+0x53c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <hx711_weight+0x354>
 8004e40:	4b7b      	ldr	r3, [pc, #492]	; (8005030 <hx711_weight+0x53c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d94c      	bls.n	8004ee2 <hx711_weight+0x3ee>
 8004e48:	4b79      	ldr	r3, [pc, #484]	; (8005030 <hx711_weight+0x53c>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b0a      	cmp	r3, #10
 8004e4e:	d048      	beq.n	8004ee2 <hx711_weight+0x3ee>
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d145      	bne.n	8004ee2 <hx711_weight+0x3ee>
		int32_t data = (int32_t) (ave2 / sample);
 8004e56:	4b77      	ldr	r3, [pc, #476]	; (8005034 <hx711_weight+0x540>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	887b      	ldrh	r3, [r7, #2]
 8004e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc2 = 10;
 8004e82:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <hx711_weight+0x53c>)
 8004e84:	220a      	movs	r2, #10
 8004e86:	701a      	strb	r2, [r3, #0]
		tareweight2[(int) tareweight2[0] + 1] = hx711->weightB;
 8004e88:	4b6b      	ldr	r3, [pc, #428]	; (8005038 <hx711_weight+0x544>)
 8004e8a:	edd3 7a00 	vldr	s15, [r3]
 8004e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e92:	ee17 3a90 	vmov	r3, s15
 8004e96:	3301      	adds	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e9c:	4966      	ldr	r1, [pc, #408]	; (8005038 <hx711_weight+0x544>)
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	601a      	str	r2, [r3, #0]
		tareweight2[0] = fabs(((int) tareweight2[0] + 1) % 4);
 8004ea4:	4b64      	ldr	r3, [pc, #400]	; (8005038 <hx711_weight+0x544>)
 8004ea6:	edd3 7a00 	vldr	s15, [r3]
 8004eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eae:	ee17 3a90 	vmov	r3, s15
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	425a      	negs	r2, r3
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	f002 0203 	and.w	r2, r2, #3
 8004ebe:	bf58      	it	pl
 8004ec0:	4253      	negpl	r3, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fb fb2e 	bl	8000524 <__aeabi_i2d>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f7fb fe74 	bl	8000bbc <__aeabi_d2f>
 8004ed4:	ee07 0a90 	vmov	s15, r0
 8004ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8004edc:	4b56      	ldr	r3, [pc, #344]	; (8005038 <hx711_weight+0x544>)
 8004ede:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc3 <= 0 || loadcellc3 >= 5) && loadcellc3 != 10 && num == 2) {
 8004ee2:	4b56      	ldr	r3, [pc, #344]	; (800503c <hx711_weight+0x548>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <hx711_weight+0x3fe>
 8004eea:	4b54      	ldr	r3, [pc, #336]	; (800503c <hx711_weight+0x548>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d94c      	bls.n	8004f8c <hx711_weight+0x498>
 8004ef2:	4b52      	ldr	r3, [pc, #328]	; (800503c <hx711_weight+0x548>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b0a      	cmp	r3, #10
 8004ef8:	d048      	beq.n	8004f8c <hx711_weight+0x498>
 8004efa:	787b      	ldrb	r3, [r7, #1]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d145      	bne.n	8004f8c <hx711_weight+0x498>
		int32_t data = (int32_t) (ave3 / sample);
 8004f00:	4b4f      	ldr	r3, [pc, #316]	; (8005040 <hx711_weight+0x54c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc3 = 10;
 8004f2c:	4b43      	ldr	r3, [pc, #268]	; (800503c <hx711_weight+0x548>)
 8004f2e:	220a      	movs	r2, #10
 8004f30:	701a      	strb	r2, [r3, #0]
		tareweight3[(int) tareweight3[0] + 1] = hx711->weightA;
 8004f32:	4b44      	ldr	r3, [pc, #272]	; (8005044 <hx711_weight+0x550>)
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3c:	ee17 3a90 	vmov	r3, s15
 8004f40:	3301      	adds	r3, #1
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6a12      	ldr	r2, [r2, #32]
 8004f46:	493f      	ldr	r1, [pc, #252]	; (8005044 <hx711_weight+0x550>)
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	601a      	str	r2, [r3, #0]
		tareweight3[0] = fabs(((int) tareweight3[0] + 1) % 4);
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <hx711_weight+0x550>)
 8004f50:	edd3 7a00 	vldr	s15, [r3]
 8004f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f58:	ee17 3a90 	vmov	r3, s15
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	425a      	negs	r2, r3
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	f002 0203 	and.w	r2, r2, #3
 8004f68:	bf58      	it	pl
 8004f6a:	4253      	negpl	r3, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb fad9 	bl	8000524 <__aeabi_i2d>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fb fe1f 	bl	8000bbc <__aeabi_d2f>
 8004f7e:	ee07 0a90 	vmov	s15, r0
 8004f82:	eef0 7ae7 	vabs.f32	s15, s15
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <hx711_weight+0x550>)
 8004f88:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc4 <= 0 || loadcellc4 >= 5) && loadcellc4 != 10 && num == 2) {
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <hx711_weight+0x520>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <hx711_weight+0x4a8>
 8004f94:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <hx711_weight+0x520>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d969      	bls.n	8005070 <hx711_weight+0x57c>
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <hx711_weight+0x520>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b0a      	cmp	r3, #10
 8004fa2:	d065      	beq.n	8005070 <hx711_weight+0x57c>
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d162      	bne.n	8005070 <hx711_weight+0x57c>
		int32_t data = (int32_t) (ave4 / sample);
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <hx711_weight+0x524>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	ed93 7a06 	vldr	s14, [r3, #24]
 8004fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc4 = 10;
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <hx711_weight+0x520>)
 8004fd8:	220a      	movs	r2, #10
 8004fda:	701a      	strb	r2, [r3, #0]
		tareweight4[(int) tareweight4[0] + 1] = hx711->weightB;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <hx711_weight+0x554>)
 8004fde:	edd3 7a00 	vldr	s15, [r3]
 8004fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe6:	ee17 3a90 	vmov	r3, s15
 8004fea:	3301      	adds	r3, #1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ff0:	4915      	ldr	r1, [pc, #84]	; (8005048 <hx711_weight+0x554>)
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	601a      	str	r2, [r3, #0]
		tareweight4[0] = fabs(((int) tareweight4[0] + 1) % 4);
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <hx711_weight+0x554>)
 8004ffa:	edd3 7a00 	vldr	s15, [r3]
 8004ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005002:	ee17 3a90 	vmov	r3, s15
 8005006:	3301      	adds	r3, #1
 8005008:	425a      	negs	r2, r3
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	e01b      	b.n	800504c <hx711_weight+0x558>
 8005014:	20000433 	.word	0x20000433
 8005018:	20000494 	.word	0x20000494
 800501c:	20000020 	.word	0x20000020
 8005020:	20000034 	.word	0x20000034
 8005024:	20000430 	.word	0x20000430
 8005028:	20000488 	.word	0x20000488
 800502c:	20000438 	.word	0x20000438
 8005030:	20000431 	.word	0x20000431
 8005034:	2000048c 	.word	0x2000048c
 8005038:	2000044c 	.word	0x2000044c
 800503c:	20000432 	.word	0x20000432
 8005040:	20000490 	.word	0x20000490
 8005044:	20000460 	.word	0x20000460
 8005048:	20000474 	.word	0x20000474
 800504c:	bf58      	it	pl
 800504e:	4253      	negpl	r3, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa67 	bl	8000524 <__aeabi_i2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f7fb fdad 	bl	8000bbc <__aeabi_d2f>
 8005062:	ee07 0a90 	vmov	s15, r0
 8005066:	eef0 7ae7 	vabs.f32	s15, s15
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <hx711_weight+0x588>)
 800506c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8005070:	bf00      	nop
 8005072:	eeb0 0a67 	vmov.f32	s0, s15
 8005076:	3728      	adds	r7, #40	; 0x28
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000474 	.word	0x20000474

08005080 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coefA, float coefB) {
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	ed87 0a02 	vstr	s0, [r7, #8]
 800508c:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->coefA = coefA;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	611a      	str	r2, [r3, #16]
	hx711->coefB = coefB;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	619a      	str	r2, [r3, #24]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <tcaselect>:
//#############################################################################################
void hx711_power_up(hx711_t *hx711) {
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
}
//#############################################################################################
void tcaselect(uint8_t i) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
	if (i > 7)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b07      	cmp	r3, #7
 80050b6:	d80f      	bhi.n	80050d8 <tcaselect+0x30>
		return;
	uint8_t pData[1] = { 1 << i };
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, TCAADDR, pData, 1, 10);
 80050c4:	f107 020c 	add.w	r2, r7, #12
 80050c8:	230a      	movs	r3, #10
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2301      	movs	r3, #1
 80050ce:	21e0      	movs	r1, #224	; 0xe0
 80050d0:	4803      	ldr	r0, [pc, #12]	; (80050e0 <tcaselect+0x38>)
 80050d2:	f002 ff69 	bl	8007fa8 <HAL_I2C_Master_Transmit>
 80050d6:	e000      	b.n	80050da <tcaselect+0x32>
		return;
 80050d8:	bf00      	nop
}
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000134 	.word	0x20000134

080050e4 <setResistance>:

void setResistance(int percent) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
//  digitalWrite(UD, LOW);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f2:	4823      	ldr	r0, [pc, #140]	; (8005180 <setResistance+0x9c>)
 80050f4:	f002 fde2 	bl	8007cbc <HAL_GPIO_WritePin>
//  digitalWrite(CS, LOW);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80050f8:	2200      	movs	r2, #0
 80050fa:	2104      	movs	r1, #4
 80050fc:	4820      	ldr	r0, [pc, #128]	; (8005180 <setResistance+0x9c>)
 80050fe:	f002 fddd 	bl	8007cbc <HAL_GPIO_WritePin>
	for (int i = 0; i < 100; i++) {
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e010      	b.n	800512a <setResistance+0x46>
//    digitalWrite(INC, LOW);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005108:	2200      	movs	r2, #0
 800510a:	2102      	movs	r1, #2
 800510c:	481c      	ldr	r0, [pc, #112]	; (8005180 <setResistance+0x9c>)
 800510e:	f002 fdd5 	bl	8007cbc <HAL_GPIO_WritePin>
		hx711_delay_us();
 8005112:	f7ff faf1 	bl	80046f8 <hx711_delay_us>
//    digitalWrite(INC, HIGH);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8005116:	2201      	movs	r2, #1
 8005118:	2102      	movs	r1, #2
 800511a:	4819      	ldr	r0, [pc, #100]	; (8005180 <setResistance+0x9c>)
 800511c:	f002 fdce 	bl	8007cbc <HAL_GPIO_WritePin>
		hx711_delay_us();
 8005120:	f7ff faea 	bl	80046f8 <hx711_delay_us>
	for (int i = 0; i < 100; i++) {
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b63      	cmp	r3, #99	; 0x63
 800512e:	ddeb      	ble.n	8005108 <setResistance+0x24>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8005130:	2201      	movs	r2, #1
 8005132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005136:	4812      	ldr	r0, [pc, #72]	; (8005180 <setResistance+0x9c>)
 8005138:	f002 fdc0 	bl	8007cbc <HAL_GPIO_WritePin>
	for (int i = 0; i < percent; i++) {
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	e010      	b.n	8005164 <setResistance+0x80>
		//    digitalWrite(INC, LOW);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005142:	2200      	movs	r2, #0
 8005144:	2102      	movs	r1, #2
 8005146:	480e      	ldr	r0, [pc, #56]	; (8005180 <setResistance+0x9c>)
 8005148:	f002 fdb8 	bl	8007cbc <HAL_GPIO_WritePin>
		hx711_delay_us();
 800514c:	f7ff fad4 	bl	80046f8 <hx711_delay_us>
		//    digitalWrite(INC, HIGH);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8005150:	2201      	movs	r2, #1
 8005152:	2102      	movs	r1, #2
 8005154:	480a      	ldr	r0, [pc, #40]	; (8005180 <setResistance+0x9c>)
 8005156:	f002 fdb1 	bl	8007cbc <HAL_GPIO_WritePin>
		hx711_delay_us();
 800515a:	f7ff facd 	bl	80046f8 <hx711_delay_us>
	for (int i = 0; i < percent; i++) {
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3301      	adds	r3, #1
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	dbea      	blt.n	8005142 <setResistance+0x5e>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800516c:	2201      	movs	r2, #1
 800516e:	2104      	movs	r1, #4
 8005170:	4803      	ldr	r0, [pc, #12]	; (8005180 <setResistance+0x9c>)
 8005172:	f002 fda3 	bl	8007cbc <HAL_GPIO_WritePin>
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40020400 	.word	0x40020400

08005184 <EncoderVelocity_Update>:

float EncoderVelocity_Update(int unit) {
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	ed2d 8b02 	vpush	{d8}
 800518c:	b08e      	sub	sp, #56	; 0x38
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
	static uint32_t EncoderLastPosition2 = 0;
	static uint64_t EncoderLastTimestamp2 = 0;
	static uint32_t EncoderLastPosition3 = 0;
	static uint64_t EncoderLastTimestamp3 = 0;
	//read data
	if (unit == 1) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d13e      	bne.n	8005216 <EncoderVelocity_Update+0x92>
		uint32_t EncoderNowPosition1 = distancepulse1;
 8005198:	4b64      	ldr	r3, [pc, #400]	; (800532c <EncoderVelocity_Update+0x1a8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	617b      	str	r3, [r7, #20]
		uint64_t EncoderNowTimestamp1 = micros() / 10;
 800519e:	f7ff fa91 	bl	80046c4 <micros>
 80051a2:	f04f 020a 	mov.w	r2, #10
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f7fb fe65 	bl	8000e78 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		EncoderTimeDiff1 = EncoderNowTimestamp1 - EncoderLastTimestamp1;
 80051b6:	4b5e      	ldr	r3, [pc, #376]	; (8005330 <EncoderVelocity_Update+0x1ac>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051c0:	ebb0 0a02 	subs.w	sl, r0, r2
 80051c4:	eb61 0b03 	sbc.w	fp, r1, r3
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <EncoderVelocity_Update+0x1b0>)
 80051ca:	e9c3 ab00 	strd	sl, fp, [r3]
		EncoderPositionDiff1 = EncoderNowPosition1 - EncoderLastPosition1;
 80051ce:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <EncoderVelocity_Update+0x1b4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b58      	ldr	r3, [pc, #352]	; (800533c <EncoderVelocity_Update+0x1b8>)
 80051da:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition1 = EncoderNowPosition1;
 80051dc:	4a56      	ldr	r2, [pc, #344]	; (8005338 <EncoderVelocity_Update+0x1b4>)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp1 = EncoderNowTimestamp1;
 80051e2:	4953      	ldr	r1, [pc, #332]	; (8005330 <EncoderVelocity_Update+0x1ac>)
 80051e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e8:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff1 * 100000) / (float) EncoderTimeDiff1;
 80051ec:	4b53      	ldr	r3, [pc, #332]	; (800533c <EncoderVelocity_Update+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a53      	ldr	r2, [pc, #332]	; (8005340 <EncoderVelocity_Update+0x1bc>)
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80051fe:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <EncoderVelocity_Update+0x1b0>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	f7fb fdf0 	bl	8000dec <__aeabi_ul2f>
 800520c:	ee07 0a10 	vmov	s14, r0
 8005210:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005214:	e082      	b.n	800531c <EncoderVelocity_Update+0x198>
	}
	if (unit == 2) {
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d13e      	bne.n	800529a <EncoderVelocity_Update+0x116>
		uint32_t EncoderNowPosition2 = distancepulse2;
 800521c:	4b49      	ldr	r3, [pc, #292]	; (8005344 <EncoderVelocity_Update+0x1c0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
		uint64_t EncoderNowTimestamp2 = micros() / 10;
 8005222:	f7ff fa4f 	bl	80046c4 <micros>
 8005226:	f04f 020a 	mov.w	r2, #10
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f7fb fe23 	bl	8000e78 <__aeabi_uldivmod>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9c7 2306 	strd	r2, r3, [r7, #24]
		EncoderTimeDiff2 = EncoderNowTimestamp2 - EncoderLastTimestamp2;
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <EncoderVelocity_Update+0x1c4>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005244:	ebb0 0802 	subs.w	r8, r0, r2
 8005248:	eb61 0903 	sbc.w	r9, r1, r3
 800524c:	4b3f      	ldr	r3, [pc, #252]	; (800534c <EncoderVelocity_Update+0x1c8>)
 800524e:	e9c3 8900 	strd	r8, r9, [r3]
		EncoderPositionDiff2 = EncoderNowPosition2 - EncoderLastPosition2;
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <EncoderVelocity_Update+0x1cc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	461a      	mov	r2, r3
 800525c:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <EncoderVelocity_Update+0x1d0>)
 800525e:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition2 = EncoderNowPosition2;
 8005260:	4a3b      	ldr	r2, [pc, #236]	; (8005350 <EncoderVelocity_Update+0x1cc>)
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp2 = EncoderNowTimestamp2;
 8005266:	4938      	ldr	r1, [pc, #224]	; (8005348 <EncoderVelocity_Update+0x1c4>)
 8005268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526c:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff2 * 100000) / (float) EncoderTimeDiff2;
 8005270:	4b38      	ldr	r3, [pc, #224]	; (8005354 <EncoderVelocity_Update+0x1d0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a32      	ldr	r2, [pc, #200]	; (8005340 <EncoderVelocity_Update+0x1bc>)
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005282:	4b32      	ldr	r3, [pc, #200]	; (800534c <EncoderVelocity_Update+0x1c8>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f7fb fdae 	bl	8000dec <__aeabi_ul2f>
 8005290:	ee07 0a10 	vmov	s14, r0
 8005294:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005298:	e040      	b.n	800531c <EncoderVelocity_Update+0x198>
	}
	if (unit == 3) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d13d      	bne.n	800531c <EncoderVelocity_Update+0x198>
		uint32_t EncoderNowPosition3 = distancepulse3;
 80052a0:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <EncoderVelocity_Update+0x1d4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
		uint64_t EncoderNowTimestamp3 = micros() / 10;
 80052a6:	f7ff fa0d 	bl	80046c4 <micros>
 80052aa:	f04f 020a 	mov.w	r2, #10
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f7fb fde1 	bl	8000e78 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		EncoderTimeDiff3 = EncoderNowTimestamp3 - EncoderLastTimestamp3;
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <EncoderVelocity_Update+0x1d8>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052c8:	1a84      	subs	r4, r0, r2
 80052ca:	eb61 0503 	sbc.w	r5, r1, r3
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <EncoderVelocity_Update+0x1dc>)
 80052d0:	e9c3 4500 	strd	r4, r5, [r3]
		EncoderPositionDiff3 = EncoderNowPosition3 - EncoderLastPosition3;
 80052d4:	4b23      	ldr	r3, [pc, #140]	; (8005364 <EncoderVelocity_Update+0x1e0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4b22      	ldr	r3, [pc, #136]	; (8005368 <EncoderVelocity_Update+0x1e4>)
 80052e0:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition3 = EncoderNowPosition3;
 80052e2:	4a20      	ldr	r2, [pc, #128]	; (8005364 <EncoderVelocity_Update+0x1e0>)
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp3 = EncoderNowTimestamp3;
 80052e8:	491c      	ldr	r1, [pc, #112]	; (800535c <EncoderVelocity_Update+0x1d8>)
 80052ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ee:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff3 * 100000) / (float) EncoderTimeDiff3;
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <EncoderVelocity_Update+0x1e4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <EncoderVelocity_Update+0x1bc>)
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <EncoderVelocity_Update+0x1dc>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	f7fb fd6d 	bl	8000dec <__aeabi_ul2f>
 8005312:	ee07 0a10 	vmov	s14, r0
 8005316:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800531a:	e7ff      	b.n	800531c <EncoderVelocity_Update+0x198>
	}
}
 800531c:	eeb0 0a67 	vmov.f32	s0, s15
 8005320:	3738      	adds	r7, #56	; 0x38
 8005322:	46bd      	mov	sp, r7
 8005324:	ecbd 8b02 	vpop	{d8}
 8005328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532c:	20000518 	.word	0x20000518
 8005330:	20000718 	.word	0x20000718
 8005334:	20000550 	.word	0x20000550
 8005338:	20000720 	.word	0x20000720
 800533c:	2000054c 	.word	0x2000054c
 8005340:	000186a0 	.word	0x000186a0
 8005344:	2000051c 	.word	0x2000051c
 8005348:	20000728 	.word	0x20000728
 800534c:	20000560 	.word	0x20000560
 8005350:	20000730 	.word	0x20000730
 8005354:	20000558 	.word	0x20000558
 8005358:	20000520 	.word	0x20000520
 800535c:	20000738 	.word	0x20000738
 8005360:	20000570 	.word	0x20000570
 8005364:	20000740 	.word	0x20000740
 8005368:	20000568 	.word	0x20000568

0800536c <limitswitchlowpass>:
void limitswitchlowpass() {
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
	if (limitswitch1 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0) {
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <limitswitchlowpass+0x148>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10d      	bne.n	8005394 <limitswitchlowpass+0x28>
 8005378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800537c:	484e      	ldr	r0, [pc, #312]	; (80054b8 <limitswitchlowpass+0x14c>)
 800537e:	f002 fc85 	bl	8007c8c <HAL_GPIO_ReadPin>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <limitswitchlowpass+0x28>
		limitswitchc1 += 1;
 8005388:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <limitswitchlowpass+0x150>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a4b      	ldr	r2, [pc, #300]	; (80054bc <limitswitchlowpass+0x150>)
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e014      	b.n	80053be <limitswitchlowpass+0x52>
	} else if (limitswitch1 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1) {
 8005394:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <limitswitchlowpass+0x148>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10d      	bne.n	80053b8 <limitswitchlowpass+0x4c>
 800539c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053a0:	4845      	ldr	r0, [pc, #276]	; (80054b8 <limitswitchlowpass+0x14c>)
 80053a2:	f002 fc73 	bl	8007c8c <HAL_GPIO_ReadPin>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <limitswitchlowpass+0x4c>
		limitswitchc1 -= 1;
 80053ac:	4b43      	ldr	r3, [pc, #268]	; (80054bc <limitswitchlowpass+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	4a42      	ldr	r2, [pc, #264]	; (80054bc <limitswitchlowpass+0x150>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e002      	b.n	80053be <limitswitchlowpass+0x52>
	} else {
		limitswitchc1 = 0;
 80053b8:	4b40      	ldr	r3, [pc, #256]	; (80054bc <limitswitchlowpass+0x150>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc1 >= 10)
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <limitswitchlowpass+0x150>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	dd02      	ble.n	80053cc <limitswitchlowpass+0x60>
		limitswitch1 = 0;
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <limitswitchlowpass+0x148>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
	if (limitswitchc1 <= -10)
 80053cc:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <limitswitchlowpass+0x150>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f113 0f09 	cmn.w	r3, #9
 80053d4:	da02      	bge.n	80053dc <limitswitchlowpass+0x70>
		limitswitch1 = 1;
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <limitswitchlowpass+0x148>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]

	if (limitswitch2 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) {
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <limitswitchlowpass+0x154>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10d      	bne.n	8005400 <limitswitchlowpass+0x94>
 80053e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053e8:	4833      	ldr	r0, [pc, #204]	; (80054b8 <limitswitchlowpass+0x14c>)
 80053ea:	f002 fc4f 	bl	8007c8c <HAL_GPIO_ReadPin>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <limitswitchlowpass+0x94>
		limitswitchc2 += 1;
 80053f4:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <limitswitchlowpass+0x158>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <limitswitchlowpass+0x158>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e014      	b.n	800542a <limitswitchlowpass+0xbe>
	} else if (limitswitch2 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <limitswitchlowpass+0x154>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <limitswitchlowpass+0xb8>
 8005408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800540c:	482a      	ldr	r0, [pc, #168]	; (80054b8 <limitswitchlowpass+0x14c>)
 800540e:	f002 fc3d 	bl	8007c8c <HAL_GPIO_ReadPin>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d105      	bne.n	8005424 <limitswitchlowpass+0xb8>
		limitswitchc2 -= 1;
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <limitswitchlowpass+0x158>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <limitswitchlowpass+0x158>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e002      	b.n	800542a <limitswitchlowpass+0xbe>
	} else {
		limitswitchc2 = 0;
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <limitswitchlowpass+0x158>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc2 >= 10)
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <limitswitchlowpass+0x158>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b09      	cmp	r3, #9
 8005430:	dd02      	ble.n	8005438 <limitswitchlowpass+0xcc>
		limitswitch2 = 0;
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <limitswitchlowpass+0x154>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
	if (limitswitchc2 <= -10)
 8005438:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <limitswitchlowpass+0x158>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f113 0f09 	cmn.w	r3, #9
 8005440:	da02      	bge.n	8005448 <limitswitchlowpass+0xdc>
		limitswitch2 = 1;
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <limitswitchlowpass+0x154>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]

	if (limitswitch3 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0) {
 8005448:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <limitswitchlowpass+0x15c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10c      	bne.n	800546a <limitswitchlowpass+0xfe>
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	4819      	ldr	r0, [pc, #100]	; (80054b8 <limitswitchlowpass+0x14c>)
 8005454:	f002 fc1a 	bl	8007c8c <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <limitswitchlowpass+0xfe>
		limitswitchc3 += 1;
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <limitswitchlowpass+0x160>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <limitswitchlowpass+0x160>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e013      	b.n	8005492 <limitswitchlowpass+0x126>
	} else if (limitswitch3 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) {
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <limitswitchlowpass+0x15c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10c      	bne.n	800548c <limitswitchlowpass+0x120>
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	4810      	ldr	r0, [pc, #64]	; (80054b8 <limitswitchlowpass+0x14c>)
 8005476:	f002 fc09 	bl	8007c8c <HAL_GPIO_ReadPin>
 800547a:	4603      	mov	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d105      	bne.n	800548c <limitswitchlowpass+0x120>
		limitswitchc3 -= 1;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <limitswitchlowpass+0x160>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3b01      	subs	r3, #1
 8005486:	4a11      	ldr	r2, [pc, #68]	; (80054cc <limitswitchlowpass+0x160>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e002      	b.n	8005492 <limitswitchlowpass+0x126>
	} else {
		limitswitchc3 = 0;
 800548c:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <limitswitchlowpass+0x160>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc3 >= 10)
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <limitswitchlowpass+0x160>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b09      	cmp	r3, #9
 8005498:	dd02      	ble.n	80054a0 <limitswitchlowpass+0x134>
		limitswitch3 = 0;
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <limitswitchlowpass+0x15c>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
	if (limitswitchc3 <= -10)
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <limitswitchlowpass+0x160>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f113 0f09 	cmn.w	r3, #9
 80054a8:	da02      	bge.n	80054b0 <limitswitchlowpass+0x144>
		limitswitch3 = 1;
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <limitswitchlowpass+0x15c>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200004e8 	.word	0x200004e8
 80054b8:	40020800 	.word	0x40020800
 80054bc:	200004f4 	.word	0x200004f4
 80054c0:	200004ec 	.word	0x200004ec
 80054c4:	200004f8 	.word	0x200004f8
 80054c8:	200004f0 	.word	0x200004f0
 80054cc:	200004fc 	.word	0x200004fc

080054d0 <distancemeasurement>:
void distancemeasurement() {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
	distancepulse1 = TIM1->CNT - error1 + distancestamp1;
 80054d4:	4b60      	ldr	r3, [pc, #384]	; (8005658 <distancemeasurement+0x188>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	4a60      	ldr	r2, [pc, #384]	; (800565c <distancemeasurement+0x18c>)
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	4a60      	ldr	r2, [pc, #384]	; (8005660 <distancemeasurement+0x190>)
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4b5f      	ldr	r3, [pc, #380]	; (8005664 <distancemeasurement+0x194>)
 80054e8:	601a      	str	r2, [r3, #0]
	if (olddistance1 - distancepulse1 >= 32500) {
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <distancemeasurement+0x198>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b5d      	ldr	r3, [pc, #372]	; (8005664 <distancemeasurement+0x194>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 80054f8:	4293      	cmp	r3, r2
 80054fa:	dd51      	ble.n	80055a0 <distancemeasurement+0xd0>
		distancestamp1 += 65535;
 80054fc:	4b58      	ldr	r3, [pc, #352]	; (8005660 <distancemeasurement+0x190>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005504:	33ff      	adds	r3, #255	; 0xff
 8005506:	4a56      	ldr	r2, [pc, #344]	; (8005660 <distancemeasurement+0x190>)
 8005508:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 + 65535;
 800550a:	4b56      	ldr	r3, [pc, #344]	; (8005664 <distancemeasurement+0x194>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005512:	33ff      	adds	r3, #255	; 0xff
 8005514:	4a54      	ldr	r2, [pc, #336]	; (8005668 <distancemeasurement+0x198>)
 8005516:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8005518:	4b52      	ldr	r3, [pc, #328]	; (8005664 <distancemeasurement+0x194>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005520:	33ff      	adds	r3, #255	; 0xff
 8005522:	4618      	mov	r0, r3
 8005524:	f7fa fffe 	bl	8000524 <__aeabi_i2d>
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	4b4f      	ldr	r3, [pc, #316]	; (800566c <distancemeasurement+0x19c>)
 800552e:	f7fb f98d 	bl	800084c <__aeabi_ddiv>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <distancemeasurement+0x1a0>)
 8005540:	f7fb f984 	bl	800084c <__aeabi_ddiv>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	4b48      	ldr	r3, [pc, #288]	; (8005674 <distancemeasurement+0x1a4>)
 8005552:	f7fb f97b 	bl	800084c <__aeabi_ddiv>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	4b45      	ldr	r3, [pc, #276]	; (8005678 <distancemeasurement+0x1a8>)
 8005564:	f7fb f972 	bl	800084c <__aeabi_ddiv>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	4b41      	ldr	r3, [pc, #260]	; (800567c <distancemeasurement+0x1ac>)
 8005576:	f7fb f83f 	bl	80005f8 <__aeabi_dmul>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4610      	mov	r0, r2
 8005580:	4619      	mov	r1, r3
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <distancemeasurement+0x1b0>)
 8005588:	f7fb f836 	bl	80005f8 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f7fb fb12 	bl	8000bbc <__aeabi_d2f>
 8005598:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 800559a:	4a3a      	ldr	r2, [pc, #232]	; (8005684 <distancemeasurement+0x1b4>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e0b7      	b.n	8005710 <distancemeasurement+0x240>
	} else if (distancepulse1 - olddistance1 >= 32500) {
 80055a0:	4b30      	ldr	r3, [pc, #192]	; (8005664 <distancemeasurement+0x194>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b30      	ldr	r3, [pc, #192]	; (8005668 <distancemeasurement+0x198>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 80055ae:	4293      	cmp	r3, r2
 80055b0:	dd6a      	ble.n	8005688 <distancemeasurement+0x1b8>
		distancestamp1 -= 65535;
 80055b2:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <distancemeasurement+0x190>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80055ba:	3bff      	subs	r3, #255	; 0xff
 80055bc:	4a28      	ldr	r2, [pc, #160]	; (8005660 <distancemeasurement+0x190>)
 80055be:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 - 65535;
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <distancemeasurement+0x194>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80055c8:	3bff      	subs	r3, #255	; 0xff
 80055ca:	4a27      	ldr	r2, [pc, #156]	; (8005668 <distancemeasurement+0x198>)
 80055cc:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 80055ce:	4b25      	ldr	r3, [pc, #148]	; (8005664 <distancemeasurement+0x194>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80055d6:	3bff      	subs	r3, #255	; 0xff
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa ffa3 	bl	8000524 <__aeabi_i2d>
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	4b22      	ldr	r3, [pc, #136]	; (800566c <distancemeasurement+0x19c>)
 80055e4:	f7fb f932 	bl	800084c <__aeabi_ddiv>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	4b1e      	ldr	r3, [pc, #120]	; (8005670 <distancemeasurement+0x1a0>)
 80055f6:	f7fb f929 	bl	800084c <__aeabi_ddiv>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <distancemeasurement+0x1a4>)
 8005608:	f7fb f920 	bl	800084c <__aeabi_ddiv>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <distancemeasurement+0x1a8>)
 800561a:	f7fb f917 	bl	800084c <__aeabi_ddiv>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4610      	mov	r0, r2
 8005624:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <distancemeasurement+0x1ac>)
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <distancemeasurement+0x1b0>)
 800563e:	f7fa ffdb 	bl	80005f8 <__aeabi_dmul>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f7fb fab7 	bl	8000bbc <__aeabi_d2f>
 800564e:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8005650:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <distancemeasurement+0x1b4>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e05c      	b.n	8005710 <distancemeasurement+0x240>
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	20000540 	.word	0x20000540
 8005660:	20000530 	.word	0x20000530
 8005664:	20000518 	.word	0x20000518
 8005668:	20000534 	.word	0x20000534
 800566c:	40240000 	.word	0x40240000
 8005670:	40500000 	.word	0x40500000
 8005674:	40100000 	.word	0x40100000
 8005678:	40340000 	.word	0x40340000
 800567c:	402e0000 	.word	0x402e0000
 8005680:	40200000 	.word	0x40200000
 8005684:	20000500 	.word	0x20000500
	} else {
		olddistance1 = distancepulse1;
 8005688:	4b75      	ldr	r3, [pc, #468]	; (8005860 <distancemeasurement+0x390>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a75      	ldr	r2, [pc, #468]	; (8005864 <distancemeasurement+0x394>)
 800568e:	6013      	str	r3, [r2, #0]
		distancemetre1 = distancepulse1 / 10.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8005690:	4b73      	ldr	r3, [pc, #460]	; (8005860 <distancemeasurement+0x390>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fa ff45 	bl	8000524 <__aeabi_i2d>
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	4b72      	ldr	r3, [pc, #456]	; (8005868 <distancemeasurement+0x398>)
 80056a0:	f7fb f8d4 	bl	800084c <__aeabi_ddiv>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	4b6e      	ldr	r3, [pc, #440]	; (800586c <distancemeasurement+0x39c>)
 80056b2:	f7fb f8cb 	bl	800084c <__aeabi_ddiv>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	4b6b      	ldr	r3, [pc, #428]	; (8005870 <distancemeasurement+0x3a0>)
 80056c4:	f7fb f8c2 	bl	800084c <__aeabi_ddiv>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4610      	mov	r0, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	4b67      	ldr	r3, [pc, #412]	; (8005874 <distancemeasurement+0x3a4>)
 80056d6:	f7fb f8b9 	bl	800084c <__aeabi_ddiv>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4610      	mov	r0, r2
 80056e0:	4619      	mov	r1, r3
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	4b64      	ldr	r3, [pc, #400]	; (8005878 <distancemeasurement+0x3a8>)
 80056e8:	f7fa ff86 	bl	80005f8 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	4b60      	ldr	r3, [pc, #384]	; (800587c <distancemeasurement+0x3ac>)
 80056fa:	f7fa ff7d 	bl	80005f8 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f7fb fa59 	bl	8000bbc <__aeabi_d2f>
 800570a:	4603      	mov	r3, r0
 800570c:	4a5c      	ldr	r2, [pc, #368]	; (8005880 <distancemeasurement+0x3b0>)
 800570e:	6013      	str	r3, [r2, #0]
	}
	distancepulse2 = TIM2->CNT - error2 + distancestamp2;
 8005710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	4a5b      	ldr	r2, [pc, #364]	; (8005884 <distancemeasurement+0x3b4>)
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	4a5a      	ldr	r2, [pc, #360]	; (8005888 <distancemeasurement+0x3b8>)
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	4413      	add	r3, r2
 8005722:	461a      	mov	r2, r3
 8005724:	4b59      	ldr	r3, [pc, #356]	; (800588c <distancemeasurement+0x3bc>)
 8005726:	601a      	str	r2, [r3, #0]
	distancemetre2 = distancepulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8005728:	4b58      	ldr	r3, [pc, #352]	; (800588c <distancemeasurement+0x3bc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7fa fef9 	bl	8000524 <__aeabi_i2d>
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	4b56      	ldr	r3, [pc, #344]	; (8005890 <distancemeasurement+0x3c0>)
 8005738:	f7fb f888 	bl	800084c <__aeabi_ddiv>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	4b48      	ldr	r3, [pc, #288]	; (800586c <distancemeasurement+0x39c>)
 800574a:	f7fb f87f 	bl	800084c <__aeabi_ddiv>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <distancemeasurement+0x3a0>)
 800575c:	f7fb f876 	bl	800084c <__aeabi_ddiv>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4610      	mov	r0, r2
 8005766:	4619      	mov	r1, r3
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	4b41      	ldr	r3, [pc, #260]	; (8005874 <distancemeasurement+0x3a4>)
 800576e:	f7fb f86d 	bl	800084c <__aeabi_ddiv>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <distancemeasurement+0x3a8>)
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	4b3a      	ldr	r3, [pc, #232]	; (800587c <distancemeasurement+0x3ac>)
 8005792:	f7fa ff31 	bl	80005f8 <__aeabi_dmul>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	f7fb fa0d 	bl	8000bbc <__aeabi_d2f>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <distancemeasurement+0x3c4>)
 80057a6:	6013      	str	r3, [r2, #0]
	distancepulse3 = TIM3->CNT - error3 + distancestamp3;
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <distancemeasurement+0x3c8>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	4a3b      	ldr	r2, [pc, #236]	; (800589c <distancemeasurement+0x3cc>)
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <distancemeasurement+0x3d0>)
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	4413      	add	r3, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b3a      	ldr	r3, [pc, #232]	; (80058a4 <distancemeasurement+0x3d4>)
 80057bc:	601a      	str	r2, [r3, #0]
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 80057be:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <distancemeasurement+0x3d4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fa feae 	bl	8000524 <__aeabi_i2d>
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <distancemeasurement+0x3c0>)
 80057ce:	f7fb f83d 	bl	800084c <__aeabi_ddiv>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <distancemeasurement+0x39c>)
 80057e0:	f7fb f834 	bl	800084c <__aeabi_ddiv>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <distancemeasurement+0x3a0>)
 80057f2:	f7fb f82b 	bl	800084c <__aeabi_ddiv>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4610      	mov	r0, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <distancemeasurement+0x3a8>)
 8005804:	f7fb f822 	bl	800084c <__aeabi_ddiv>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <distancemeasurement+0x398>)
 8005816:	f7fa feef 	bl	80005f8 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <distancemeasurement+0x3c0>)
 8005828:	f7fa fee6 	bl	80005f8 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
			* 5.08;
 8005834:	a308      	add	r3, pc, #32	; (adr r3, 8005858 <distancemeasurement+0x388>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fedd 	bl	80005f8 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	f7fb f9b9 	bl	8000bbc <__aeabi_d2f>
 800584a:	4603      	mov	r3, r0
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <distancemeasurement+0x3d8>)
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	f3af 8000 	nop.w
 8005858:	851eb852 	.word	0x851eb852
 800585c:	401451eb 	.word	0x401451eb
 8005860:	20000518 	.word	0x20000518
 8005864:	20000534 	.word	0x20000534
 8005868:	40240000 	.word	0x40240000
 800586c:	40500000 	.word	0x40500000
 8005870:	40100000 	.word	0x40100000
 8005874:	40340000 	.word	0x40340000
 8005878:	402e0000 	.word	0x402e0000
 800587c:	40200000 	.word	0x40200000
 8005880:	20000500 	.word	0x20000500
 8005884:	20000544 	.word	0x20000544
 8005888:	20000044 	.word	0x20000044
 800588c:	2000051c 	.word	0x2000051c
 8005890:	40280000 	.word	0x40280000
 8005894:	20000504 	.word	0x20000504
 8005898:	40000400 	.word	0x40000400
 800589c:	20000548 	.word	0x20000548
 80058a0:	20000048 	.word	0x20000048
 80058a4:	20000520 	.word	0x20000520
 80058a8:	20000508 	.word	0x20000508
 80058ac:	00000000 	.word	0x00000000

080058b0 <velocitymeasurement>:
void velocitymeasurement() {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	ed2d 8b02 	vpush	{d8}
 80058b6:	af00      	add	r7, sp, #0
	Timestamp_Encoder = micros();
 80058b8:	f7fe ff04 	bl	80046c4 <micros>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4989      	ldr	r1, [pc, #548]	; (8005ae8 <velocitymeasurement+0x238>)
 80058c2:	e9c1 2300 	strd	r2, r3, [r1]
	velocitypulse1 = ((99 * velocitypulse1 + EncoderVelocity_Update(1)) / 100);
 80058c6:	4b89      	ldr	r3, [pc, #548]	; (8005aec <velocitymeasurement+0x23c>)
 80058c8:	edd3 7a00 	vldr	s15, [r3]
 80058cc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8005af0 <velocitymeasurement+0x240>
 80058d0:	ee27 8a87 	vmul.f32	s16, s15, s14
 80058d4:	2001      	movs	r0, #1
 80058d6:	f7ff fc55 	bl	8005184 <EncoderVelocity_Update>
 80058da:	eef0 7a40 	vmov.f32	s15, s0
 80058de:	ee38 7a27 	vadd.f32	s14, s16, s15
 80058e2:	eddf 6a84 	vldr	s13, [pc, #528]	; 8005af4 <velocitymeasurement+0x244>
 80058e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058ea:	4b80      	ldr	r3, [pc, #512]	; (8005aec <velocitymeasurement+0x23c>)
 80058ec:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse2 = ((99 * velocitypulse2 + EncoderVelocity_Update(2)) / 100);
 80058f0:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <velocitymeasurement+0x248>)
 80058f2:	edd3 7a00 	vldr	s15, [r3]
 80058f6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005af0 <velocitymeasurement+0x240>
 80058fa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80058fe:	2002      	movs	r0, #2
 8005900:	f7ff fc40 	bl	8005184 <EncoderVelocity_Update>
 8005904:	eef0 7a40 	vmov.f32	s15, s0
 8005908:	ee38 7a27 	vadd.f32	s14, s16, s15
 800590c:	eddf 6a79 	vldr	s13, [pc, #484]	; 8005af4 <velocitymeasurement+0x244>
 8005910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005914:	4b78      	ldr	r3, [pc, #480]	; (8005af8 <velocitymeasurement+0x248>)
 8005916:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse3 = ((9 * velocitypulse3 + EncoderVelocity_Update(3)) / 10);
 800591a:	4b78      	ldr	r3, [pc, #480]	; (8005afc <velocitymeasurement+0x24c>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005924:	ee27 8a87 	vmul.f32	s16, s15, s14
 8005928:	2003      	movs	r0, #3
 800592a:	f7ff fc2b 	bl	8005184 <EncoderVelocity_Update>
 800592e:	eef0 7a40 	vmov.f32	s15, s0
 8005932:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005936:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800593a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800593e:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <velocitymeasurement+0x24c>)
 8005940:	edc3 7a00 	vstr	s15, [r3]
	velocitymetre1 = velocitypulse1 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8005944:	4b69      	ldr	r3, [pc, #420]	; (8005aec <velocitymeasurement+0x23c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fdfd 	bl	8000548 <__aeabi_f2d>
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	4b6b      	ldr	r3, [pc, #428]	; (8005b00 <velocitymeasurement+0x250>)
 8005954:	f7fa ff7a 	bl	800084c <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4610      	mov	r0, r2
 800595e:	4619      	mov	r1, r3
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	4b67      	ldr	r3, [pc, #412]	; (8005b04 <velocitymeasurement+0x254>)
 8005966:	f7fa ff71 	bl	800084c <__aeabi_ddiv>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	4b64      	ldr	r3, [pc, #400]	; (8005b08 <velocitymeasurement+0x258>)
 8005978:	f7fa ff68 	bl	800084c <__aeabi_ddiv>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <velocitymeasurement+0x25c>)
 800598a:	f7fa ff5f 	bl	800084c <__aeabi_ddiv>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	4b5d      	ldr	r3, [pc, #372]	; (8005b10 <velocitymeasurement+0x260>)
 800599c:	f7fa fe2c 	bl	80005f8 <__aeabi_dmul>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <velocitymeasurement+0x264>)
 80059ae:	f7fa fe23 	bl	80005f8 <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	f7fb f8ff 	bl	8000bbc <__aeabi_d2f>
 80059be:	4603      	mov	r3, r0
 80059c0:	4a55      	ldr	r2, [pc, #340]	; (8005b18 <velocitymeasurement+0x268>)
 80059c2:	6013      	str	r3, [r2, #0]
	velocitymetre2 = velocitypulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 80059c4:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <velocitymeasurement+0x248>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fa fdbd 	bl	8000548 <__aeabi_f2d>
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <velocitymeasurement+0x250>)
 80059d4:	f7fa ff3a 	bl	800084c <__aeabi_ddiv>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4610      	mov	r0, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <velocitymeasurement+0x254>)
 80059e6:	f7fa ff31 	bl	800084c <__aeabi_ddiv>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	4b44      	ldr	r3, [pc, #272]	; (8005b08 <velocitymeasurement+0x258>)
 80059f8:	f7fa ff28 	bl	800084c <__aeabi_ddiv>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	4b40      	ldr	r3, [pc, #256]	; (8005b0c <velocitymeasurement+0x25c>)
 8005a0a:	f7fa ff1f 	bl	800084c <__aeabi_ddiv>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <velocitymeasurement+0x260>)
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <velocitymeasurement+0x264>)
 8005a2e:	f7fa fde3 	bl	80005f8 <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7fb f8bf 	bl	8000bbc <__aeabi_d2f>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a36      	ldr	r2, [pc, #216]	; (8005b1c <velocitymeasurement+0x26c>)
 8005a42:	6013      	str	r3, [r2, #0]
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 8005a44:	4b2d      	ldr	r3, [pc, #180]	; (8005afc <velocitymeasurement+0x24c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fa fd7d 	bl	8000548 <__aeabi_f2d>
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <velocitymeasurement+0x250>)
 8005a54:	f7fa fefa 	bl	800084c <__aeabi_ddiv>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <velocitymeasurement+0x254>)
 8005a66:	f7fa fef1 	bl	800084c <__aeabi_ddiv>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <velocitymeasurement+0x258>)
 8005a78:	f7fa fee8 	bl	800084c <__aeabi_ddiv>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <velocitymeasurement+0x260>)
 8005a8a:	f7fa fedf 	bl	800084c <__aeabi_ddiv>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <velocitymeasurement+0x270>)
 8005a9c:	f7fa fdac 	bl	80005f8 <__aeabi_dmul>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <velocitymeasurement+0x250>)
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
			* 5.08;
 8005aba:	a309      	add	r3, pc, #36	; (adr r3, 8005ae0 <velocitymeasurement+0x230>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fd9a 	bl	80005f8 <__aeabi_dmul>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4619      	mov	r1, r3
 8005acc:	f7fb f876 	bl	8000bbc <__aeabi_d2f>
 8005ad0:	4603      	mov	r3, r0
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 8005ad2:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <velocitymeasurement+0x274>)
 8005ad4:	6013      	str	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	ecbd 8b02 	vpop	{d8}
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	851eb852 	.word	0x851eb852
 8005ae4:	401451eb 	.word	0x401451eb
 8005ae8:	200005c0 	.word	0x200005c0
 8005aec:	20000524 	.word	0x20000524
 8005af0:	42c60000 	.word	0x42c60000
 8005af4:	42c80000 	.word	0x42c80000
 8005af8:	20000528 	.word	0x20000528
 8005afc:	2000052c 	.word	0x2000052c
 8005b00:	40280000 	.word	0x40280000
 8005b04:	40500000 	.word	0x40500000
 8005b08:	40100000 	.word	0x40100000
 8005b0c:	40340000 	.word	0x40340000
 8005b10:	402e0000 	.word	0x402e0000
 8005b14:	40200000 	.word	0x40200000
 8005b18:	2000050c 	.word	0x2000050c
 8005b1c:	20000510 	.word	0x20000510
 8005b20:	40240000 	.word	0x40240000
 8005b24:	20000514 	.word	0x20000514

08005b28 <gotoposition>:
void gotoposition(int unit) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	if (unit == 1) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d15e      	bne.n	8005bf4 <gotoposition+0xcc>
		if (ptg1 - distancemetre1 <= 0.1 && ptg1 - distancemetre1 >= -0.3) {
 8005b36:	4b94      	ldr	r3, [pc, #592]	; (8005d88 <gotoposition+0x260>)
 8005b38:	ed93 7a00 	vldr	s14, [r3]
 8005b3c:	4b93      	ldr	r3, [pc, #588]	; (8005d8c <gotoposition+0x264>)
 8005b3e:	edd3 7a00 	vldr	s15, [r3]
 8005b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b46:	ee17 0a90 	vmov	r0, s15
 8005b4a:	f7fa fcfd 	bl	8000548 <__aeabi_f2d>
 8005b4e:	a38a      	add	r3, pc, #552	; (adr r3, 8005d78 <gotoposition+0x250>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa ffcc 	bl	8000af0 <__aeabi_dcmple>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01d      	beq.n	8005b9a <gotoposition+0x72>
 8005b5e:	4b8a      	ldr	r3, [pc, #552]	; (8005d88 <gotoposition+0x260>)
 8005b60:	ed93 7a00 	vldr	s14, [r3]
 8005b64:	4b89      	ldr	r3, [pc, #548]	; (8005d8c <gotoposition+0x264>)
 8005b66:	edd3 7a00 	vldr	s15, [r3]
 8005b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b6e:	ee17 0a90 	vmov	r0, s15
 8005b72:	f7fa fce9 	bl	8000548 <__aeabi_f2d>
 8005b76:	a382      	add	r3, pc, #520	; (adr r3, 8005d80 <gotoposition+0x258>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa ffc2 	bl	8000b04 <__aeabi_dcmpge>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <gotoposition+0x72>
			activate1 = 0;
 8005b86:	4b82      	ldr	r3, [pc, #520]	; (8005d90 <gotoposition+0x268>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
			in1 = 0;
 8005b8c:	4b81      	ldr	r3, [pc, #516]	; (8005d94 <gotoposition+0x26c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
			in2 = 0;
 8005b92:	4b81      	ldr	r3, [pc, #516]	; (8005d98 <gotoposition+0x270>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e02c      	b.n	8005bf4 <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 >= 0) {
 8005b9a:	4b7b      	ldr	r3, [pc, #492]	; (8005d88 <gotoposition+0x260>)
 8005b9c:	ed93 7a00 	vldr	s14, [r3]
 8005ba0:	4b7a      	ldr	r3, [pc, #488]	; (8005d8c <gotoposition+0x264>)
 8005ba2:	edd3 7a00 	vldr	s15, [r3]
 8005ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	db09      	blt.n	8005bc8 <gotoposition+0xa0>
			in1 = 1;
 8005bb4:	4b77      	ldr	r3, [pc, #476]	; (8005d94 <gotoposition+0x26c>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
			in2 = 0;
 8005bba:	4b77      	ldr	r3, [pc, #476]	; (8005d98 <gotoposition+0x270>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
			require1 = 10;
 8005bc0:	4b76      	ldr	r3, [pc, #472]	; (8005d9c <gotoposition+0x274>)
 8005bc2:	4a77      	ldr	r2, [pc, #476]	; (8005da0 <gotoposition+0x278>)
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e015      	b.n	8005bf4 <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 <= 0) {
 8005bc8:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <gotoposition+0x260>)
 8005bca:	ed93 7a00 	vldr	s14, [r3]
 8005bce:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <gotoposition+0x264>)
 8005bd0:	edd3 7a00 	vldr	s15, [r3]
 8005bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	d808      	bhi.n	8005bf4 <gotoposition+0xcc>
			in1 = 0;
 8005be2:	4b6c      	ldr	r3, [pc, #432]	; (8005d94 <gotoposition+0x26c>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
			in2 = 1;
 8005be8:	4b6b      	ldr	r3, [pc, #428]	; (8005d98 <gotoposition+0x270>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
			require1 = -10;
 8005bee:	4b6b      	ldr	r3, [pc, #428]	; (8005d9c <gotoposition+0x274>)
 8005bf0:	4a6c      	ldr	r2, [pc, #432]	; (8005da4 <gotoposition+0x27c>)
 8005bf2:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 2) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d15e      	bne.n	8005cb8 <gotoposition+0x190>
		if (ptg2 - distancemetre2 <= 0.1 && ptg2 - distancemetre2 >= -0.3) {
 8005bfa:	4b6b      	ldr	r3, [pc, #428]	; (8005da8 <gotoposition+0x280>)
 8005bfc:	ed93 7a00 	vldr	s14, [r3]
 8005c00:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <gotoposition+0x284>)
 8005c02:	edd3 7a00 	vldr	s15, [r3]
 8005c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c0a:	ee17 0a90 	vmov	r0, s15
 8005c0e:	f7fa fc9b 	bl	8000548 <__aeabi_f2d>
 8005c12:	a359      	add	r3, pc, #356	; (adr r3, 8005d78 <gotoposition+0x250>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa ff6a 	bl	8000af0 <__aeabi_dcmple>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01d      	beq.n	8005c5e <gotoposition+0x136>
 8005c22:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <gotoposition+0x280>)
 8005c24:	ed93 7a00 	vldr	s14, [r3]
 8005c28:	4b60      	ldr	r3, [pc, #384]	; (8005dac <gotoposition+0x284>)
 8005c2a:	edd3 7a00 	vldr	s15, [r3]
 8005c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c32:	ee17 0a90 	vmov	r0, s15
 8005c36:	f7fa fc87 	bl	8000548 <__aeabi_f2d>
 8005c3a:	a351      	add	r3, pc, #324	; (adr r3, 8005d80 <gotoposition+0x258>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa ff60 	bl	8000b04 <__aeabi_dcmpge>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <gotoposition+0x136>
			activate2 = 0;
 8005c4a:	4b59      	ldr	r3, [pc, #356]	; (8005db0 <gotoposition+0x288>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
			in3 = 0;
 8005c50:	4b58      	ldr	r3, [pc, #352]	; (8005db4 <gotoposition+0x28c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
			in4 = 0;
 8005c56:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <gotoposition+0x290>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e02c      	b.n	8005cb8 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 >= 0) {
 8005c5e:	4b52      	ldr	r3, [pc, #328]	; (8005da8 <gotoposition+0x280>)
 8005c60:	ed93 7a00 	vldr	s14, [r3]
 8005c64:	4b51      	ldr	r3, [pc, #324]	; (8005dac <gotoposition+0x284>)
 8005c66:	edd3 7a00 	vldr	s15, [r3]
 8005c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	db09      	blt.n	8005c8c <gotoposition+0x164>
			in3 = 1;
 8005c78:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <gotoposition+0x28c>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
			in4 = 0;
 8005c7e:	4b4e      	ldr	r3, [pc, #312]	; (8005db8 <gotoposition+0x290>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
			require2 = 10;
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <gotoposition+0x294>)
 8005c86:	4a46      	ldr	r2, [pc, #280]	; (8005da0 <gotoposition+0x278>)
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e015      	b.n	8005cb8 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 <= 0) {
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <gotoposition+0x280>)
 8005c8e:	ed93 7a00 	vldr	s14, [r3]
 8005c92:	4b46      	ldr	r3, [pc, #280]	; (8005dac <gotoposition+0x284>)
 8005c94:	edd3 7a00 	vldr	s15, [r3]
 8005c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca4:	d808      	bhi.n	8005cb8 <gotoposition+0x190>
			in3 = 0;
 8005ca6:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <gotoposition+0x28c>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
			in4 = 1;
 8005cac:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <gotoposition+0x290>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
			require2 = -10;
 8005cb2:	4b42      	ldr	r3, [pc, #264]	; (8005dbc <gotoposition+0x294>)
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <gotoposition+0x27c>)
 8005cb6:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 3) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d155      	bne.n	8005d6a <gotoposition+0x242>
		if (ptg3 - distancemetre3 <= 1.5 && ptg3 - distancemetre3 >= -1.5) {
 8005cbe:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <gotoposition+0x298>)
 8005cc0:	ed93 7a00 	vldr	s14, [r3]
 8005cc4:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <gotoposition+0x29c>)
 8005cc6:	edd3 7a00 	vldr	s15, [r3]
 8005cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cce:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cda:	d818      	bhi.n	8005d0e <gotoposition+0x1e6>
 8005cdc:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <gotoposition+0x298>)
 8005cde:	ed93 7a00 	vldr	s14, [r3]
 8005ce2:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <gotoposition+0x29c>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cec:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8005cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	db09      	blt.n	8005d0e <gotoposition+0x1e6>
			activate3 = 0;
 8005cfa:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <gotoposition+0x2a0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
			in5 = 0;
 8005d00:	4b32      	ldr	r3, [pc, #200]	; (8005dcc <gotoposition+0x2a4>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			in6 = 0;
 8005d06:	4b32      	ldr	r3, [pc, #200]	; (8005dd0 <gotoposition+0x2a8>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
			in5 = 0;
			in6 = 1;
			require3 = -40;
		}
	}
}
 8005d0c:	e02d      	b.n	8005d6a <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 >= 0) {
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <gotoposition+0x298>)
 8005d10:	ed93 7a00 	vldr	s14, [r3]
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <gotoposition+0x29c>)
 8005d16:	edd3 7a00 	vldr	s15, [r3]
 8005d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	db09      	blt.n	8005d3c <gotoposition+0x214>
			in5 = 1;
 8005d28:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <gotoposition+0x2a4>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
			in6 = 0;
 8005d2e:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <gotoposition+0x2a8>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
			require3 = 40;
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <gotoposition+0x2ac>)
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <gotoposition+0x2b0>)
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	e016      	b.n	8005d6a <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 <= 0) {
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <gotoposition+0x298>)
 8005d3e:	ed93 7a00 	vldr	s14, [r3]
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <gotoposition+0x29c>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d54:	d900      	bls.n	8005d58 <gotoposition+0x230>
}
 8005d56:	e008      	b.n	8005d6a <gotoposition+0x242>
			in5 = 0;
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <gotoposition+0x2a4>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
			in6 = 1;
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <gotoposition+0x2a8>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
			require3 = -40;
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <gotoposition+0x2ac>)
 8005d66:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <gotoposition+0x2b4>)
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	f3af 8000 	nop.w
 8005d78:	9999999a 	.word	0x9999999a
 8005d7c:	3fb99999 	.word	0x3fb99999
 8005d80:	33333333 	.word	0x33333333
 8005d84:	bfd33333 	.word	0xbfd33333
 8005d88:	200005b4 	.word	0x200005b4
 8005d8c:	20000500 	.word	0x20000500
 8005d90:	200005a8 	.word	0x200005a8
 8005d94:	200003a8 	.word	0x200003a8
 8005d98:	200003ac 	.word	0x200003ac
 8005d9c:	200004b4 	.word	0x200004b4
 8005da0:	41200000 	.word	0x41200000
 8005da4:	c1200000 	.word	0xc1200000
 8005da8:	200005b8 	.word	0x200005b8
 8005dac:	20000504 	.word	0x20000504
 8005db0:	200005ac 	.word	0x200005ac
 8005db4:	200003b4 	.word	0x200003b4
 8005db8:	200003b8 	.word	0x200003b8
 8005dbc:	200004cc 	.word	0x200004cc
 8005dc0:	200005bc 	.word	0x200005bc
 8005dc4:	20000508 	.word	0x20000508
 8005dc8:	200005b0 	.word	0x200005b0
 8005dcc:	200003c0 	.word	0x200003c0
 8005dd0:	200003c4 	.word	0x200003c4
 8005dd4:	200004e4 	.word	0x200004e4
 8005dd8:	42200000 	.word	0x42200000
 8005ddc:	c2200000 	.word	0xc2200000

08005de0 <setzero>:
void setzero() {
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
	if (zerostate == 1) {
 8005de4:	4b64      	ldr	r3, [pc, #400]	; (8005f78 <setzero+0x198>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 80bb 	bne.w	8005f64 <setzero+0x184>
		if (oldzerostate == 0 && zerostate == 1) {
 8005dee:	4b63      	ldr	r3, [pc, #396]	; (8005f7c <setzero+0x19c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d115      	bne.n	8005e22 <setzero+0x42>
 8005df6:	4b60      	ldr	r3, [pc, #384]	; (8005f78 <setzero+0x198>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d111      	bne.n	8005e22 <setzero+0x42>
			distance1tozero = distancemetre1;
 8005dfe:	4b60      	ldr	r3, [pc, #384]	; (8005f80 <setzero+0x1a0>)
 8005e00:	edd3 7a00 	vldr	s15, [r3]
 8005e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e08:	ee17 2a90 	vmov	r2, s15
 8005e0c:	4b5d      	ldr	r3, [pc, #372]	; (8005f84 <setzero+0x1a4>)
 8005e0e:	601a      	str	r2, [r3, #0]
			distance3tozero = distancemetre3;
 8005e10:	4b5d      	ldr	r3, [pc, #372]	; (8005f88 <setzero+0x1a8>)
 8005e12:	edd3 7a00 	vldr	s15, [r3]
 8005e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <setzero+0x1ac>)
 8005e20:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre3 - distance3tozero <= -300 || limitswitch3 == 1) {
 8005e22:	4b59      	ldr	r3, [pc, #356]	; (8005f88 <setzero+0x1a8>)
 8005e24:	ed93 7a00 	vldr	s14, [r3]
 8005e28:	4b58      	ldr	r3, [pc, #352]	; (8005f8c <setzero+0x1ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e38:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005f90 <setzero+0x1b0>
 8005e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	d903      	bls.n	8005e4e <setzero+0x6e>
 8005e46:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <setzero+0x1b4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d108      	bne.n	8005e60 <setzero+0x80>
			in1 = 0;
 8005e4e:	4b52      	ldr	r3, [pc, #328]	; (8005f98 <setzero+0x1b8>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
			in2 = 1;
 8005e54:	4b51      	ldr	r3, [pc, #324]	; (8005f9c <setzero+0x1bc>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
			require1 = -10;
 8005e5a:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <setzero+0x1c0>)
 8005e5c:	4a51      	ldr	r2, [pc, #324]	; (8005fa4 <setzero+0x1c4>)
 8005e5e:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre1 - distance1tozero <= -100 || limitswitch1 == 1) {
 8005e60:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <setzero+0x1a0>)
 8005e62:	ed93 7a00 	vldr	s14, [r3]
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <setzero+0x1a4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e76:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005fa8 <setzero+0x1c8>
 8005e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e82:	d903      	bls.n	8005e8c <setzero+0xac>
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <setzero+0x1cc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d108      	bne.n	8005e9e <setzero+0xbe>
			in3 = 0;
 8005e8c:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <setzero+0x1d0>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
			in4 = 1;
 8005e92:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <setzero+0x1d4>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
			require2 = -10;
 8005e98:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <setzero+0x1d8>)
 8005e9a:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <setzero+0x1c4>)
 8005e9c:	601a      	str	r2, [r3, #0]
		}
		in5 = 0;
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <setzero+0x1dc>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
		in6 = 1;
 8005ea4:	4b46      	ldr	r3, [pc, #280]	; (8005fc0 <setzero+0x1e0>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
		if (distancemetre3 <= 100) {
 8005eaa:	4b37      	ldr	r3, [pc, #220]	; (8005f88 <setzero+0x1a8>)
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005fc4 <setzero+0x1e4>
 8005eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	d803      	bhi.n	8005ec6 <setzero+0xe6>
			require3 = -20;
 8005ebe:	4b42      	ldr	r3, [pc, #264]	; (8005fc8 <setzero+0x1e8>)
 8005ec0:	4a42      	ldr	r2, [pc, #264]	; (8005fcc <setzero+0x1ec>)
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e002      	b.n	8005ecc <setzero+0xec>
		} else
			require3 = -40;
 8005ec6:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <setzero+0x1e8>)
 8005ec8:	4a41      	ldr	r2, [pc, #260]	; (8005fd0 <setzero+0x1f0>)
 8005eca:	601a      	str	r2, [r3, #0]

		if (limitswitch1 == 1) {
 8005ecc:	4b37      	ldr	r3, [pc, #220]	; (8005fac <setzero+0x1cc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10d      	bne.n	8005ef0 <setzero+0x110>
			error1 = TIM1->CNT;
 8005ed4:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <setzero+0x1f4>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <setzero+0x1f8>)
 8005edc:	601a      	str	r2, [r3, #0]
			distancestamp1 = 0;
 8005ede:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <setzero+0x1fc>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
			olddistance1 = 0;
 8005ee4:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <setzero+0x200>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
			activate1 = 0;
 8005eea:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <setzero+0x204>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch2 == 1) {
 8005ef0:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <setzero+0x208>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10b      	bne.n	8005f10 <setzero+0x130>
			error2 = TIM2->CNT;
 8005ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b3a      	ldr	r3, [pc, #232]	; (8005fec <setzero+0x20c>)
 8005f02:	601a      	str	r2, [r3, #0]
			distancestamp2 = 0;
 8005f04:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <setzero+0x210>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
			activate2 = 0;
 8005f0a:	4b3a      	ldr	r3, [pc, #232]	; (8005ff4 <setzero+0x214>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch3 == 1) {
 8005f10:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <setzero+0x1b4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10a      	bne.n	8005f2e <setzero+0x14e>
			error3 = TIM3->CNT;
 8005f18:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <setzero+0x218>)
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <setzero+0x21c>)
 8005f20:	601a      	str	r2, [r3, #0]
			distancestamp3 = 0;
 8005f22:	4b37      	ldr	r3, [pc, #220]	; (8006000 <setzero+0x220>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
			activate3 = 0;
 8005f28:	4b36      	ldr	r3, [pc, #216]	; (8006004 <setzero+0x224>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch1 == 1 && limitswitch2 == 1 && limitswitch3 == 1) {
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <setzero+0x1cc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d116      	bne.n	8005f64 <setzero+0x184>
 8005f36:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <setzero+0x208>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d112      	bne.n	8005f64 <setzero+0x184>
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <setzero+0x1b4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10e      	bne.n	8005f64 <setzero+0x184>
			zerostate = 0;
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <setzero+0x198>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
			require1 = 0;
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <setzero+0x1c0>)
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
			require2 = 0;
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <setzero+0x1d8>)
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
			require3 = 0;
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <setzero+0x1e8>)
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
		}
	}
	oldzerostate = zerostate;
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <setzero+0x198>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <setzero+0x19c>)
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	200005a0 	.word	0x200005a0
 8005f7c:	200005a4 	.word	0x200005a4
 8005f80:	20000500 	.word	0x20000500
 8005f84:	20000538 	.word	0x20000538
 8005f88:	20000508 	.word	0x20000508
 8005f8c:	2000053c 	.word	0x2000053c
 8005f90:	c3960000 	.word	0xc3960000
 8005f94:	200004f0 	.word	0x200004f0
 8005f98:	200003a8 	.word	0x200003a8
 8005f9c:	200003ac 	.word	0x200003ac
 8005fa0:	200004b4 	.word	0x200004b4
 8005fa4:	c1200000 	.word	0xc1200000
 8005fa8:	c2c80000 	.word	0xc2c80000
 8005fac:	200004e8 	.word	0x200004e8
 8005fb0:	200003b4 	.word	0x200003b4
 8005fb4:	200003b8 	.word	0x200003b8
 8005fb8:	200004cc 	.word	0x200004cc
 8005fbc:	200003c0 	.word	0x200003c0
 8005fc0:	200003c4 	.word	0x200003c4
 8005fc4:	42c80000 	.word	0x42c80000
 8005fc8:	200004e4 	.word	0x200004e4
 8005fcc:	c1a00000 	.word	0xc1a00000
 8005fd0:	c2200000 	.word	0xc2200000
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	20000540 	.word	0x20000540
 8005fdc:	20000530 	.word	0x20000530
 8005fe0:	20000534 	.word	0x20000534
 8005fe4:	200005a8 	.word	0x200005a8
 8005fe8:	200004ec 	.word	0x200004ec
 8005fec:	20000544 	.word	0x20000544
 8005ff0:	20000044 	.word	0x20000044
 8005ff4:	200005ac 	.word	0x200005ac
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	20000548 	.word	0x20000548
 8006000:	20000048 	.word	0x20000048
 8006004:	200005b0 	.word	0x200005b0

08006008 <pwmdrive>:
void pwmdrive() {
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
	if (emergency == 1) {
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <pwmdrive+0xec>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d12c      	bne.n	800606e <pwmdrive+0x66>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8006014:	2200      	movs	r2, #0
 8006016:	2101      	movs	r1, #1
 8006018:	4837      	ldr	r0, [pc, #220]	; (80060f8 <pwmdrive+0xf0>)
 800601a:	f001 fe4f 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800601e:	2200      	movs	r2, #0
 8006020:	2110      	movs	r1, #16
 8006022:	4835      	ldr	r0, [pc, #212]	; (80060f8 <pwmdrive+0xf0>)
 8006024:	f001 fe4a 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8006028:	4b34      	ldr	r3, [pc, #208]	; (80060fc <pwmdrive+0xf4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2200      	movs	r2, #0
 800602e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8006030:	2200      	movs	r2, #0
 8006032:	2120      	movs	r1, #32
 8006034:	4830      	ldr	r0, [pc, #192]	; (80060f8 <pwmdrive+0xf0>)
 8006036:	f001 fe41 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800603a:	2200      	movs	r2, #0
 800603c:	2108      	movs	r1, #8
 800603e:	482e      	ldr	r0, [pc, #184]	; (80060f8 <pwmdrive+0xf0>)
 8006040:	f001 fe3c 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8006044:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <pwmdrive+0xf4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2200      	movs	r2, #0
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 800604c:	2200      	movs	r2, #0
 800604e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006052:	482b      	ldr	r0, [pc, #172]	; (8006100 <pwmdrive+0xf8>)
 8006054:	f001 fe32 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800605e:	4828      	ldr	r0, [pc, #160]	; (8006100 <pwmdrive+0xf8>)
 8006060:	f001 fe2c 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8006064:	4b25      	ldr	r3, [pc, #148]	; (80060fc <pwmdrive+0xf4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, in5);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, in6);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm3);
	}

}
 800606c:	e040      	b.n	80060f0 <pwmdrive+0xe8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, in1);
 800606e:	4b25      	ldr	r3, [pc, #148]	; (8006104 <pwmdrive+0xfc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	2101      	movs	r1, #1
 8006078:	481f      	ldr	r0, [pc, #124]	; (80060f8 <pwmdrive+0xf0>)
 800607a:	f001 fe1f 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, in2);
 800607e:	4b22      	ldr	r3, [pc, #136]	; (8006108 <pwmdrive+0x100>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	2110      	movs	r1, #16
 8006088:	481b      	ldr	r0, [pc, #108]	; (80060f8 <pwmdrive+0xf0>)
 800608a:	f001 fe17 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm1);
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <pwmdrive+0x104>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <pwmdrive+0xf4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, in3);
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <pwmdrive+0x108>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	2120      	movs	r1, #32
 80060a2:	4815      	ldr	r0, [pc, #84]	; (80060f8 <pwmdrive+0xf0>)
 80060a4:	f001 fe0a 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, in4);
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <pwmdrive+0x10c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	2108      	movs	r1, #8
 80060b2:	4811      	ldr	r0, [pc, #68]	; (80060f8 <pwmdrive+0xf0>)
 80060b4:	f001 fe02 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm2);
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <pwmdrive+0x110>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <pwmdrive+0xf4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, in5);
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <pwmdrive+0x114>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060ce:	480c      	ldr	r0, [pc, #48]	; (8006100 <pwmdrive+0xf8>)
 80060d0:	f001 fdf4 	bl	8007cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, in6);
 80060d4:	4b12      	ldr	r3, [pc, #72]	; (8006120 <pwmdrive+0x118>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060e0:	4807      	ldr	r0, [pc, #28]	; (8006100 <pwmdrive+0xf8>)
 80060e2:	f001 fdeb 	bl	8007cbc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm3);
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <pwmdrive+0x11c>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <pwmdrive+0xf4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060f0:	bf00      	nop
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200005c8 	.word	0x200005c8
 80060f8:	40020400 	.word	0x40020400
 80060fc:	20000260 	.word	0x20000260
 8006100:	40020800 	.word	0x40020800
 8006104:	200003a8 	.word	0x200003a8
 8006108:	200003ac 	.word	0x200003ac
 800610c:	200003b0 	.word	0x200003b0
 8006110:	200003b4 	.word	0x200003b4
 8006114:	200003b8 	.word	0x200003b8
 8006118:	200003bc 	.word	0x200003bc
 800611c:	200003c0 	.word	0x200003c0
 8006120:	200003c4 	.word	0x200003c4
 8006124:	200003c8 	.word	0x200003c8

08006128 <loadcell_flushing>:
void loadcell_flushing() {
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	af00      	add	r7, sp, #0
	if (micros() - hx_711timestamp >= 500000) {
 800612c:	f7fe faca 	bl	80046c4 <micros>
 8006130:	4b22      	ldr	r3, [pc, #136]	; (80061bc <loadcell_flushing+0x94>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	1a84      	subs	r4, r0, r2
 8006138:	eb61 0503 	sbc.w	r5, r1, r3
 800613c:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <loadcell_flushing+0x98>)
 800613e:	429c      	cmp	r4, r3
 8006140:	f175 0300 	sbcs.w	r3, r5, #0
 8006144:	d32e      	bcc.n	80061a4 <loadcell_flushing+0x7c>
		if (loadcellc1 == 10 && loadcellc2 == 10 && loadcellc3 == 10
 8006146:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <loadcell_flushing+0x9c>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b0a      	cmp	r3, #10
 800614c:	d12a      	bne.n	80061a4 <loadcell_flushing+0x7c>
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <loadcell_flushing+0xa0>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b0a      	cmp	r3, #10
 8006154:	d126      	bne.n	80061a4 <loadcell_flushing+0x7c>
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <loadcell_flushing+0xa4>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b0a      	cmp	r3, #10
 800615c:	d122      	bne.n	80061a4 <loadcell_flushing+0x7c>
				&& loadcellc4 == 10) {
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <loadcell_flushing+0xa8>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b0a      	cmp	r3, #10
 8006164:	d11e      	bne.n	80061a4 <loadcell_flushing+0x7c>
			hx_711timestamp = micros();
 8006166:	f7fe faad 	bl	80046c4 <micros>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4913      	ldr	r1, [pc, #76]	; (80061bc <loadcell_flushing+0x94>)
 8006170:	e9c1 2300 	strd	r2, r3, [r1]
			loadcellc1 = 4;
 8006174:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <loadcell_flushing+0x9c>)
 8006176:	2204      	movs	r2, #4
 8006178:	701a      	strb	r2, [r3, #0]
			loadcellc2 = 4;
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <loadcell_flushing+0xa0>)
 800617c:	2204      	movs	r2, #4
 800617e:	701a      	strb	r2, [r3, #0]
			loadcellc3 = 4;
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <loadcell_flushing+0xa4>)
 8006182:	2204      	movs	r2, #4
 8006184:	701a      	strb	r2, [r3, #0]
			loadcellc4 = 4;
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <loadcell_flushing+0xa8>)
 8006188:	2204      	movs	r2, #4
 800618a:	701a      	strb	r2, [r3, #0]
			ave1 = 0;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <loadcell_flushing+0xac>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
			ave2 = 0;
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <loadcell_flushing+0xb0>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
			ave3 = 0;
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <loadcell_flushing+0xb4>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
			ave4 = 0;
 800619e:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <loadcell_flushing+0xb8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
		}
	}
	hx711_weight(&loadcell, 4, 1);
 80061a4:	2201      	movs	r2, #1
 80061a6:	2104      	movs	r1, #4
 80061a8:	480e      	ldr	r0, [pc, #56]	; (80061e4 <loadcell_flushing+0xbc>)
 80061aa:	f7fe fca3 	bl	8004af4 <hx711_weight>
	hx711_weight(&loadcell2, 4, 2);
 80061ae:	2202      	movs	r2, #2
 80061b0:	2104      	movs	r1, #4
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <loadcell_flushing+0xc0>)
 80061b4:	f7fe fc9e 	bl	8004af4 <hx711_weight>
}
 80061b8:	bf00      	nop
 80061ba:	bdb0      	pop	{r4, r5, r7, pc}
 80061bc:	20000420 	.word	0x20000420
 80061c0:	0007a120 	.word	0x0007a120
 80061c4:	20000430 	.word	0x20000430
 80061c8:	20000431 	.word	0x20000431
 80061cc:	20000432 	.word	0x20000432
 80061d0:	20000433 	.word	0x20000433
 80061d4:	20000488 	.word	0x20000488
 80061d8:	2000048c 	.word	0x2000048c
 80061dc:	20000490 	.word	0x20000490
 80061e0:	20000494 	.word	0x20000494
 80061e4:	200003cc 	.word	0x200003cc
 80061e8:	200003f4 	.word	0x200003f4

080061ec <laser>:
void laser() {
 80061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f0:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - lasertime >= 3) {
 80061f2:	f000 fdf3 	bl	8006ddc <HAL_GetTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2200      	movs	r2, #0
 80061fa:	4698      	mov	r8, r3
 80061fc:	4691      	mov	r9, r2
 80061fe:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <laser+0xb4>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	ebb8 0402 	subs.w	r4, r8, r2
 8006208:	eb69 0503 	sbc.w	r5, r9, r3
 800620c:	2c03      	cmp	r4, #3
 800620e:	f175 0300 	sbcs.w	r3, r5, #0
 8006212:	d341      	bcc.n	8006298 <laser+0xac>
		lasertime = HAL_GetTick();
 8006214:	f000 fde2 	bl	8006ddc <HAL_GetTick>
 8006218:	4603      	mov	r3, r0
 800621a:	2200      	movs	r2, #0
 800621c:	469a      	mov	sl, r3
 800621e:	4693      	mov	fp, r2
 8006220:	4b1f      	ldr	r3, [pc, #124]	; (80062a0 <laser+0xb4>)
 8006222:	e9c3 ab00 	strd	sl, fp, [r3]
		switch (fllaser) {
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <laser+0xb8>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d835      	bhi.n	800629a <laser+0xae>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <laser+0x48>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006245 	.word	0x08006245
 8006238:	08006253 	.word	0x08006253
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800627d 	.word	0x0800627d
		case 0:
			tcaselect(0);
 8006244:	2000      	movs	r0, #0
 8006246:	f7fe ff2f 	bl	80050a8 <tcaselect>
			fllaser = 1;
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <laser+0xb8>)
 800624c:	2201      	movs	r2, #1
 800624e:	801a      	strh	r2, [r3, #0]
			break;
 8006250:	e023      	b.n	800629a <laser+0xae>
		case 1:
			range1 = VL6180X_readRange();
 8006252:	f7fb fa5e 	bl	8001712 <VL6180X_readRange>
 8006256:	4603      	mov	r3, r0
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <laser+0xbc>)
 8006262:	edc3 7a00 	vstr	s15, [r3]
			fllaser = 2;
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <laser+0xb8>)
 8006268:	2202      	movs	r2, #2
 800626a:	801a      	strh	r2, [r3, #0]
			break;
 800626c:	e015      	b.n	800629a <laser+0xae>
		case 2:
			tcaselect(1);
 800626e:	2001      	movs	r0, #1
 8006270:	f7fe ff1a 	bl	80050a8 <tcaselect>
			fllaser = 3;
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <laser+0xb8>)
 8006276:	2203      	movs	r2, #3
 8006278:	801a      	strh	r2, [r3, #0]
			break;
 800627a:	e00e      	b.n	800629a <laser+0xae>
		case 3:
			range2 = VL6180X_readRange();
 800627c:	f7fb fa49 	bl	8001712 <VL6180X_readRange>
 8006280:	4603      	mov	r3, r0
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <laser+0xc0>)
 800628c:	edc3 7a00 	vstr	s15, [r3]
			fllaser = 0;
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <laser+0xb8>)
 8006292:	2200      	movs	r2, #0
 8006294:	801a      	strh	r2, [r3, #0]
			break;
 8006296:	e000      	b.n	800629a <laser+0xae>
		}
	}
 8006298:	bf00      	nop
}
 800629a:	bf00      	nop
 800629c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a0:	200003a0 	.word	0x200003a0
 80062a4:	2000041c 	.word	0x2000041c
 80062a8:	20000598 	.word	0x20000598
 80062ac:	2000059c 	.word	0x2000059c

080062b0 <currentcontrol>:
#define amp 400000
void currentcontrol() {
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	af00      	add	r7, sp, #0
	if (micros() - current_timestamp >= 100000) {
 80062b4:	f7fe fa06 	bl	80046c4 <micros>
 80062b8:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <currentcontrol+0xf0>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	1a84      	subs	r4, r0, r2
 80062c0:	eb61 0503 	sbc.w	r5, r1, r3
 80062c4:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <currentcontrol+0xf4>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	f175 0300 	sbcs.w	r3, r5, #0
 80062cc:	d35c      	bcc.n	8006388 <currentcontrol+0xd8>
		current_timestamp = micros();
 80062ce:	f7fe f9f9 	bl	80046c4 <micros>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4932      	ldr	r1, [pc, #200]	; (80063a0 <currentcontrol+0xf0>)
 80062d8:	e9c1 2300 	strd	r2, r3, [r1]
		if (current_uA <= chargingcurrent) {
 80062dc:	4b32      	ldr	r3, [pc, #200]	; (80063a8 <currentcontrol+0xf8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fa f931 	bl	8000548 <__aeabi_f2d>
 80062e6:	4b31      	ldr	r3, [pc, #196]	; (80063ac <currentcontrol+0xfc>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7fa fc0a 	bl	8000b04 <__aeabi_dcmpge>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <currentcontrol+0x50>
			check += 1;
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <currentcontrol+0x100>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <currentcontrol+0x100>)
 80062fe:	6013      	str	r3, [r2, #0]
		}
		if (current_uA >= chargingcurrent) {
 8006300:	4b29      	ldr	r3, [pc, #164]	; (80063a8 <currentcontrol+0xf8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fa f91f 	bl	8000548 <__aeabi_f2d>
 800630a:	4b28      	ldr	r3, [pc, #160]	; (80063ac <currentcontrol+0xfc>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa fbee 	bl	8000af0 <__aeabi_dcmple>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <currentcontrol+0x74>
			check -= 1;
 800631a:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <currentcontrol+0x100>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a23      	ldr	r2, [pc, #140]	; (80063b0 <currentcontrol+0x100>)
 8006322:	6013      	str	r3, [r2, #0]
		}
		if (check >= 99) {
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <currentcontrol+0x100>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b62      	cmp	r3, #98	; 0x62
 800632a:	dd02      	ble.n	8006332 <currentcontrol+0x82>
			check = 99;
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <currentcontrol+0x100>)
 800632e:	2263      	movs	r2, #99	; 0x63
 8006330:	601a      	str	r2, [r3, #0]
		}
		if (check <= 0) {
 8006332:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <currentcontrol+0x100>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dc02      	bgt.n	8006340 <currentcontrol+0x90>
			check = 0;
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <currentcontrol+0x100>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
		}
		setResistance(check);
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <currentcontrol+0x100>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fecd 	bl	80050e4 <setResistance>
		if(voltage_uV >= 25200){
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <currentcontrol+0x104>)
 800634c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006350:	a30f      	add	r3, pc, #60	; (adr r3, 8006390 <currentcontrol+0xe0>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7fa fbd5 	bl	8000b04 <__aeabi_dcmpge>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d100      	bne.n	8006362 <currentcontrol+0xb2>
			chargingcurrent -= 0.1;
		}
	}
}
 8006360:	e012      	b.n	8006388 <currentcontrol+0xd8>
			chargingcurrent -= 0.1;
 8006362:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <currentcontrol+0xf8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa f8ee 	bl	8000548 <__aeabi_f2d>
 800636c:	a30a      	add	r3, pc, #40	; (adr r3, 8006398 <currentcontrol+0xe8>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7f9 ff89 	bl	8000288 <__aeabi_dsub>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	f7fa fc1d 	bl	8000bbc <__aeabi_d2f>
 8006382:	4603      	mov	r3, r0
 8006384:	4a08      	ldr	r2, [pc, #32]	; (80063a8 <currentcontrol+0xf8>)
 8006386:	6013      	str	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	bdb0      	pop	{r4, r5, r7, pc}
 800638c:	f3af 8000 	nop.w
 8006390:	00000000 	.word	0x00000000
 8006394:	40d89c00 	.word	0x40d89c00
 8006398:	9999999a 	.word	0x9999999a
 800639c:	3fb99999 	.word	0x3fb99999
 80063a0:	200006a8 	.word	0x200006a8
 80063a4:	000186a0 	.word	0x000186a0
 80063a8:	20000050 	.word	0x20000050
 80063ac:	20000580 	.word	0x20000580
 80063b0:	20000498 	.word	0x20000498
 80063b4:	20000578 	.word	0x20000578

080063b8 <ADCPollingMethodInit>:
void ADCPollingMethodInit() {
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
	//config all ADC Channel
	ADCChannel[0].Config.Channel = ADC_CHANNEL_14;
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063be:	220e      	movs	r2, #14
 80063c0:	601a      	str	r2, [r3, #0]
	ADCChannel[0].Config.Rank = 1;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	605a      	str	r2, [r3, #4]
	ADCChannel[0].Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80063c8:	4b08      	ldr	r3, [pc, #32]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	609a      	str	r2, [r3, #8]

	ADCChannel[1].Config.Channel = ADC_CHANNEL_15;
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063d0:	220f      	movs	r2, #15
 80063d2:	615a      	str	r2, [r3, #20]
	ADCChannel[1].Config.Rank = 1;
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	619a      	str	r2, [r3, #24]
	ADCChannel[1].Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80063da:	4b04      	ldr	r3, [pc, #16]	; (80063ec <ADCPollingMethodInit+0x34>)
 80063dc:	2200      	movs	r2, #0
 80063de:	61da      	str	r2, [r3, #28]
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	200006e8 	.word	0x200006e8

080063f0 <ADCPollingMethodUpdate>:
void ADCPollingMethodUpdate() {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++) {
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e026      	b.n	800644a <ADCPollingMethodUpdate+0x5a>
		HAL_ADC_ConfigChannel(&hadc1, &ADCChannel[i].Config);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4a15      	ldr	r2, [pc, #84]	; (800645c <ADCPollingMethodUpdate+0x6c>)
 8006408:	4413      	add	r3, r2
 800640a:	4619      	mov	r1, r3
 800640c:	4814      	ldr	r0, [pc, #80]	; (8006460 <ADCPollingMethodUpdate+0x70>)
 800640e:	f000 fed9 	bl	80071c4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8006412:	4813      	ldr	r0, [pc, #76]	; (8006460 <ADCPollingMethodUpdate+0x70>)
 8006414:	f000 fd56 	bl	8006ec4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8006418:	210a      	movs	r1, #10
 800641a:	4811      	ldr	r0, [pc, #68]	; (8006460 <ADCPollingMethodUpdate+0x70>)
 800641c:	f000 fe39 	bl	8007092 <HAL_ADC_PollForConversion>
		ADCChannel[i].data = HAL_ADC_GetValue(&hadc1);
 8006420:	480f      	ldr	r0, [pc, #60]	; (8006460 <ADCPollingMethodUpdate+0x70>)
 8006422:	f000 fec1 	bl	80071a8 <HAL_ADC_GetValue>
 8006426:	4603      	mov	r3, r0
 8006428:	b298      	uxth	r0, r3
 800642a:	490c      	ldr	r1, [pc, #48]	; (800645c <ADCPollingMethodUpdate+0x6c>)
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	3310      	adds	r3, #16
 800643a:	4602      	mov	r2, r0
 800643c:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800643e:	4808      	ldr	r0, [pc, #32]	; (8006460 <ADCPollingMethodUpdate+0x70>)
 8006440:	f000 fdf4 	bl	800702c <HAL_ADC_Stop>
	for (int i = 0; i < 2; i++) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3301      	adds	r3, #1
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b01      	cmp	r3, #1
 800644e:	ddd5      	ble.n	80063fc <ADCPollingMethodUpdate+0xc>
	}
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200006e8 	.word	0x200006e8
 8006460:	200000ec 	.word	0x200000ec

08006464 <buttonfunction>:
void buttonfunction() {
 8006464:	b5b0      	push	{r4, r5, r7, lr}
 8006466:	af00      	add	r7, sp, #0
	ADCPollingMethodUpdate();
 8006468:	f7ff ffc2 	bl	80063f0 <ADCPollingMethodUpdate>
	joybutton[0] = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) + 1) % 2;
 800646c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006470:	484e      	ldr	r0, [pc, #312]	; (80065ac <buttonfunction+0x148>)
 8006472:	f001 fc0b 	bl	8007c8c <HAL_GPIO_ReadPin>
 8006476:	4603      	mov	r3, r0
 8006478:	3301      	adds	r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	bfb8      	it	lt
 8006482:	425b      	neglt	r3, r3
 8006484:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <buttonfunction+0x14c>)
 8006486:	6013      	str	r3, [r2, #0]
	if (ADCChannel[0].data >= 3500) {
 8006488:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <buttonfunction+0x150>)
 800648a:	8a1b      	ldrh	r3, [r3, #16]
 800648c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8006490:	4293      	cmp	r3, r2
 8006492:	d903      	bls.n	800649c <buttonfunction+0x38>
		joyx[0] = 1;
 8006494:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <buttonfunction+0x154>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e00c      	b.n	80064b6 <buttonfunction+0x52>
	} else if (ADCChannel[0].data <= 500) {
 800649c:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <buttonfunction+0x150>)
 800649e:	8a1b      	ldrh	r3, [r3, #16]
 80064a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80064a4:	d804      	bhi.n	80064b0 <buttonfunction+0x4c>
		joyx[0] = -1;
 80064a6:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <buttonfunction+0x154>)
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <buttonfunction+0x52>
	} else {
		joyx[0] = 0;
 80064b0:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <buttonfunction+0x154>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
	}
	if (ADCChannel[1].data >= 3500) {
 80064b6:	4b3f      	ldr	r3, [pc, #252]	; (80065b4 <buttonfunction+0x150>)
 80064b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064ba:	f640 52ab 	movw	r2, #3499	; 0xdab
 80064be:	4293      	cmp	r3, r2
 80064c0:	d903      	bls.n	80064ca <buttonfunction+0x66>
		joyy[0] = 1;
 80064c2:	4b3e      	ldr	r3, [pc, #248]	; (80065bc <buttonfunction+0x158>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e00c      	b.n	80064e4 <buttonfunction+0x80>
	} else if (ADCChannel[1].data <= 500) {
 80064ca:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <buttonfunction+0x150>)
 80064cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80064d2:	d804      	bhi.n	80064de <buttonfunction+0x7a>
		joyy[0] = -1;
 80064d4:	4b39      	ldr	r3, [pc, #228]	; (80065bc <buttonfunction+0x158>)
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <buttonfunction+0x80>
	} else {
		joyy[0] = 0;
 80064de:	4b37      	ldr	r3, [pc, #220]	; (80065bc <buttonfunction+0x158>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
	}
	if (joyx[0] != joyx[1]) {
 80064e4:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <buttonfunction+0x154>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <buttonfunction+0x154>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d004      	beq.n	80064fa <buttonfunction+0x96>
		joyx[2] = joyx[0];
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <buttonfunction+0x154>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <buttonfunction+0x154>)
 80064f6:	6093      	str	r3, [r2, #8]
 80064f8:	e002      	b.n	8006500 <buttonfunction+0x9c>
	} else {
		joyx[2] = 0;
 80064fa:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <buttonfunction+0x154>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	609a      	str	r2, [r3, #8]
	}
	if (joyy[0] != joyy[1]) {
 8006500:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <buttonfunction+0x158>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <buttonfunction+0x158>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d004      	beq.n	8006516 <buttonfunction+0xb2>
		joyy[2] = joyy[0];
 800650c:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <buttonfunction+0x158>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2a      	ldr	r2, [pc, #168]	; (80065bc <buttonfunction+0x158>)
 8006512:	6093      	str	r3, [r2, #8]
 8006514:	e002      	b.n	800651c <buttonfunction+0xb8>
	} else {
		joyy[2] = 0;
 8006516:	4b29      	ldr	r3, [pc, #164]	; (80065bc <buttonfunction+0x158>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
	}
	if (joybutton[0] == 1 && joybutton[1] == 0) {
 800651c:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <buttonfunction+0x14c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d10e      	bne.n	8006542 <buttonfunction+0xde>
 8006524:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <buttonfunction+0x14c>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <buttonfunction+0xde>
		button_timestamp = micros();
 800652c:	f7fe f8ca 	bl	80046c4 <micros>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4922      	ldr	r1, [pc, #136]	; (80065c0 <buttonfunction+0x15c>)
 8006536:	e9c1 2300 	strd	r2, r3, [r1]
		joybutton[2] = 1;
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <buttonfunction+0x14c>)
 800653c:	2201      	movs	r2, #1
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	e00a      	b.n	8006558 <buttonfunction+0xf4>
	} else if (joybutton[0] == 0 && joybutton[1] == 1) {
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <buttonfunction+0x14c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <buttonfunction+0xf4>
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <buttonfunction+0x14c>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d102      	bne.n	8006558 <buttonfunction+0xf4>
		joybutton[2] = 0;
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <buttonfunction+0x14c>)
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
	}
	if (micros() - button_timestamp >= 5000000 && joybutton[2] == 1) {
 8006558:	f7fe f8b4 	bl	80046c4 <micros>
 800655c:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <buttonfunction+0x15c>)
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	1a84      	subs	r4, r0, r2
 8006564:	eb61 0503 	sbc.w	r5, r1, r3
 8006568:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <buttonfunction+0x160>)
 800656a:	429c      	cmp	r4, r3
 800656c:	f175 0300 	sbcs.w	r3, r5, #0
 8006570:	d30a      	bcc.n	8006588 <buttonfunction+0x124>
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <buttonfunction+0x14c>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d106      	bne.n	8006588 <buttonfunction+0x124>
		joybutton[3] = 1;
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <buttonfunction+0x14c>)
 800657c:	2201      	movs	r2, #1
 800657e:	60da      	str	r2, [r3, #12]
		joybutton[2] = 0;
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <buttonfunction+0x14c>)
 8006582:	2200      	movs	r2, #0
 8006584:	609a      	str	r2, [r3, #8]
 8006586:	e002      	b.n	800658e <buttonfunction+0x12a>
	} else {
		joybutton[3] = 0;
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <buttonfunction+0x14c>)
 800658a:	2200      	movs	r2, #0
 800658c:	60da      	str	r2, [r3, #12]
	}
	joyx[1] = joyx[0];
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <buttonfunction+0x154>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <buttonfunction+0x154>)
 8006594:	6053      	str	r3, [r2, #4]
	joyy[1] = joyy[0];
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <buttonfunction+0x158>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a08      	ldr	r2, [pc, #32]	; (80065bc <buttonfunction+0x158>)
 800659c:	6053      	str	r3, [r2, #4]
	joybutton[1] = joybutton[0];
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <buttonfunction+0x14c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a03      	ldr	r2, [pc, #12]	; (80065b0 <buttonfunction+0x14c>)
 80065a4:	6053      	str	r3, [r2, #4]
}
 80065a6:	bf00      	nop
 80065a8:	bdb0      	pop	{r4, r5, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40020400 	.word	0x40020400
 80065b0:	200006c0 	.word	0x200006c0
 80065b4:	200006e8 	.word	0x200006e8
 80065b8:	200006d0 	.word	0x200006d0
 80065bc:	200006dc 	.word	0x200006dc
 80065c0:	200006b8 	.word	0x200006b8
 80065c4:	004c4b40 	.word	0x004c4b40

080065c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065cc:	b672      	cpsid	i
}
 80065ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80065d0:	e7fe      	b.n	80065d0 <Error_Handler+0x8>
	...

080065d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <HAL_MspInit+0x4c>)
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <HAL_MspInit+0x4c>)
 80065e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065e8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <HAL_MspInit+0x4c>)
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f2:	607b      	str	r3, [r7, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_MspInit+0x4c>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	4a08      	ldr	r2, [pc, #32]	; (8006620 <HAL_MspInit+0x4c>)
 8006600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006604:	6413      	str	r3, [r2, #64]	; 0x40
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <HAL_MspInit+0x4c>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006612:	2007      	movs	r0, #7
 8006614:	f001 f8d4 	bl	80077c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40023800 	.word	0x40023800

08006624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	605a      	str	r2, [r3, #4]
 8006636:	609a      	str	r2, [r3, #8]
 8006638:	60da      	str	r2, [r3, #12]
 800663a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <HAL_ADC_MspInit+0x7c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d127      	bne.n	8006696 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 8006650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006654:	6453      	str	r3, [r2, #68]	; 0x44
 8006656:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6313      	str	r3, [r2, #48]	; 0x30
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HAL_ADC_MspInit+0x80>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800667e:	2330      	movs	r3, #48	; 0x30
 8006680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006682:	2303      	movs	r3, #3
 8006684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	4619      	mov	r1, r3
 8006690:	4805      	ldr	r0, [pc, #20]	; (80066a8 <HAL_ADC_MspInit+0x84>)
 8006692:	f001 f977 	bl	8007984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006696:	bf00      	nop
 8006698:	3728      	adds	r7, #40	; 0x28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40012000 	.word	0x40012000
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40020800 	.word	0x40020800

080066ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <HAL_I2C_MspInit+0xc8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d14d      	bne.n	800676a <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	4b29      	ldr	r3, [pc, #164]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a28      	ldr	r2, [pc, #160]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 80066d8:	f043 0302 	orr.w	r3, r3, #2
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066f0:	2312      	movs	r3, #18
 80066f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f8:	2303      	movs	r3, #3
 80066fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80066fc:	2304      	movs	r3, #4
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006700:	f107 0314 	add.w	r3, r7, #20
 8006704:	4619      	mov	r1, r3
 8006706:	481d      	ldr	r0, [pc, #116]	; (800677c <HAL_I2C_MspInit+0xd0>)
 8006708:	f001 f93c 	bl	8007984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800670c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006712:	2312      	movs	r3, #18
 8006714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671a:	2303      	movs	r3, #3
 800671c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800671e:	2309      	movs	r3, #9
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	4619      	mov	r1, r3
 8006728:	4814      	ldr	r0, [pc, #80]	; (800677c <HAL_I2C_MspInit+0xd0>)
 800672a:	f001 f92b 	bl	8007984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 8006738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800673c:	6413      	str	r3, [r2, #64]	; 0x40
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_I2C_MspInit+0xcc>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	2021      	movs	r0, #33	; 0x21
 8006750:	f001 f841 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006754:	2021      	movs	r0, #33	; 0x21
 8006756:	f001 f85a 	bl	800780e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	2022      	movs	r0, #34	; 0x22
 8006760:	f001 f839 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006764:	2022      	movs	r0, #34	; 0x22
 8006766:	f001 f852 	bl	800780e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800676a:	bf00      	nop
 800676c:	3728      	adds	r7, #40	; 0x28
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40005800 	.word	0x40005800
 8006778:	40023800 	.word	0x40023800
 800677c:	40020400 	.word	0x40020400

08006780 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08e      	sub	sp, #56	; 0x38
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	60da      	str	r2, [r3, #12]
 8006796:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a57      	ldr	r2, [pc, #348]	; (80068fc <HAL_TIM_Encoder_MspInit+0x17c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d135      	bne.n	800680e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067a2:	2300      	movs	r3, #0
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	4b56      	ldr	r3, [pc, #344]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	4a55      	ldr	r2, [pc, #340]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	6453      	str	r3, [r2, #68]	; 0x44
 80067b2:	4b53      	ldr	r3, [pc, #332]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	4b4f      	ldr	r3, [pc, #316]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	4a4e      	ldr	r2, [pc, #312]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6313      	str	r3, [r2, #48]	; 0x30
 80067ce:	4b4c      	ldr	r3, [pc, #304]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80067da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e0:	2302      	movs	r3, #2
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e8:	2300      	movs	r3, #0
 80067ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80067ec:	2301      	movs	r3, #1
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f4:	4619      	mov	r1, r3
 80067f6:	4843      	ldr	r0, [pc, #268]	; (8006904 <HAL_TIM_Encoder_MspInit+0x184>)
 80067f8:	f001 f8c4 	bl	8007984 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80067fc:	2200      	movs	r2, #0
 80067fe:	2100      	movs	r1, #0
 8006800:	201b      	movs	r0, #27
 8006802:	f000 ffe8 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006806:	201b      	movs	r0, #27
 8006808:	f001 f801 	bl	800780e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800680c:	e072      	b.n	80068f4 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM2)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d134      	bne.n	8006882 <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	4b38      	ldr	r3, [pc, #224]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	4a37      	ldr	r2, [pc, #220]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6413      	str	r3, [r2, #64]	; 0x40
 8006828:	4b35      	ldr	r3, [pc, #212]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	4b31      	ldr	r3, [pc, #196]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	4a30      	ldr	r2, [pc, #192]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6313      	str	r3, [r2, #48]	; 0x30
 8006844:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006850:	2303      	movs	r3, #3
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800685c:	2300      	movs	r3, #0
 800685e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006860:	2301      	movs	r3, #1
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006868:	4619      	mov	r1, r3
 800686a:	4826      	ldr	r0, [pc, #152]	; (8006904 <HAL_TIM_Encoder_MspInit+0x184>)
 800686c:	f001 f88a 	bl	8007984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	201c      	movs	r0, #28
 8006876:	f000 ffae 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800687a:	201c      	movs	r0, #28
 800687c:	f000 ffc7 	bl	800780e <HAL_NVIC_EnableIRQ>
}
 8006880:	e038      	b.n	80068f4 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM3)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_TIM_Encoder_MspInit+0x188>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d133      	bne.n	80068f4 <HAL_TIM_Encoder_MspInit+0x174>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 8006896:	f043 0302 	orr.w	r3, r3, #2
 800689a:	6413      	str	r3, [r2, #64]	; 0x40
 800689c:	4b18      	ldr	r3, [pc, #96]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6313      	str	r3, [r2, #48]	; 0x30
 80068b8:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_TIM_Encoder_MspInit+0x180>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068c4:	23c0      	movs	r3, #192	; 0xc0
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c8:	2302      	movs	r3, #2
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068d0:	2300      	movs	r3, #0
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068d4:	2302      	movs	r3, #2
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068dc:	4619      	mov	r1, r3
 80068de:	4809      	ldr	r0, [pc, #36]	; (8006904 <HAL_TIM_Encoder_MspInit+0x184>)
 80068e0:	f001 f850 	bl	8007984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80068e4:	2200      	movs	r2, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	201d      	movs	r0, #29
 80068ea:	f000 ff74 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068ee:	201d      	movs	r0, #29
 80068f0:	f000 ff8d 	bl	800780e <HAL_NVIC_EnableIRQ>
}
 80068f4:	bf00      	nop
 80068f6:	3738      	adds	r7, #56	; 0x38
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40010000 	.word	0x40010000
 8006900:	40023800 	.word	0x40023800
 8006904:	40020000 	.word	0x40020000
 8006908:	40000400 	.word	0x40000400

0800690c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_TIM_Base_MspInit+0x80>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d116      	bne.n	800694c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	6413      	str	r3, [r2, #64]	; 0x40
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800693a:	2200      	movs	r2, #0
 800693c:	2100      	movs	r1, #0
 800693e:	201e      	movs	r0, #30
 8006940:	f000 ff49 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006944:	201e      	movs	r0, #30
 8006946:	f000 ff62 	bl	800780e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800694a:	e01a      	b.n	8006982 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <HAL_TIM_Base_MspInit+0x88>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d115      	bne.n	8006982 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 8006960:	f043 0308 	orr.w	r3, r3, #8
 8006964:	6413      	str	r3, [r2, #64]	; 0x40
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_TIM_Base_MspInit+0x84>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006972:	2200      	movs	r2, #0
 8006974:	2100      	movs	r1, #0
 8006976:	2032      	movs	r0, #50	; 0x32
 8006978:	f000 ff2d 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800697c:	2032      	movs	r0, #50	; 0x32
 800697e:	f000 ff46 	bl	800780e <HAL_NVIC_EnableIRQ>
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40000800 	.word	0x40000800
 8006990:	40023800 	.word	0x40023800
 8006994:	40000c00 	.word	0x40000c00

08006998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <HAL_TIM_MspPostInit+0x68>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d11e      	bne.n	80069f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	4b11      	ldr	r3, [pc, #68]	; (8006a04 <HAL_TIM_MspPostInit+0x6c>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <HAL_TIM_MspPostInit+0x6c>)
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <HAL_TIM_MspPostInit+0x6c>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80069d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80069da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069dc:	2302      	movs	r3, #2
 80069de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80069e8:	2302      	movs	r3, #2
 80069ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4619      	mov	r1, r3
 80069f2:	4805      	ldr	r0, [pc, #20]	; (8006a08 <HAL_TIM_MspPostInit+0x70>)
 80069f4:	f000 ffc6 	bl	8007984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80069f8:	bf00      	nop
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40023800 	.word	0x40023800
 8006a08:	40020400 	.word	0x40020400

08006a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a14:	f107 031c 	add.w	r3, r7, #28
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a37      	ldr	r2, [pc, #220]	; (8006b08 <HAL_UART_MspInit+0xfc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d135      	bne.n	8006a9a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	4b36      	ldr	r3, [pc, #216]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	4a35      	ldr	r2, [pc, #212]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a38:	f043 0310 	orr.w	r3, r3, #16
 8006a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a3e:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	4a2e      	ldr	r2, [pc, #184]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	6313      	str	r3, [r2, #48]	; 0x30
 8006a5a:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8006a66:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8006a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a74:	2303      	movs	r3, #3
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a78:	2307      	movs	r3, #7
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	4619      	mov	r1, r3
 8006a82:	4823      	ldr	r0, [pc, #140]	; (8006b10 <HAL_UART_MspInit+0x104>)
 8006a84:	f000 ff7e 	bl	8007984 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	2025      	movs	r0, #37	; 0x25
 8006a8e:	f000 fea2 	bl	80077d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a92:	2025      	movs	r0, #37	; 0x25
 8006a94:	f000 febb 	bl	800780e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006a98:	e031      	b.n	8006afe <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <HAL_UART_MspInit+0x108>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d12c      	bne.n	8006afe <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006aae:	f043 0320 	orr.w	r3, r3, #32
 8006ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	4a10      	ldr	r2, [pc, #64]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <HAL_UART_MspInit+0x100>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006adc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aea:	2303      	movs	r3, #3
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006aee:	2308      	movs	r3, #8
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af2:	f107 031c 	add.w	r3, r7, #28
 8006af6:	4619      	mov	r1, r3
 8006af8:	4805      	ldr	r0, [pc, #20]	; (8006b10 <HAL_UART_MspInit+0x104>)
 8006afa:	f000 ff43 	bl	8007984 <HAL_GPIO_Init>
}
 8006afe:	bf00      	nop
 8006b00:	3730      	adds	r7, #48	; 0x30
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	40020000 	.word	0x40020000
 8006b14:	40011400 	.word	0x40011400

08006b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b1c:	e7fe      	b.n	8006b1c <NMI_Handler+0x4>

08006b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b22:	e7fe      	b.n	8006b22 <HardFault_Handler+0x4>

08006b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b28:	e7fe      	b.n	8006b28 <MemManage_Handler+0x4>

08006b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b2e:	e7fe      	b.n	8006b2e <BusFault_Handler+0x4>

08006b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b34:	e7fe      	b.n	8006b34 <UsageFault_Handler+0x4>

08006b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b52:	b480      	push	{r7}
 8006b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b56:	bf00      	nop
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b64:	f000 f926 	bl	8006db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b68:	bf00      	nop
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006b70:	2040      	movs	r0, #64	; 0x40
 8006b72:	f001 f8bd 	bl	8007cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b80:	4802      	ldr	r0, [pc, #8]	; (8006b8c <TIM1_CC_IRQHandler+0x10>)
 8006b82:	f004 fdf3 	bl	800b76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000188 	.word	0x20000188

08006b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b94:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <TIM2_IRQHandler+0x10>)
 8006b96:	f004 fde9 	bl	800b76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200001d0 	.word	0x200001d0

08006ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ba8:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <TIM3_IRQHandler+0x10>)
 8006baa:	f004 fddf 	bl	800b76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000218 	.word	0x20000218

08006bb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006bbc:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <TIM4_IRQHandler+0x10>)
 8006bbe:	f004 fdd5 	bl	800b76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000260 	.word	0x20000260

08006bcc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006bd0:	4802      	ldr	r0, [pc, #8]	; (8006bdc <I2C2_EV_IRQHandler+0x10>)
 8006bd2:	f001 fe3b 	bl	800884c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000134 	.word	0x20000134

08006be0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006be4:	4802      	ldr	r0, [pc, #8]	; (8006bf0 <I2C2_ER_IRQHandler+0x10>)
 8006be6:	f001 ffa2 	bl	8008b2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000134 	.word	0x20000134

08006bf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006bf8:	4802      	ldr	r0, [pc, #8]	; (8006c04 <USART1_IRQHandler+0x10>)
 8006bfa:	f005 fccf 	bl	800c59c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200002f0 	.word	0x200002f0

08006c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006c0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006c10:	f001 f86e 	bl	8007cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006c1c:	4802      	ldr	r0, [pc, #8]	; (8006c28 <TIM5_IRQHandler+0x10>)
 8006c1e:	f004 fda5 	bl	800b76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200002a8 	.word	0x200002a8

08006c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c34:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <_sbrk+0x5c>)
 8006c36:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <_sbrk+0x60>)
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <_sbrk+0x64>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <_sbrk+0x64>)
 8006c4a:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <_sbrk+0x68>)
 8006c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <_sbrk+0x64>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d207      	bcs.n	8006c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c5c:	f006 fc06 	bl	800d46c <__errno>
 8006c60:	4603      	mov	r3, r0
 8006c62:	220c      	movs	r2, #12
 8006c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	e009      	b.n	8006c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <_sbrk+0x64>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <_sbrk+0x64>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <_sbrk+0x64>)
 8006c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20020000 	.word	0x20020000
 8006c8c:	00000400 	.word	0x00000400
 8006c90:	20000744 	.word	0x20000744
 8006c94:	20000760 	.word	0x20000760

08006c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)


	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <SystemInit+0x20>)
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <SystemInit+0x20>)
 8006ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8006cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006cc0:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006cc2:	490e      	ldr	r1, [pc, #56]	; (8006cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006cc4:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cc8:	e002      	b.n	8006cd0 <LoopCopyDataInit>

08006cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cce:	3304      	adds	r3, #4

08006cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cd4:	d3f9      	bcc.n	8006cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cd6:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006cd8:	4c0b      	ldr	r4, [pc, #44]	; (8006d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cdc:	e001      	b.n	8006ce2 <LoopFillZerobss>

08006cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ce0:	3204      	adds	r2, #4

08006ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ce4:	d3fb      	bcc.n	8006cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ce6:	f7ff ffd7 	bl	8006c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cea:	f006 fbc5 	bl	800d478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cee:	f7fa ffdb 	bl	8001ca8 <main>
  bx  lr    
 8006cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006cfc:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8006d00:	0800e0ac 	.word	0x0800e0ac
  ldr r2, =_sbss
 8006d04:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8006d08:	2000075c 	.word	0x2000075c

08006d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d0c:	e7fe      	b.n	8006d0c <ADC_IRQHandler>
	...

08006d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <HAL_Init+0x40>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <HAL_Init+0x40>)
 8006d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_Init+0x40>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <HAL_Init+0x40>)
 8006d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d2c:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <HAL_Init+0x40>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <HAL_Init+0x40>)
 8006d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d38:	2003      	movs	r0, #3
 8006d3a:	f000 fd41 	bl	80077c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d3e:	2000      	movs	r0, #0
 8006d40:	f000 f808 	bl	8006d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d44:	f7ff fc46 	bl	80065d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023c00 	.word	0x40023c00

08006d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d5c:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <HAL_InitTick+0x54>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	4b12      	ldr	r3, [pc, #72]	; (8006dac <HAL_InitTick+0x58>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fd59 	bl	800782a <HAL_SYSTICK_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e00e      	b.n	8006da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b0f      	cmp	r3, #15
 8006d86:	d80a      	bhi.n	8006d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d88:	2200      	movs	r2, #0
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	f000 fd21 	bl	80077d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d94:	4a06      	ldr	r2, [pc, #24]	; (8006db0 <HAL_InitTick+0x5c>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000054 	.word	0x20000054
 8006dac:	2000005c 	.word	0x2000005c
 8006db0:	20000058 	.word	0x20000058

08006db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <HAL_IncTick+0x20>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <HAL_IncTick+0x24>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <HAL_IncTick+0x24>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	2000005c 	.word	0x2000005c
 8006dd8:	20000748 	.word	0x20000748

08006ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return uwTick;
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <HAL_GetTick+0x14>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000748 	.word	0x20000748

08006df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006dfc:	f7ff ffee 	bl	8006ddc <HAL_GetTick>
 8006e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d005      	beq.n	8006e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <HAL_Delay+0x44>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e1a:	bf00      	nop
 8006e1c:	f7ff ffde 	bl	8006ddc <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d8f7      	bhi.n	8006e1c <HAL_Delay+0x28>
  {
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	2000005c 	.word	0x2000005c

08006e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e033      	b.n	8006eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fbe2 	bl	8006624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d118      	bne.n	8006eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e82:	f023 0302 	bic.w	r3, r3, #2
 8006e86:	f043 0202 	orr.w	r2, r3, #2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 faca 	bl	8007428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	f043 0201 	orr.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8006eaa:	e001      	b.n	8006eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_ADC_Start+0x1a>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e097      	b.n	800700e <HAL_ADC_Start+0x14a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d018      	beq.n	8006f26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <HAL_ADC_Start+0x158>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a45      	ldr	r2, [pc, #276]	; (8007020 <HAL_ADC_Start+0x15c>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	0c9a      	lsrs	r2, r3, #18
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f18:	e002      	b.n	8006f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f9      	bne.n	8006f1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d15f      	bne.n	8006ff4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f72:	d106      	bne.n	8006f82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f023 0206 	bic.w	r2, r3, #6
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8006f80:	e002      	b.n	8006f88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f90:	4b24      	ldr	r3, [pc, #144]	; (8007024 <HAL_ADC_Start+0x160>)
 8006f92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10f      	bne.n	8006fca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d129      	bne.n	800700c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	e020      	b.n	800700c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a16      	ldr	r2, [pc, #88]	; (8007028 <HAL_ADC_Start+0x164>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d11b      	bne.n	800700c <HAL_ADC_Start+0x148>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d114      	bne.n	800700c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ff0:	609a      	str	r2, [r3, #8]
 8006ff2:	e00b      	b.n	800700c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0210 	orr.w	r2, r3, #16
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000054 	.word	0x20000054
 8007020:	431bde83 	.word	0x431bde83
 8007024:	40012300 	.word	0x40012300
 8007028:	40012000 	.word	0x40012000

0800702c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_ADC_Stop+0x16>
 800703e:	2302      	movs	r3, #2
 8007040:	e021      	b.n	8007086 <HAL_ADC_Stop+0x5a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f043 0201 	orr.w	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ae:	d113      	bne.n	80070d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d10b      	bne.n	80070d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e063      	b.n	80071a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80070d8:	f7ff fe80 	bl	8006ddc <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070de:	e021      	b.n	8007124 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	d01d      	beq.n	8007124 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <HAL_ADC_PollForConversion+0x6c>
 80070ee:	f7ff fe75 	bl	8006ddc <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d212      	bcs.n	8007124 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d00b      	beq.n	8007124 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f043 0204 	orr.w	r2, r3, #4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e03d      	b.n	80071a0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d1d6      	bne.n	80070e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0212 	mvn.w	r2, #18
 800713a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d123      	bne.n	800719e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11f      	bne.n	800719e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007176:	2b00      	cmp	r3, #0
 8007178:	d111      	bne.n	800719e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f043 0201 	orr.w	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e113      	b.n	8007408 <HAL_ADC_ConfigChannel+0x244>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d925      	bls.n	800723c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68d9      	ldr	r1, [r3, #12]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	3b1e      	subs	r3, #30
 8007206:	2207      	movs	r2, #7
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	43da      	mvns	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	400a      	ands	r2, r1
 8007214:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68d9      	ldr	r1, [r3, #12]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	4618      	mov	r0, r3
 8007228:	4603      	mov	r3, r0
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4403      	add	r3, r0
 800722e:	3b1e      	subs	r3, #30
 8007230:	409a      	lsls	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	e022      	b.n	8007282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6919      	ldr	r1, [r3, #16]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	2207      	movs	r2, #7
 8007252:	fa02 f303 	lsl.w	r3, r2, r3
 8007256:	43da      	mvns	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	400a      	ands	r2, r1
 800725e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6919      	ldr	r1, [r3, #16]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	4618      	mov	r0, r3
 8007272:	4603      	mov	r3, r0
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4403      	add	r3, r0
 8007278:	409a      	lsls	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b06      	cmp	r3, #6
 8007288:	d824      	bhi.n	80072d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	3b05      	subs	r3, #5
 800729c:	221f      	movs	r2, #31
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43da      	mvns	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	400a      	ands	r2, r1
 80072aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4618      	mov	r0, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	3b05      	subs	r3, #5
 80072c6:	fa00 f203 	lsl.w	r2, r0, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	635a      	str	r2, [r3, #52]	; 0x34
 80072d2:	e04c      	b.n	800736e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	d824      	bhi.n	8007326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	3b23      	subs	r3, #35	; 0x23
 80072ee:	221f      	movs	r2, #31
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	43da      	mvns	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	400a      	ands	r2, r1
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	4618      	mov	r0, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	3b23      	subs	r3, #35	; 0x23
 8007318:	fa00 f203 	lsl.w	r2, r0, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
 8007324:	e023      	b.n	800736e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	3b41      	subs	r3, #65	; 0x41
 8007338:	221f      	movs	r2, #31
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43da      	mvns	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	400a      	ands	r2, r1
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	4618      	mov	r0, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	3b41      	subs	r3, #65	; 0x41
 8007362:	fa00 f203 	lsl.w	r2, r0, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800736e:	4b29      	ldr	r3, [pc, #164]	; (8007414 <HAL_ADC_ConfigChannel+0x250>)
 8007370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a28      	ldr	r2, [pc, #160]	; (8007418 <HAL_ADC_ConfigChannel+0x254>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d10f      	bne.n	800739c <HAL_ADC_ConfigChannel+0x1d8>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b12      	cmp	r3, #18
 8007382:	d10b      	bne.n	800739c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <HAL_ADC_ConfigChannel+0x254>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d12b      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x23a>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1c      	ldr	r2, [pc, #112]	; (800741c <HAL_ADC_ConfigChannel+0x258>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <HAL_ADC_ConfigChannel+0x1f4>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b11      	cmp	r3, #17
 80073b6:	d122      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a11      	ldr	r2, [pc, #68]	; (800741c <HAL_ADC_ConfigChannel+0x258>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d111      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <HAL_ADC_ConfigChannel+0x25c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a11      	ldr	r2, [pc, #68]	; (8007424 <HAL_ADC_ConfigChannel+0x260>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	0c9a      	lsrs	r2, r3, #18
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073f0:	e002      	b.n	80073f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f9      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012300 	.word	0x40012300
 8007418:	40012000 	.word	0x40012000
 800741c:	10000012 	.word	0x10000012
 8007420:	20000054 	.word	0x20000054
 8007424:	431bde83 	.word	0x431bde83

08007428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007430:	4b79      	ldr	r3, [pc, #484]	; (8007618 <ADC_Init+0x1f0>)
 8007432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800745c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6859      	ldr	r1, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	021a      	lsls	r2, r3, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6859      	ldr	r1, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6899      	ldr	r1, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	4a58      	ldr	r2, [pc, #352]	; (800761c <ADC_Init+0x1f4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6899      	ldr	r1, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6899      	ldr	r1, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]
 8007504:	e00f      	b.n	8007526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0202 	bic.w	r2, r2, #2
 8007534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6899      	ldr	r1, [r3, #8]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7e1b      	ldrb	r3, [r3, #24]
 8007540:	005a      	lsls	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01b      	beq.n	800758c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	3b01      	subs	r3, #1
 8007580:	035a      	lsls	r2, r3, #13
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	e007      	b.n	800759c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800759a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	051a      	lsls	r2, r3, #20
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6899      	ldr	r1, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075de:	025a      	lsls	r2, r3, #9
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6899      	ldr	r1, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	029a      	lsls	r2, r3, #10
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	40012300 	.word	0x40012300
 800761c:	0f000001 	.word	0x0f000001

08007620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007630:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <__NVIC_SetPriorityGrouping+0x44>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800763c:	4013      	ands	r3, r2
 800763e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800764c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007652:	4a04      	ldr	r2, [pc, #16]	; (8007664 <__NVIC_SetPriorityGrouping+0x44>)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	60d3      	str	r3, [r2, #12]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	e000ed00 	.word	0xe000ed00

08007668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800766c:	4b04      	ldr	r3, [pc, #16]	; (8007680 <__NVIC_GetPriorityGrouping+0x18>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	f003 0307 	and.w	r3, r3, #7
}
 8007676:	4618      	mov	r0, r3
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	e000ed00 	.word	0xe000ed00

08007684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	db0b      	blt.n	80076ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	f003 021f 	and.w	r2, r3, #31
 800769c:	4907      	ldr	r1, [pc, #28]	; (80076bc <__NVIC_EnableIRQ+0x38>)
 800769e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	2001      	movs	r0, #1
 80076a6:	fa00 f202 	lsl.w	r2, r0, r2
 80076aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	e000e100 	.word	0xe000e100

080076c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db0a      	blt.n	80076ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	490c      	ldr	r1, [pc, #48]	; (800770c <__NVIC_SetPriority+0x4c>)
 80076da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076de:	0112      	lsls	r2, r2, #4
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	440b      	add	r3, r1
 80076e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076e8:	e00a      	b.n	8007700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	4908      	ldr	r1, [pc, #32]	; (8007710 <__NVIC_SetPriority+0x50>)
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	3b04      	subs	r3, #4
 80076f8:	0112      	lsls	r2, r2, #4
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	440b      	add	r3, r1
 80076fe:	761a      	strb	r2, [r3, #24]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	e000e100 	.word	0xe000e100
 8007710:	e000ed00 	.word	0xe000ed00

08007714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007714:	b480      	push	{r7}
 8007716:	b089      	sub	sp, #36	; 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f1c3 0307 	rsb	r3, r3, #7
 800772e:	2b04      	cmp	r3, #4
 8007730:	bf28      	it	cs
 8007732:	2304      	movcs	r3, #4
 8007734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3304      	adds	r3, #4
 800773a:	2b06      	cmp	r3, #6
 800773c:	d902      	bls.n	8007744 <NVIC_EncodePriority+0x30>
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	3b03      	subs	r3, #3
 8007742:	e000      	b.n	8007746 <NVIC_EncodePriority+0x32>
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007748:	f04f 32ff 	mov.w	r2, #4294967295
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43da      	mvns	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	401a      	ands	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800775c:	f04f 31ff 	mov.w	r1, #4294967295
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	fa01 f303 	lsl.w	r3, r1, r3
 8007766:	43d9      	mvns	r1, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800776c:	4313      	orrs	r3, r2
         );
}
 800776e:	4618      	mov	r0, r3
 8007770:	3724      	adds	r7, #36	; 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3b01      	subs	r3, #1
 8007788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800778c:	d301      	bcc.n	8007792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800778e:	2301      	movs	r3, #1
 8007790:	e00f      	b.n	80077b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007792:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <SysTick_Config+0x40>)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3b01      	subs	r3, #1
 8007798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800779a:	210f      	movs	r1, #15
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	f7ff ff8e 	bl	80076c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077a4:	4b05      	ldr	r3, [pc, #20]	; (80077bc <SysTick_Config+0x40>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077aa:	4b04      	ldr	r3, [pc, #16]	; (80077bc <SysTick_Config+0x40>)
 80077ac:	2207      	movs	r2, #7
 80077ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	e000e010 	.word	0xe000e010

080077c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff29 	bl	8007620 <__NVIC_SetPriorityGrouping>
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	4603      	mov	r3, r0
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077e8:	f7ff ff3e 	bl	8007668 <__NVIC_GetPriorityGrouping>
 80077ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7ff ff8e 	bl	8007714 <NVIC_EncodePriority>
 80077f8:	4602      	mov	r2, r0
 80077fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fe:	4611      	mov	r1, r2
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff ff5d 	bl	80076c0 <__NVIC_SetPriority>
}
 8007806:	bf00      	nop
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	4603      	mov	r3, r0
 8007816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff ff31 	bl	8007684 <__NVIC_EnableIRQ>
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff ffa2 	bl	800777c <SysTick_Config>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007850:	f7ff fac4 	bl	8006ddc <HAL_GetTick>
 8007854:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d008      	beq.n	8007874 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2280      	movs	r2, #128	; 0x80
 8007866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e052      	b.n	800791a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0216 	bic.w	r2, r2, #22
 8007882:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007892:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <HAL_DMA_Abort+0x62>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0208 	bic.w	r2, r2, #8
 80078b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078c4:	e013      	b.n	80078ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078c6:	f7ff fa89 	bl	8006ddc <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b05      	cmp	r3, #5
 80078d2:	d90c      	bls.n	80078ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2203      	movs	r2, #3
 80078de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e015      	b.n	800791a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	223f      	movs	r2, #63	; 0x3f
 8007902:	409a      	lsls	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d004      	beq.n	8007940 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2280      	movs	r2, #128	; 0x80
 800793a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e00c      	b.n	800795a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2205      	movs	r2, #5
 8007944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007974:	b2db      	uxtb	r3, r3
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	e159      	b.n	8007c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079a0:	2201      	movs	r2, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4013      	ands	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	f040 8148 	bne.w	8007c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d005      	beq.n	80079d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d130      	bne.n	8007a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	2203      	movs	r2, #3
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43db      	mvns	r3, r3
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4013      	ands	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	f003 0201 	and.w	r2, r3, #1
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d017      	beq.n	8007a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	2203      	movs	r2, #3
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d123      	bne.n	8007ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	08da      	lsrs	r2, r3, #3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3208      	adds	r2, #8
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	220f      	movs	r2, #15
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	08da      	lsrs	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3208      	adds	r2, #8
 8007ac2:	69b9      	ldr	r1, [r7, #24]
 8007ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f003 0203 	and.w	r2, r3, #3
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80a2 	beq.w	8007c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	4b57      	ldr	r3, [pc, #348]	; (8007c6c <HAL_GPIO_Init+0x2e8>)
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	4a56      	ldr	r2, [pc, #344]	; (8007c6c <HAL_GPIO_Init+0x2e8>)
 8007b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b18:	6453      	str	r3, [r2, #68]	; 0x44
 8007b1a:	4b54      	ldr	r3, [pc, #336]	; (8007c6c <HAL_GPIO_Init+0x2e8>)
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b26:	4a52      	ldr	r2, [pc, #328]	; (8007c70 <HAL_GPIO_Init+0x2ec>)
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	089b      	lsrs	r3, r3, #2
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	220f      	movs	r2, #15
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	43db      	mvns	r3, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	4013      	ands	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a49      	ldr	r2, [pc, #292]	; (8007c74 <HAL_GPIO_Init+0x2f0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d019      	beq.n	8007b86 <HAL_GPIO_Init+0x202>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a48      	ldr	r2, [pc, #288]	; (8007c78 <HAL_GPIO_Init+0x2f4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <HAL_GPIO_Init+0x1fe>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a47      	ldr	r2, [pc, #284]	; (8007c7c <HAL_GPIO_Init+0x2f8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00d      	beq.n	8007b7e <HAL_GPIO_Init+0x1fa>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a46      	ldr	r2, [pc, #280]	; (8007c80 <HAL_GPIO_Init+0x2fc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <HAL_GPIO_Init+0x1f6>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a45      	ldr	r2, [pc, #276]	; (8007c84 <HAL_GPIO_Init+0x300>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d101      	bne.n	8007b76 <HAL_GPIO_Init+0x1f2>
 8007b72:	2304      	movs	r3, #4
 8007b74:	e008      	b.n	8007b88 <HAL_GPIO_Init+0x204>
 8007b76:	2307      	movs	r3, #7
 8007b78:	e006      	b.n	8007b88 <HAL_GPIO_Init+0x204>
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e004      	b.n	8007b88 <HAL_GPIO_Init+0x204>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e002      	b.n	8007b88 <HAL_GPIO_Init+0x204>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <HAL_GPIO_Init+0x204>
 8007b86:	2300      	movs	r3, #0
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	f002 0203 	and.w	r2, r2, #3
 8007b8e:	0092      	lsls	r2, r2, #2
 8007b90:	4093      	lsls	r3, r2
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b98:	4935      	ldr	r1, [pc, #212]	; (8007c70 <HAL_GPIO_Init+0x2ec>)
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	089b      	lsrs	r3, r3, #2
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ba6:	4b38      	ldr	r3, [pc, #224]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bca:	4a2f      	ldr	r2, [pc, #188]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bd0:	4b2d      	ldr	r3, [pc, #180]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bf4:	4a24      	ldr	r2, [pc, #144]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007bfa:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c1e:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c24:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c48:	4a0f      	ldr	r2, [pc, #60]	; (8007c88 <HAL_GPIO_Init+0x304>)
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	3301      	adds	r3, #1
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	f67f aea2 	bls.w	80079a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	3724      	adds	r7, #36	; 0x24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40013800 	.word	0x40013800
 8007c74:	40020000 	.word	0x40020000
 8007c78:	40020400 	.word	0x40020400
 8007c7c:	40020800 	.word	0x40020800
 8007c80:	40020c00 	.word	0x40020c00
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40013c00 	.word	0x40013c00

08007c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	887b      	ldrh	r3, [r7, #2]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e001      	b.n	8007cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	807b      	strh	r3, [r7, #2]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ccc:	787b      	ldrb	r3, [r7, #1]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cd2:	887a      	ldrh	r2, [r7, #2]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007cd8:	e003      	b.n	8007ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007cda:	887b      	ldrh	r3, [r7, #2]
 8007cdc:	041a      	lsls	r2, r3, #16
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	619a      	str	r2, [r3, #24]
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cfa:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d006      	beq.n	8007d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d06:	4a05      	ldr	r2, [pc, #20]	; (8007d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fc f81a 	bl	8003d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40013c00 	.word	0x40013c00

08007d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e12b      	b.n	8007f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fe fcb0 	bl	80066ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2224      	movs	r2, #36	; 0x24
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d84:	f003 f9da 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 8007d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	4a81      	ldr	r2, [pc, #516]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d807      	bhi.n	8007da4 <HAL_I2C_Init+0x84>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a80      	ldr	r2, [pc, #512]	; (8007f98 <HAL_I2C_Init+0x278>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	bf94      	ite	ls
 8007d9c:	2301      	movls	r3, #1
 8007d9e:	2300      	movhi	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	e006      	b.n	8007db2 <HAL_I2C_Init+0x92>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a7d      	ldr	r2, [pc, #500]	; (8007f9c <HAL_I2C_Init+0x27c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bf94      	ite	ls
 8007dac:	2301      	movls	r3, #1
 8007dae:	2300      	movhi	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0e7      	b.n	8007f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a78      	ldr	r2, [pc, #480]	; (8007fa0 <HAL_I2C_Init+0x280>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	0c9b      	lsrs	r3, r3, #18
 8007dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a6a      	ldr	r2, [pc, #424]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d802      	bhi.n	8007df4 <HAL_I2C_Init+0xd4>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3301      	adds	r3, #1
 8007df2:	e009      	b.n	8007e08 <HAL_I2C_Init+0xe8>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	4a69      	ldr	r2, [pc, #420]	; (8007fa4 <HAL_I2C_Init+0x284>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	3301      	adds	r3, #1
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	495c      	ldr	r1, [pc, #368]	; (8007f94 <HAL_I2C_Init+0x274>)
 8007e24:	428b      	cmp	r3, r1
 8007e26:	d819      	bhi.n	8007e5c <HAL_I2C_Init+0x13c>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1e59      	subs	r1, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_I2C_Init+0x138>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1e59      	subs	r1, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e50:	3301      	adds	r3, #1
 8007e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e56:	e051      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	e04f      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d111      	bne.n	8007e88 <HAL_I2C_Init+0x168>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1e58      	subs	r0, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6859      	ldr	r1, [r3, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	440b      	add	r3, r1
 8007e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e76:	3301      	adds	r3, #1
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e012      	b.n	8007eae <HAL_I2C_Init+0x18e>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	1e58      	subs	r0, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6859      	ldr	r1, [r3, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	0099      	lsls	r1, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <HAL_I2C_Init+0x196>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e022      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10e      	bne.n	8007edc <HAL_I2C_Init+0x1bc>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1e58      	subs	r0, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6859      	ldr	r1, [r3, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	440b      	add	r3, r1
 8007ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eda:	e00f      	b.n	8007efc <HAL_I2C_Init+0x1dc>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1e58      	subs	r0, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	0099      	lsls	r1, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	6809      	ldr	r1, [r1, #0]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69da      	ldr	r2, [r3, #28]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6911      	ldr	r1, [r2, #16]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68d2      	ldr	r2, [r2, #12]
 8007f36:	4311      	orrs	r1, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	000186a0 	.word	0x000186a0
 8007f98:	001e847f 	.word	0x001e847f
 8007f9c:	003d08ff 	.word	0x003d08ff
 8007fa0:	431bde83 	.word	0x431bde83
 8007fa4:	10624dd3 	.word	0x10624dd3

08007fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	817b      	strh	r3, [r7, #10]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fbc:	f7fe ff0e 	bl	8006ddc <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	f040 80e0 	bne.w	8008190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	2319      	movs	r3, #25
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4970      	ldr	r1, [pc, #448]	; (800819c <HAL_I2C_Master_Transmit+0x1f4>)
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f002 fa14 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0d3      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_I2C_Master_Transmit+0x50>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e0cc      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b01      	cmp	r3, #1
 800800c:	d007      	beq.n	800801e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800802c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2221      	movs	r2, #33	; 0x21
 8008032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2210      	movs	r2, #16
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	893a      	ldrh	r2, [r7, #8]
 800804e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a50      	ldr	r2, [pc, #320]	; (80081a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800805e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008060:	8979      	ldrh	r1, [r7, #10]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f001 ffd6 	bl	800a018 <I2C_MasterRequestWrite>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e08d      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800808c:	e066      	b.n	800815c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	6a39      	ldr	r1, [r7, #32]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f002 fa8e 	bl	800a5b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d107      	bne.n	80080b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e06b      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	781a      	ldrb	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d11b      	bne.n	8008130 <HAL_I2C_Master_Transmit+0x188>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	781a      	ldrb	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	6a39      	ldr	r1, [r7, #32]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f002 fa7e 	bl	800a636 <I2C_WaitOnBTFFlagUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b04      	cmp	r3, #4
 8008146:	d107      	bne.n	8008158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e01a      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008160:	2b00      	cmp	r3, #0
 8008162:	d194      	bne.n	800808e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	00100002 	.word	0x00100002
 80081a0:	ffff0000 	.word	0xffff0000

080081a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	; 0x30
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	461a      	mov	r2, r3
 80081b0:	460b      	mov	r3, r1
 80081b2:	817b      	strh	r3, [r7, #10]
 80081b4:	4613      	mov	r3, r2
 80081b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081b8:	f7fe fe10 	bl	8006ddc <HAL_GetTick>
 80081bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	f040 820b 	bne.w	80085e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2319      	movs	r3, #25
 80081d2:	2201      	movs	r2, #1
 80081d4:	497c      	ldr	r1, [pc, #496]	; (80083c8 <HAL_I2C_Master_Receive+0x224>)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f002 f916 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
 80081e4:	e1fe      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_I2C_Master_Receive+0x50>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e1f7      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b01      	cmp	r3, #1
 8008208:	d007      	beq.n	800821a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0201 	orr.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2222      	movs	r2, #34	; 0x22
 800822e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2210      	movs	r2, #16
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	893a      	ldrh	r2, [r7, #8]
 800824a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4a5c      	ldr	r2, [pc, #368]	; (80083cc <HAL_I2C_Master_Receive+0x228>)
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800825c:	8979      	ldrh	r1, [r7, #10]
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 ff5a 	bl	800a11c <I2C_MasterRequestRead>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e1b8      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d113      	bne.n	80082a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827a:	2300      	movs	r3, #0
 800827c:	623b      	str	r3, [r7, #32]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	623b      	str	r3, [r7, #32]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e18c      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d11b      	bne.n	80082e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e16c      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d11b      	bne.n	8008322 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	e14c      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008348:	e138      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834e:	2b03      	cmp	r3, #3
 8008350:	f200 80f1 	bhi.w	8008536 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008358:	2b01      	cmp	r3, #1
 800835a:	d123      	bne.n	80083a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800835c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f002 f9db 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e139      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083a2:	e10b      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d14e      	bne.n	800844a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	4906      	ldr	r1, [pc, #24]	; (80083d0 <HAL_I2C_Master_Receive+0x22c>)
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f002 f826 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e10e      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
 80083c6:	bf00      	nop
 80083c8:	00100002 	.word	0x00100002
 80083cc:	ffff0000 	.word	0xffff0000
 80083d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008448:	e0b8      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2200      	movs	r2, #0
 8008452:	4966      	ldr	r1, [pc, #408]	; (80085ec <HAL_I2C_Master_Receive+0x448>)
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f001 ffd7 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e0bf      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	2200      	movs	r2, #0
 80084ae:	494f      	ldr	r1, [pc, #316]	; (80085ec <HAL_I2C_Master_Receive+0x448>)
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f001 ffa9 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e091      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008534:	e042      	b.n	80085bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f002 f8ee 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e04c      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	b2d2      	uxtb	r2, r2
 8008556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b04      	cmp	r3, #4
 8008588:	d118      	bne.n	80085bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f47f aec2 	bne.w	800834a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
  }
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3728      	adds	r7, #40	; 0x28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	00010004 	.word	0x00010004

080085f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	460b      	mov	r3, r1
 80085fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008600:	f7fe fbec 	bl	8006ddc <HAL_GetTick>
 8008604:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b20      	cmp	r3, #32
 8008614:	f040 8111 	bne.w	800883a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2319      	movs	r3, #25
 800861e:	2201      	movs	r2, #1
 8008620:	4988      	ldr	r1, [pc, #544]	; (8008844 <HAL_I2C_IsDeviceReady+0x254>)
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f001 fef0 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800862e:	2302      	movs	r3, #2
 8008630:	e104      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_I2C_IsDeviceReady+0x50>
 800863c:	2302      	movs	r3, #2
 800863e:	e0fd      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b01      	cmp	r3, #1
 8008654:	d007      	beq.n	8008666 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2224      	movs	r2, #36	; 0x24
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4a70      	ldr	r2, [pc, #448]	; (8008848 <HAL_I2C_IsDeviceReady+0x258>)
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008698:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f001 feae 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00d      	beq.n	80086ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c0:	d103      	bne.n	80086ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e0b6      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086ce:	897b      	ldrh	r3, [r7, #10]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	461a      	mov	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80086de:	f7fe fb7d 	bl	8006ddc <HAL_GetTick>
 80086e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	bf0c      	ite	eq
 80086f2:	2301      	moveq	r3, #1
 80086f4:	2300      	movne	r3, #0
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008708:	bf0c      	ite	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	2300      	movne	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008712:	e025      	b.n	8008760 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008714:	f7fe fb62 	bl	8006ddc <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d302      	bcc.n	800872a <HAL_I2C_IsDeviceReady+0x13a>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	22a0      	movs	r2, #160	; 0xa0
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b02      	cmp	r3, #2
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2ba0      	cmp	r3, #160	; 0xa0
 800876a:	d005      	beq.n	8008778 <HAL_I2C_IsDeviceReady+0x188>
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <HAL_I2C_IsDeviceReady+0x188>
 8008772:	7dbb      	ldrb	r3, [r7, #22]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0cd      	beq.n	8008714 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b02      	cmp	r3, #2
 800878c:	d129      	bne.n	80087e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800879c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800879e:	2300      	movs	r3, #0
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	613b      	str	r3, [r7, #16]
 80087b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	2319      	movs	r3, #25
 80087ba:	2201      	movs	r2, #1
 80087bc:	4921      	ldr	r1, [pc, #132]	; (8008844 <HAL_I2C_IsDeviceReady+0x254>)
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 fe22 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e036      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	e02c      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2319      	movs	r3, #25
 8008802:	2201      	movs	r2, #1
 8008804:	490f      	ldr	r1, [pc, #60]	; (8008844 <HAL_I2C_IsDeviceReady+0x254>)
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f001 fdfe 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e012      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	3301      	adds	r3, #1
 800881a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	f4ff af32 	bcc.w	800868a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800883a:	2302      	movs	r3, #2
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	00100002 	.word	0x00100002
 8008848:	ffff0000 	.word	0xffff0000

0800884c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800886c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008874:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b10      	cmp	r3, #16
 800887a:	d003      	beq.n	8008884 <HAL_I2C_EV_IRQHandler+0x38>
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	f040 80c1 	bne.w	8008a06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10d      	bne.n	80088ba <HAL_I2C_EV_IRQHandler+0x6e>
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088a4:	d003      	beq.n	80088ae <HAL_I2C_EV_IRQHandler+0x62>
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088ac:	d101      	bne.n	80088b2 <HAL_I2C_EV_IRQHandler+0x66>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <HAL_I2C_EV_IRQHandler+0x68>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	f000 8132 	beq.w	8008b1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00c      	beq.n	80088de <HAL_I2C_EV_IRQHandler+0x92>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	0a5b      	lsrs	r3, r3, #9
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 ffa8 	bl	800a826 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fd83 	bl	80093e2 <I2C_Master_SB>
 80088dc:	e092      	b.n	8008a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	08db      	lsrs	r3, r3, #3
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <HAL_I2C_EV_IRQHandler+0xb2>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	0a5b      	lsrs	r3, r3, #9
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fdf9 	bl	80094ee <I2C_Master_ADD10>
 80088fc:	e082      	b.n	8008a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <HAL_I2C_EV_IRQHandler+0xd2>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	0a5b      	lsrs	r3, r3, #9
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fe13 	bl	8009542 <I2C_Master_ADDR>
 800891c:	e072      	b.n	8008a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d03b      	beq.n	80089a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008938:	f000 80f3 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	09db      	lsrs	r3, r3, #7
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00f      	beq.n	8008968 <HAL_I2C_EV_IRQHandler+0x11c>
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	0a9b      	lsrs	r3, r3, #10
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <HAL_I2C_EV_IRQHandler+0x11c>
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9f3 	bl	8008d4c <I2C_MasterTransmit_TXE>
 8008966:	e04d      	b.n	8008a04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80d6 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	0a5b      	lsrs	r3, r3, #9
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 80cf 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b21      	cmp	r3, #33	; 0x21
 8008988:	d103      	bne.n	8008992 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa7a 	bl	8008e84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008990:	e0c7      	b.n	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	f040 80c4 	bne.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fae8 	bl	8008f70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089a0:	e0bf      	b.n	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b0:	f000 80b7 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	099b      	lsrs	r3, r3, #6
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00f      	beq.n	80089e0 <HAL_I2C_EV_IRQHandler+0x194>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	0a9b      	lsrs	r3, r3, #10
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <HAL_I2C_EV_IRQHandler+0x194>
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fb5d 	bl	8009098 <I2C_MasterReceive_RXNE>
 80089de:	e011      	b.n	8008a04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	089b      	lsrs	r3, r3, #2
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 809a 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	0a5b      	lsrs	r3, r3, #9
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8093 	beq.w	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc06 	bl	800920e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a02:	e08e      	b.n	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a04:	e08d      	b.n	8008b22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d004      	beq.n	8008a18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	61fb      	str	r3, [r7, #28]
 8008a16:	e007      	b.n	8008a28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d012      	beq.n	8008a5a <HAL_I2C_EV_IRQHandler+0x20e>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	0a5b      	lsrs	r3, r3, #9
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008a50:	69b9      	ldr	r1, [r7, #24]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 ffc4 	bl	80099e0 <I2C_Slave_ADDR>
 8008a58:	e066      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <HAL_I2C_EV_IRQHandler+0x22e>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	0a5b      	lsrs	r3, r3, #9
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fffe 	bl	8009a74 <I2C_Slave_STOPF>
 8008a78:	e056      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	2b21      	cmp	r3, #33	; 0x21
 8008a7e:	d002      	beq.n	8008a86 <HAL_I2C_EV_IRQHandler+0x23a>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b29      	cmp	r3, #41	; 0x29
 8008a84:	d125      	bne.n	8008ad2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	09db      	lsrs	r3, r3, #7
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00f      	beq.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x266>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	0a9b      	lsrs	r3, r3, #10
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x266>
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	089b      	lsrs	r3, r3, #2
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 feda 	bl	8009864 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ab0:	e039      	b.n	8008b26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	089b      	lsrs	r3, r3, #2
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d033      	beq.n	8008b26 <HAL_I2C_EV_IRQHandler+0x2da>
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	0a5b      	lsrs	r3, r3, #9
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d02d      	beq.n	8008b26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 ff07 	bl	80098de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ad0:	e029      	b.n	8008b26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	099b      	lsrs	r3, r3, #6
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00f      	beq.n	8008afe <HAL_I2C_EV_IRQHandler+0x2b2>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	0a9b      	lsrs	r3, r3, #10
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d009      	beq.n	8008afe <HAL_I2C_EV_IRQHandler+0x2b2>
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	089b      	lsrs	r3, r3, #2
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 ff12 	bl	8009920 <I2C_SlaveReceive_RXNE>
 8008afc:	e014      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	089b      	lsrs	r3, r3, #2
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00e      	beq.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d008      	beq.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 ff40 	bl	800999c <I2C_SlaveReceive_BTF>
 8008b1c:	e004      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008b1e:	bf00      	nop
 8008b20:	e002      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b22:	bf00      	nop
 8008b24:	e000      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b08a      	sub	sp, #40	; 0x28
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	0a1b      	lsrs	r3, r3, #8
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <HAL_I2C_ER_IRQHandler+0x4e>
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	f043 0301 	orr.w	r3, r3, #1
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	0a5b      	lsrs	r3, r3, #9
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <HAL_I2C_ER_IRQHandler+0x78>
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d008      	beq.n	8008ba6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	f043 0302 	orr.w	r3, r3, #2
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008ba4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	0a9b      	lsrs	r3, r3, #10
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d03f      	beq.n	8008c32 <HAL_I2C_ER_IRQHandler+0x104>
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d039      	beq.n	8008c32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008bbe:	7efb      	ldrb	r3, [r7, #27]
 8008bc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008bd8:	7ebb      	ldrb	r3, [r7, #26]
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d112      	bne.n	8008c04 <HAL_I2C_ER_IRQHandler+0xd6>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10f      	bne.n	8008c04 <HAL_I2C_ER_IRQHandler+0xd6>
 8008be4:	7cfb      	ldrb	r3, [r7, #19]
 8008be6:	2b21      	cmp	r3, #33	; 0x21
 8008be8:	d008      	beq.n	8008bfc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008bea:	7cfb      	ldrb	r3, [r7, #19]
 8008bec:	2b29      	cmp	r3, #41	; 0x29
 8008bee:	d005      	beq.n	8008bfc <HAL_I2C_ER_IRQHandler+0xce>
 8008bf0:	7cfb      	ldrb	r3, [r7, #19]
 8008bf2:	2b28      	cmp	r3, #40	; 0x28
 8008bf4:	d106      	bne.n	8008c04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b21      	cmp	r3, #33	; 0x21
 8008bfa:	d103      	bne.n	8008c04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 f869 	bl	8009cd4 <I2C_Slave_AF>
 8008c02:	e016      	b.n	8008c32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	f043 0304 	orr.w	r3, r3, #4
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c16:	7efb      	ldrb	r3, [r7, #27]
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	d002      	beq.n	8008c22 <HAL_I2C_ER_IRQHandler+0xf4>
 8008c1c:	7efb      	ldrb	r3, [r7, #27]
 8008c1e:	2b40      	cmp	r3, #64	; 0x40
 8008c20:	d107      	bne.n	8008c32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	0adb      	lsrs	r3, r3, #11
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00e      	beq.n	8008c5c <HAL_I2C_ER_IRQHandler+0x12e>
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	f043 0308 	orr.w	r3, r3, #8
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008c5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f8a0 	bl	8009db4 <I2C_ITError>
  }
}
 8008c74:	bf00      	nop
 8008c76:	3728      	adds	r7, #40	; 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d150      	bne.n	8008e14 <I2C_MasterTransmit_TXE+0xc8>
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b21      	cmp	r3, #33	; 0x21
 8008d76:	d14d      	bne.n	8008e14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	d01d      	beq.n	8008dba <I2C_MasterTransmit_TXE+0x6e>
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d01a      	beq.n	8008dba <I2C_MasterTransmit_TXE+0x6e>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d8a:	d016      	beq.n	8008dba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2211      	movs	r2, #17
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff62 	bl	8008c7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008db8:	e060      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d107      	bne.n	8008e04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff ff7d 	bl	8008cfc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e02:	e03b      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ff35 	bl	8008c7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e12:	e033      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	2b21      	cmp	r3, #33	; 0x21
 8008e18:	d005      	beq.n	8008e26 <I2C_MasterTransmit_TXE+0xda>
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b40      	cmp	r3, #64	; 0x40
 8008e1e:	d12d      	bne.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b22      	cmp	r3, #34	; 0x22
 8008e24:	d12a      	bne.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d108      	bne.n	8008e42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008e40:	e01c      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	d103      	bne.n	8008e56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f88e 	bl	8008f70 <I2C_MemoryTransmit_TXE_BTF>
}
 8008e54:	e012      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008e7a:	e7ff      	b.n	8008e7c <I2C_MasterTransmit_TXE+0x130>
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b21      	cmp	r3, #33	; 0x21
 8008e9c:	d164      	bne.n	8008f68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d012      	beq.n	8008ece <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008ecc:	e04c      	b.n	8008f68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d01d      	beq.n	8008f10 <I2C_MasterTransmit_BTF+0x8c>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d01a      	beq.n	8008f10 <I2C_MasterTransmit_BTF+0x8c>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ee0:	d016      	beq.n	8008f10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ef0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2211      	movs	r2, #17
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff feb7 	bl	8008c7c <HAL_I2C_MasterTxCpltCallback>
}
 8008f0e:	e02b      	b.n	8008f68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d107      	bne.n	8008f5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fed2 	bl	8008cfc <HAL_I2C_MemTxCpltCallback>
}
 8008f58:	e006      	b.n	8008f68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fe8a 	bl	8008c7c <HAL_I2C_MasterTxCpltCallback>
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11d      	bne.n	8008fc4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10b      	bne.n	8008fa8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	1c9a      	adds	r2, r3, #2
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008fa6:	e073      	b.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	121b      	asrs	r3, r3, #8
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008fc2:	e065      	b.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d10b      	bne.n	8008fe4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008fe2:	e055      	b.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d151      	bne.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	2b22      	cmp	r3, #34	; 0x22
 8008ff0:	d10d      	bne.n	800900e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009000:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800900c:	e040      	b.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d015      	beq.n	8009044 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	2b21      	cmp	r3, #33	; 0x21
 800901c:	d112      	bne.n	8009044 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009042:	e025      	b.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d120      	bne.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	2b21      	cmp	r3, #33	; 0x21
 8009052:	d11d      	bne.n	8009090 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009062:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009072:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fe36 	bl	8008cfc <HAL_I2C_MemTxCpltCallback>
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b22      	cmp	r3, #34	; 0x22
 80090aa:	f040 80ac 	bne.w	8009206 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d921      	bls.n	8009100 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	f040 808c 	bne.w	8009206 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090fc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80090fe:	e082      	b.n	8009206 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	2b02      	cmp	r3, #2
 8009106:	d075      	beq.n	80091f4 <I2C_MasterReceive_RXNE+0x15c>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d002      	beq.n	8009114 <I2C_MasterReceive_RXNE+0x7c>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d16f      	bne.n	80091f4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 facf 	bl	800a6b8 <I2C_WaitOnSTOPRequestThroughIT>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d142      	bne.n	80091a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800912e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800913e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691a      	ldr	r2, [r3, #16]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b40      	cmp	r3, #64	; 0x40
 8009178:	d10a      	bne.n	8009190 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff fdc1 	bl	8008d10 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800918e:	e03a      	b.n	8009206 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2212      	movs	r2, #18
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff fd76 	bl	8008c90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091a4:	e02f      	b.n	8009206 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2220      	movs	r2, #32
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fd99 	bl	8008d24 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091f2:	e008      	b.n	8009206 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009202:	605a      	str	r2, [r3, #4]
}
 8009204:	e7ff      	b.n	8009206 <I2C_MasterReceive_RXNE+0x16e>
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	2b04      	cmp	r3, #4
 8009224:	d11b      	bne.n	800925e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009234:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800925c:	e0bd      	b.n	80093da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b03      	cmp	r3, #3
 8009266:	d129      	bne.n	80092bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009276:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b04      	cmp	r3, #4
 800927c:	d00a      	beq.n	8009294 <I2C_MasterReceive_BTF+0x86>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b02      	cmp	r3, #2
 8009282:	d007      	beq.n	8009294 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009292:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80092ba:	e08e      	b.n	80093da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d176      	bne.n	80093b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d002      	beq.n	80092d2 <I2C_MasterReceive_BTF+0xc4>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d108      	bne.n	80092e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e019      	b.n	8009318 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d002      	beq.n	80092f0 <I2C_MasterReceive_BTF+0xe2>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d108      	bne.n	8009302 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e00a      	b.n	8009318 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b10      	cmp	r3, #16
 8009306:	d007      	beq.n	8009318 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009316:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009372:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b40      	cmp	r3, #64	; 0x40
 8009386:	d10a      	bne.n	800939e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fcba 	bl	8008d10 <HAL_I2C_MemRxCpltCallback>
}
 800939c:	e01d      	b.n	80093da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2212      	movs	r2, #18
 80093aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff fc6f 	bl	8008c90 <HAL_I2C_MasterRxCpltCallback>
}
 80093b2:	e012      	b.n	80093da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	3b01      	subs	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b40      	cmp	r3, #64	; 0x40
 80093f4:	d117      	bne.n	8009426 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	b2db      	uxtb	r3, r3
 8009404:	461a      	mov	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800940e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009410:	e067      	b.n	80094e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f043 0301 	orr.w	r3, r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	611a      	str	r2, [r3, #16]
}
 8009424:	e05d      	b.n	80094e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942e:	d133      	bne.n	8009498 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b21      	cmp	r3, #33	; 0x21
 800943a:	d109      	bne.n	8009450 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009440:	b2db      	uxtb	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800944c:	611a      	str	r2, [r3, #16]
 800944e:	e008      	b.n	8009462 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009454:	b2db      	uxtb	r3, r3
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	b2da      	uxtb	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <I2C_Master_SB+0x92>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d108      	bne.n	8009486 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d032      	beq.n	80094e2 <I2C_Master_SB+0x100>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d02d      	beq.n	80094e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009494:	605a      	str	r2, [r3, #4]
}
 8009496:	e024      	b.n	80094e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10e      	bne.n	80094be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	11db      	asrs	r3, r3, #7
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	f003 0306 	and.w	r3, r3, #6
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	f063 030f 	orn	r3, r3, #15
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	611a      	str	r2, [r3, #16]
}
 80094bc:	e011      	b.n	80094e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d10d      	bne.n	80094e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	11db      	asrs	r3, r3, #7
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 0306 	and.w	r3, r3, #6
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f063 030e 	orn	r3, r3, #14
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	611a      	str	r2, [r3, #16]
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <I2C_Master_ADD10+0x26>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d108      	bne.n	8009526 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <I2C_Master_ADD10+0x48>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009534:	605a      	str	r2, [r3, #4]
  }
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009542:	b480      	push	{r7}
 8009544:	b091      	sub	sp, #68	; 0x44
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b22      	cmp	r3, #34	; 0x22
 800956a:	f040 8169 	bne.w	8009840 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10f      	bne.n	8009596 <I2C_Master_ADDR+0x54>
 8009576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	d10b      	bne.n	8009596 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800957e:	2300      	movs	r3, #0
 8009580:	633b      	str	r3, [r7, #48]	; 0x30
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	633b      	str	r3, [r7, #48]	; 0x30
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	633b      	str	r3, [r7, #48]	; 0x30
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	e160      	b.n	8009858 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959a:	2b00      	cmp	r3, #0
 800959c:	d11d      	bne.n	80095da <I2C_Master_ADDR+0x98>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095a6:	d118      	bne.n	80095da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a8:	2300      	movs	r3, #0
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	651a      	str	r2, [r3, #80]	; 0x50
 80095d8:	e13e      	b.n	8009858 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d113      	bne.n	800960c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095e4:	2300      	movs	r3, #0
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e115      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b01      	cmp	r3, #1
 8009614:	f040 808a 	bne.w	800972c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800961e:	d137      	bne.n	8009690 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800963a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800963e:	d113      	bne.n	8009668 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009650:	2300      	movs	r3, #0
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	e0e7      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009668:	2300      	movs	r3, #0
 800966a:	623b      	str	r3, [r7, #32]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	623b      	str	r3, [r7, #32]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	623b      	str	r3, [r7, #32]
 800967c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	e0d3      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	2b08      	cmp	r3, #8
 8009694:	d02e      	beq.n	80096f4 <I2C_Master_ADDR+0x1b2>
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	2b20      	cmp	r3, #32
 800969a:	d02b      	beq.n	80096f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800969c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969e:	2b12      	cmp	r3, #18
 80096a0:	d102      	bne.n	80096a8 <I2C_Master_ADDR+0x166>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d125      	bne.n	80096f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d00e      	beq.n	80096cc <I2C_Master_ADDR+0x18a>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d00b      	beq.n	80096cc <I2C_Master_ADDR+0x18a>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d008      	beq.n	80096cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e007      	b.n	80096dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096dc:	2300      	movs	r3, #0
 80096de:	61fb      	str	r3, [r7, #28]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	e0a1      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009702:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e085      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009730:	b29b      	uxth	r3, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d14d      	bne.n	80097d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	2b04      	cmp	r3, #4
 800973a:	d016      	beq.n	800976a <I2C_Master_ADDR+0x228>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	2b02      	cmp	r3, #2
 8009740:	d013      	beq.n	800976a <I2C_Master_ADDR+0x228>
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2b10      	cmp	r3, #16
 8009746:	d010      	beq.n	800976a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009756:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e007      	b.n	800977a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009778:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009788:	d117      	bne.n	80097ba <I2C_Master_ADDR+0x278>
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009790:	d00b      	beq.n	80097aa <I2C_Master_ADDR+0x268>
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	2b01      	cmp	r3, #1
 8009796:	d008      	beq.n	80097aa <I2C_Master_ADDR+0x268>
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	2b08      	cmp	r3, #8
 800979c:	d005      	beq.n	80097aa <I2C_Master_ADDR+0x268>
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d002      	beq.n	80097aa <I2C_Master_ADDR+0x268>
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d107      	bne.n	80097ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	e032      	b.n	8009838 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097f0:	d117      	bne.n	8009822 <I2C_Master_ADDR+0x2e0>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097f8:	d00b      	beq.n	8009812 <I2C_Master_ADDR+0x2d0>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d008      	beq.n	8009812 <I2C_Master_ADDR+0x2d0>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	2b08      	cmp	r3, #8
 8009804:	d005      	beq.n	8009812 <I2C_Master_ADDR+0x2d0>
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	2b10      	cmp	r3, #16
 800980a:	d002      	beq.n	8009812 <I2C_Master_ADDR+0x2d0>
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	2b20      	cmp	r3, #32
 8009810:	d107      	bne.n	8009822 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009820:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800983e:	e00b      	b.n	8009858 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	e7ff      	b.n	8009858 <I2C_Master_ADDR+0x316>
 8009858:	bf00      	nop
 800985a:	3744      	adds	r7, #68	; 0x44
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009872:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d02b      	beq.n	80098d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d114      	bne.n	80098d6 <I2C_SlaveTransmit_TXE+0x72>
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b29      	cmp	r3, #41	; 0x29
 80098b0:	d111      	bne.n	80098d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2221      	movs	r2, #33	; 0x21
 80098c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2228      	movs	r2, #40	; 0x28
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff f9e7 	bl	8008ca4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d011      	beq.n	8009914 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	781a      	ldrb	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990a:	b29b      	uxth	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d02c      	beq.n	8009994 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691a      	ldr	r2, [r3, #16]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d114      	bne.n	8009994 <I2C_SlaveReceive_RXNE+0x74>
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b2a      	cmp	r3, #42	; 0x2a
 800996e:	d111      	bne.n	8009994 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800997e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2222      	movs	r2, #34	; 0x22
 8009984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2228      	movs	r2, #40	; 0x28
 800998a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff f992 	bl	8008cb8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d012      	beq.n	80099d4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099fa:	2b28      	cmp	r3, #40	; 0x28
 80099fc:	d127      	bne.n	8009a4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	089b      	lsrs	r3, r3, #2
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	09db      	lsrs	r3, r3, #7
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d103      	bne.n	8009a32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	81bb      	strh	r3, [r7, #12]
 8009a30:	e002      	b.n	8009a38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009a40:	89ba      	ldrh	r2, [r7, #12]
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff f940 	bl	8008ccc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009a4c:	e00e      	b.n	8009a6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	60bb      	str	r3, [r7, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009a94:	2300      	movs	r3, #0
 8009a96:	60bb      	str	r3, [r7, #8]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f042 0201 	orr.w	r2, r2, #1
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad0:	d172      	bne.n	8009bb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b22      	cmp	r3, #34	; 0x22
 8009ad6:	d002      	beq.n	8009ade <I2C_Slave_STOPF+0x6a>
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b2a      	cmp	r3, #42	; 0x2a
 8009adc:	d135      	bne.n	8009b4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f043 0204 	orr.w	r2, r3, #4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fd ff25 	bl	8007966 <HAL_DMA_GetState>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d049      	beq.n	8009bb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	4a69      	ldr	r2, [pc, #420]	; (8009ccc <I2C_Slave_STOPF+0x258>)
 8009b28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fd fef7 	bl	8007922 <HAL_DMA_Abort_IT>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d03d      	beq.n	8009bb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b48:	e035      	b.n	8009bb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	f043 0204 	orr.w	r2, r3, #4
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fd feef 	bl	8007966 <HAL_DMA_GetState>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d014      	beq.n	8009bb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	4a4e      	ldr	r2, [pc, #312]	; (8009ccc <I2C_Slave_STOPF+0x258>)
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fd fec1 	bl	8007922 <HAL_DMA_Abort_IT>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
 8009bb4:	e000      	b.n	8009bb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d03e      	beq.n	8009c40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d112      	bne.n	8009bf6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691a      	ldr	r2, [r3, #16]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c00:	2b40      	cmp	r3, #64	; 0x40
 8009c02:	d112      	bne.n	8009c2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d005      	beq.n	8009c40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f043 0204 	orr.w	r2, r3, #4
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f8b3 	bl	8009db4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009c4e:	e039      	b.n	8009cc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b2a      	cmp	r3, #42	; 0x2a
 8009c54:	d109      	bne.n	8009c6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2228      	movs	r2, #40	; 0x28
 8009c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff f827 	bl	8008cb8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b28      	cmp	r3, #40	; 0x28
 8009c74:	d111      	bne.n	8009c9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a15      	ldr	r2, [pc, #84]	; (8009cd0 <I2C_Slave_STOPF+0x25c>)
 8009c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff f828 	bl	8008ce8 <HAL_I2C_ListenCpltCallback>
}
 8009c98:	e014      	b.n	8009cc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9e:	2b22      	cmp	r3, #34	; 0x22
 8009ca0:	d002      	beq.n	8009ca8 <I2C_Slave_STOPF+0x234>
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	2b22      	cmp	r3, #34	; 0x22
 8009ca6:	d10d      	bne.n	8009cc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7fe fffa 	bl	8008cb8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	0800a2b9 	.word	0x0800a2b9
 8009cd0:	ffff0000 	.word	0xffff0000

08009cd4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d002      	beq.n	8009cf6 <I2C_Slave_AF+0x22>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	d129      	bne.n	8009d4a <I2C_Slave_AF+0x76>
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	2b28      	cmp	r3, #40	; 0x28
 8009cfa:	d126      	bne.n	8009d4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a2c      	ldr	r2, [pc, #176]	; (8009db0 <I2C_Slave_AF+0xdc>)
 8009d00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fe ffd0 	bl	8008ce8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009d48:	e02e      	b.n	8009da8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	2b21      	cmp	r3, #33	; 0x21
 8009d4e:	d126      	bne.n	8009d9e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <I2C_Slave_AF+0xdc>)
 8009d54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2221      	movs	r2, #33	; 0x21
 8009d5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fe ff84 	bl	8008ca4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009d9c:	e004      	b.n	8009da8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009da6:	615a      	str	r2, [r3, #20]
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	ffff0000 	.word	0xffff0000

08009db4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d002      	beq.n	8009dd8 <I2C_ITError+0x24>
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	d10a      	bne.n	8009dee <I2C_ITError+0x3a>
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b22      	cmp	r3, #34	; 0x22
 8009ddc:	d107      	bne.n	8009dee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009df4:	2b28      	cmp	r3, #40	; 0x28
 8009df6:	d107      	bne.n	8009e08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2228      	movs	r2, #40	; 0x28
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e06:	e015      	b.n	8009e34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e16:	d00a      	beq.n	8009e2e <I2C_ITError+0x7a>
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b60      	cmp	r3, #96	; 0x60
 8009e1c:	d007      	beq.n	8009e2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e42:	d162      	bne.n	8009f0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d020      	beq.n	8009ea4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	4a6a      	ldr	r2, [pc, #424]	; (800a010 <I2C_ITError+0x25c>)
 8009e68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fd fd57 	bl	8007922 <HAL_DMA_Abort_IT>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 8089 	beq.w	8009f8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0201 	bic.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4798      	blx	r3
 8009ea2:	e074      	b.n	8009f8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	4a59      	ldr	r2, [pc, #356]	; (800a010 <I2C_ITError+0x25c>)
 8009eaa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd fd36 	bl	8007922 <HAL_DMA_Abort_IT>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d068      	beq.n	8009f8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d10b      	bne.n	8009ee2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	b2d2      	uxtb	r2, r2
 8009ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0201 	bic.w	r2, r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f04:	4610      	mov	r0, r2
 8009f06:	4798      	blx	r3
 8009f08:	e041      	b.n	8009f8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b60      	cmp	r3, #96	; 0x60
 8009f14:	d125      	bne.n	8009f62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2e:	2b40      	cmp	r3, #64	; 0x40
 8009f30:	d10b      	bne.n	8009f4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fe feec 	bl	8008d38 <HAL_I2C_AbortCpltCallback>
 8009f60:	e015      	b.n	8009f8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6c:	2b40      	cmp	r3, #64	; 0x40
 8009f6e:	d10b      	bne.n	8009f88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691a      	ldr	r2, [r3, #16]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fe fecb 	bl	8008d24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10e      	bne.n	8009fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d109      	bne.n	8009fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d007      	beq.n	8009fcc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009fca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d113      	bne.n	800a008 <I2C_ITError+0x254>
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b28      	cmp	r3, #40	; 0x28
 8009fe4:	d110      	bne.n	800a008 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a0a      	ldr	r2, [pc, #40]	; (800a014 <I2C_ITError+0x260>)
 8009fea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7fe fe70 	bl	8008ce8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a008:	bf00      	nop
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	0800a2b9 	.word	0x0800a2b9
 800a014:	ffff0000 	.word	0xffff0000

0800a018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	607a      	str	r2, [r7, #4]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	460b      	mov	r3, r1
 800a026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b08      	cmp	r3, #8
 800a032:	d006      	beq.n	800a042 <I2C_MasterRequestWrite+0x2a>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d003      	beq.n	800a042 <I2C_MasterRequestWrite+0x2a>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a040:	d108      	bne.n	800a054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e00b      	b.n	800a06c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a058:	2b12      	cmp	r3, #18
 800a05a:	d107      	bne.n	800a06c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a06a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f9c5 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00d      	beq.n	800a0a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a092:	d103      	bne.n	800a09c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e035      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a8:	d108      	bne.n	800a0bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0aa:	897b      	ldrh	r3, [r7, #10]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0b8:	611a      	str	r2, [r3, #16]
 800a0ba:	e01b      	b.n	800a0f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0bc:	897b      	ldrh	r3, [r7, #10]
 800a0be:	11db      	asrs	r3, r3, #7
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f003 0306 	and.w	r3, r3, #6
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f063 030f 	orn	r3, r3, #15
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	490e      	ldr	r1, [pc, #56]	; (800a114 <I2C_MasterRequestWrite+0xfc>)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f9eb 	bl	800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e010      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0ea:	897b      	ldrh	r3, [r7, #10]
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	4907      	ldr	r1, [pc, #28]	; (800a118 <I2C_MasterRequestWrite+0x100>)
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f9db 	bl	800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	00010008 	.word	0x00010008
 800a118:	00010002 	.word	0x00010002

0800a11c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	460b      	mov	r3, r1
 800a12a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a140:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d006      	beq.n	800a156 <I2C_MasterRequestRead+0x3a>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d003      	beq.n	800a156 <I2C_MasterRequestRead+0x3a>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a154:	d108      	bne.n	800a168 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	e00b      	b.n	800a180 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16c:	2b11      	cmp	r3, #17
 800a16e:	d107      	bne.n	800a180 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a17e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f93b 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00d      	beq.n	800a1b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a6:	d103      	bne.n	800a1b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e079      	b.n	800a2a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1bc:	d108      	bne.n	800a1d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a1be:	897b      	ldrh	r3, [r7, #10]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	611a      	str	r2, [r3, #16]
 800a1ce:	e05f      	b.n	800a290 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1d0:	897b      	ldrh	r3, [r7, #10]
 800a1d2:	11db      	asrs	r3, r3, #7
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0306 	and.w	r3, r3, #6
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f063 030f 	orn	r3, r3, #15
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	4930      	ldr	r1, [pc, #192]	; (800a2b0 <I2C_MasterRequestRead+0x194>)
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f961 	bl	800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e054      	b.n	800a2a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1fe:	897b      	ldrh	r3, [r7, #10]
 800a200:	b2da      	uxtb	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	4929      	ldr	r1, [pc, #164]	; (800a2b4 <I2C_MasterRequestRead+0x198>)
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 f951 	bl	800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e044      	b.n	800a2a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a242:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f8d9 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00d      	beq.n	800a278 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a26a:	d103      	bne.n	800a274 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a272:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e017      	b.n	800a2a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a278:	897b      	ldrh	r3, [r7, #10]
 800a27a:	11db      	asrs	r3, r3, #7
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0306 	and.w	r3, r3, #6
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f063 030e 	orn	r3, r3, #14
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4907      	ldr	r1, [pc, #28]	; (800a2b4 <I2C_MasterRequestRead+0x198>)
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 f90d 	bl	800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	00010008 	.word	0x00010008
 800a2b4:	00010002 	.word	0x00010002

0800a2b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a2d2:	4b4b      	ldr	r3, [pc, #300]	; (800a400 <I2C_DMAAbort+0x148>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	08db      	lsrs	r3, r3, #3
 800a2d8:	4a4a      	ldr	r2, [pc, #296]	; (800a404 <I2C_DMAAbort+0x14c>)
 800a2da:	fba2 2303 	umull	r2, r3, r2, r3
 800a2de:	0a1a      	lsrs	r2, r3, #8
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	00da      	lsls	r2, r3, #3
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	f043 0220 	orr.w	r2, r3, #32
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a2fe:	e00a      	b.n	800a316 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3b01      	subs	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a314:	d0ea      	beq.n	800a2ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	2200      	movs	r2, #0
 800a324:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	2200      	movs	r2, #0
 800a334:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a344:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2200      	movs	r2, #0
 800a34a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a358:	2200      	movs	r2, #0
 800a35a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	2200      	movs	r2, #0
 800a36a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0201 	bic.w	r2, r2, #1
 800a37a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b60      	cmp	r3, #96	; 0x60
 800a386:	d10e      	bne.n	800a3a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2200      	movs	r2, #0
 800a39c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f7fe fcca 	bl	8008d38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a3a4:	e027      	b.n	800a3f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a3a6:	7cfb      	ldrb	r3, [r7, #19]
 800a3a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a3ac:	2b28      	cmp	r3, #40	; 0x28
 800a3ae:	d117      	bne.n	800a3e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0201 	orr.w	r2, r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2228      	movs	r2, #40	; 0x28
 800a3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a3de:	e007      	b.n	800a3f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a3f0:	6978      	ldr	r0, [r7, #20]
 800a3f2:	f7fe fc97 	bl	8008d24 <HAL_I2C_ErrorCallback>
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000054 	.word	0x20000054
 800a404:	14f8b589 	.word	0x14f8b589

0800a408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a418:	e025      	b.n	800a466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d021      	beq.n	800a466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a422:	f7fc fcdb 	bl	8006ddc <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d302      	bcc.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d116      	bne.n	800a466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2220      	movs	r2, #32
 800a442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	f043 0220 	orr.w	r2, r3, #32
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e023      	b.n	800a4ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d10d      	bne.n	800a48c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	43da      	mvns	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4013      	ands	r3, r2
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bf0c      	ite	eq
 800a482:	2301      	moveq	r3, #1
 800a484:	2300      	movne	r3, #0
 800a486:	b2db      	uxtb	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	e00c      	b.n	800a4a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	43da      	mvns	r2, r3
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	4013      	ands	r3, r2
 800a498:	b29b      	uxth	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bf0c      	ite	eq
 800a49e:	2301      	moveq	r3, #1
 800a4a0:	2300      	movne	r3, #0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d0b6      	beq.n	800a41a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4c4:	e051      	b.n	800a56a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4d4:	d123      	bne.n	800a51e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f043 0204 	orr.w	r2, r3, #4
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e046      	b.n	800a5ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a524:	d021      	beq.n	800a56a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a526:	f7fc fc59 	bl	8006ddc <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d302      	bcc.n	800a53c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d116      	bne.n	800a56a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2220      	movs	r2, #32
 800a546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a556:	f043 0220 	orr.w	r2, r3, #32
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e020      	b.n	800a5ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b01      	cmp	r3, #1
 800a572:	d10c      	bne.n	800a58e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	43da      	mvns	r2, r3
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4013      	ands	r3, r2
 800a580:	b29b      	uxth	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	e00b      	b.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	43da      	mvns	r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4013      	ands	r3, r2
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bf14      	ite	ne
 800a5a0:	2301      	movne	r3, #1
 800a5a2:	2300      	moveq	r3, #0
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d18d      	bne.n	800a4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5c0:	e02d      	b.n	800a61e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f900 	bl	800a7c8 <I2C_IsAcknowledgeFailed>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e02d      	b.n	800a62e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d8:	d021      	beq.n	800a61e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5da:	f7fc fbff 	bl	8006ddc <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d302      	bcc.n	800a5f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d116      	bne.n	800a61e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	f043 0220 	orr.w	r2, r3, #32
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e007      	b.n	800a62e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a628:	2b80      	cmp	r3, #128	; 0x80
 800a62a:	d1ca      	bne.n	800a5c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a642:	e02d      	b.n	800a6a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f8bf 	bl	800a7c8 <I2C_IsAcknowledgeFailed>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e02d      	b.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d021      	beq.n	800a6a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65c:	f7fc fbbe 	bl	8006ddc <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d302      	bcc.n	800a672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d116      	bne.n	800a6a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68c:	f043 0220 	orr.w	r2, r3, #32
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e007      	b.n	800a6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d1ca      	bne.n	800a644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6c4:	4b13      	ldr	r3, [pc, #76]	; (800a714 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	08db      	lsrs	r3, r3, #3
 800a6ca:	4a13      	ldr	r2, [pc, #76]	; (800a718 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a6cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d0:	0a1a      	lsrs	r2, r3, #8
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	f043 0220 	orr.w	r2, r3, #32
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e008      	b.n	800a708 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a704:	d0e9      	beq.n	800a6da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	20000054 	.word	0x20000054
 800a718:	14f8b589 	.word	0x14f8b589

0800a71c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a728:	e042      	b.n	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d119      	bne.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e029      	b.n	800a7c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fc fb36 	bl	8006ddc <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d116      	bne.n	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	f043 0220 	orr.w	r2, r3, #32
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e007      	b.n	800a7c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	d1b5      	bne.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7de:	d11b      	bne.n	800a818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a804:	f043 0204 	orr.w	r2, r3, #4
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e000      	b.n	800a81a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a832:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a836:	d103      	bne.n	800a840 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a83e:	e007      	b.n	800a850 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a844:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a848:	d102      	bne.n	800a850 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2208      	movs	r2, #8
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e267      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d075      	beq.n	800a966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a87a:	4b88      	ldr	r3, [pc, #544]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 030c 	and.w	r3, r3, #12
 800a882:	2b04      	cmp	r3, #4
 800a884:	d00c      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a886:	4b85      	ldr	r3, [pc, #532]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a88e:	2b08      	cmp	r3, #8
 800a890:	d112      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a892:	4b82      	ldr	r3, [pc, #520]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a89a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a89e:	d10b      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a0:	4b7e      	ldr	r3, [pc, #504]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d05b      	beq.n	800a964 <HAL_RCC_OscConfig+0x108>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d157      	bne.n	800a964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e242      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c0:	d106      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x74>
 800a8c2:	4b76      	ldr	r3, [pc, #472]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a75      	ldr	r2, [pc, #468]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	e01d      	b.n	800a90c <HAL_RCC_OscConfig+0xb0>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8d8:	d10c      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x98>
 800a8da:	4b70      	ldr	r3, [pc, #448]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a6f      	ldr	r2, [pc, #444]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	4b6d      	ldr	r3, [pc, #436]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a6c      	ldr	r2, [pc, #432]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	e00b      	b.n	800a90c <HAL_RCC_OscConfig+0xb0>
 800a8f4:	4b69      	ldr	r3, [pc, #420]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a68      	ldr	r2, [pc, #416]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a8fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	4b66      	ldr	r3, [pc, #408]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a65      	ldr	r2, [pc, #404]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a90a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d013      	beq.n	800a93c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a914:	f7fc fa62 	bl	8006ddc <HAL_GetTick>
 800a918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a91a:	e008      	b.n	800a92e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a91c:	f7fc fa5e 	bl	8006ddc <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b64      	cmp	r3, #100	; 0x64
 800a928:	d901      	bls.n	800a92e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e207      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92e:	4b5b      	ldr	r3, [pc, #364]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0f0      	beq.n	800a91c <HAL_RCC_OscConfig+0xc0>
 800a93a:	e014      	b.n	800a966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a93c:	f7fc fa4e 	bl	8006ddc <HAL_GetTick>
 800a940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a944:	f7fc fa4a 	bl	8006ddc <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b64      	cmp	r3, #100	; 0x64
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e1f3      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a956:	4b51      	ldr	r3, [pc, #324]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f0      	bne.n	800a944 <HAL_RCC_OscConfig+0xe8>
 800a962:	e000      	b.n	800a966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d063      	beq.n	800aa3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a972:	4b4a      	ldr	r3, [pc, #296]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 030c 	and.w	r3, r3, #12
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a97e:	4b47      	ldr	r3, [pc, #284]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a986:	2b08      	cmp	r3, #8
 800a988:	d11c      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a98a:	4b44      	ldr	r3, [pc, #272]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d116      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a996:	4b41      	ldr	r3, [pc, #260]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d005      	beq.n	800a9ae <HAL_RCC_OscConfig+0x152>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d001      	beq.n	800a9ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e1c7      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ae:	4b3b      	ldr	r3, [pc, #236]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	00db      	lsls	r3, r3, #3
 800a9bc:	4937      	ldr	r1, [pc, #220]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9c2:	e03a      	b.n	800aa3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d020      	beq.n	800aa0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9cc:	4b34      	ldr	r3, [pc, #208]	; (800aaa0 <HAL_RCC_OscConfig+0x244>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d2:	f7fc fa03 	bl	8006ddc <HAL_GetTick>
 800a9d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9da:	f7fc f9ff 	bl	8006ddc <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e1a8      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ec:	4b2b      	ldr	r3, [pc, #172]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0f0      	beq.n	800a9da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f8:	4b28      	ldr	r3, [pc, #160]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	4925      	ldr	r1, [pc, #148]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	600b      	str	r3, [r1, #0]
 800aa0c:	e015      	b.n	800aa3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0e:	4b24      	ldr	r3, [pc, #144]	; (800aaa0 <HAL_RCC_OscConfig+0x244>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7fc f9e2 	bl	8006ddc <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa1c:	f7fc f9de 	bl	8006ddc <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e187      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1f0      	bne.n	800aa1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d036      	beq.n	800aab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d016      	beq.n	800aa7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4e:	4b15      	ldr	r3, [pc, #84]	; (800aaa4 <HAL_RCC_OscConfig+0x248>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa54:	f7fc f9c2 	bl	8006ddc <HAL_GetTick>
 800aa58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa5a:	e008      	b.n	800aa6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa5c:	f7fc f9be 	bl	8006ddc <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d901      	bls.n	800aa6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e167      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <HAL_RCC_OscConfig+0x240>)
 800aa70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0f0      	beq.n	800aa5c <HAL_RCC_OscConfig+0x200>
 800aa7a:	e01b      	b.n	800aab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7c:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <HAL_RCC_OscConfig+0x248>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa82:	f7fc f9ab 	bl	8006ddc <HAL_GetTick>
 800aa86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa88:	e00e      	b.n	800aaa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa8a:	f7fc f9a7 	bl	8006ddc <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d907      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e150      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	42470000 	.word	0x42470000
 800aaa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaa8:	4b88      	ldr	r3, [pc, #544]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aaaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1ea      	bne.n	800aa8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8097 	beq.w	800abf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aac6:	4b81      	ldr	r3, [pc, #516]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10f      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aad2:	2300      	movs	r3, #0
 800aad4:	60bb      	str	r3, [r7, #8]
 800aad6:	4b7d      	ldr	r3, [pc, #500]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	4a7c      	ldr	r2, [pc, #496]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aae0:	6413      	str	r3, [r2, #64]	; 0x40
 800aae2:	4b7a      	ldr	r3, [pc, #488]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf2:	4b77      	ldr	r3, [pc, #476]	; (800acd0 <HAL_RCC_OscConfig+0x474>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d118      	bne.n	800ab30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aafe:	4b74      	ldr	r3, [pc, #464]	; (800acd0 <HAL_RCC_OscConfig+0x474>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a73      	ldr	r2, [pc, #460]	; (800acd0 <HAL_RCC_OscConfig+0x474>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab0a:	f7fc f967 	bl	8006ddc <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab12:	f7fc f963 	bl	8006ddc <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e10c      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab24:	4b6a      	ldr	r3, [pc, #424]	; (800acd0 <HAL_RCC_OscConfig+0x474>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d106      	bne.n	800ab46 <HAL_RCC_OscConfig+0x2ea>
 800ab38:	4b64      	ldr	r3, [pc, #400]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3c:	4a63      	ldr	r2, [pc, #396]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	6713      	str	r3, [r2, #112]	; 0x70
 800ab44:	e01c      	b.n	800ab80 <HAL_RCC_OscConfig+0x324>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	d10c      	bne.n	800ab68 <HAL_RCC_OscConfig+0x30c>
 800ab4e:	4b5f      	ldr	r3, [pc, #380]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab52:	4a5e      	ldr	r2, [pc, #376]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab54:	f043 0304 	orr.w	r3, r3, #4
 800ab58:	6713      	str	r3, [r2, #112]	; 0x70
 800ab5a:	4b5c      	ldr	r3, [pc, #368]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5e:	4a5b      	ldr	r2, [pc, #364]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6713      	str	r3, [r2, #112]	; 0x70
 800ab66:	e00b      	b.n	800ab80 <HAL_RCC_OscConfig+0x324>
 800ab68:	4b58      	ldr	r3, [pc, #352]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6c:	4a57      	ldr	r2, [pc, #348]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	6713      	str	r3, [r2, #112]	; 0x70
 800ab74:	4b55      	ldr	r3, [pc, #340]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	4a54      	ldr	r2, [pc, #336]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ab7a:	f023 0304 	bic.w	r3, r3, #4
 800ab7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d015      	beq.n	800abb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab88:	f7fc f928 	bl	8006ddc <HAL_GetTick>
 800ab8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8e:	e00a      	b.n	800aba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab90:	f7fc f924 	bl	8006ddc <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e0cb      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba6:	4b49      	ldr	r3, [pc, #292]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800aba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0ee      	beq.n	800ab90 <HAL_RCC_OscConfig+0x334>
 800abb2:	e014      	b.n	800abde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abb4:	f7fc f912 	bl	8006ddc <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abba:	e00a      	b.n	800abd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abbc:	f7fc f90e 	bl	8006ddc <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abca:	4293      	cmp	r3, r2
 800abcc:	d901      	bls.n	800abd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e0b5      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abd2:	4b3e      	ldr	r3, [pc, #248]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1ee      	bne.n	800abbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d105      	bne.n	800abf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abe4:	4b39      	ldr	r3, [pc, #228]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800abe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe8:	4a38      	ldr	r2, [pc, #224]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800abea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 80a1 	beq.w	800ad3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abfa:	4b34      	ldr	r3, [pc, #208]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 030c 	and.w	r3, r3, #12
 800ac02:	2b08      	cmp	r3, #8
 800ac04:	d05c      	beq.n	800acc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d141      	bne.n	800ac92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac0e:	4b31      	ldr	r3, [pc, #196]	; (800acd4 <HAL_RCC_OscConfig+0x478>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac14:	f7fc f8e2 	bl	8006ddc <HAL_GetTick>
 800ac18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac1a:	e008      	b.n	800ac2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac1c:	f7fc f8de 	bl	8006ddc <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e087      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac2e:	4b27      	ldr	r3, [pc, #156]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f0      	bne.n	800ac1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	69da      	ldr	r2, [r3, #28]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	019b      	lsls	r3, r3, #6
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac50:	085b      	lsrs	r3, r3, #1
 800ac52:	3b01      	subs	r3, #1
 800ac54:	041b      	lsls	r3, r3, #16
 800ac56:	431a      	orrs	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	061b      	lsls	r3, r3, #24
 800ac5e:	491b      	ldr	r1, [pc, #108]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac64:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <HAL_RCC_OscConfig+0x478>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac6a:	f7fc f8b7 	bl	8006ddc <HAL_GetTick>
 800ac6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac70:	e008      	b.n	800ac84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac72:	f7fc f8b3 	bl	8006ddc <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e05c      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0f0      	beq.n	800ac72 <HAL_RCC_OscConfig+0x416>
 800ac90:	e054      	b.n	800ad3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac92:	4b10      	ldr	r3, [pc, #64]	; (800acd4 <HAL_RCC_OscConfig+0x478>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac98:	f7fc f8a0 	bl	8006ddc <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aca0:	f7fc f89c 	bl	8006ddc <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e045      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <HAL_RCC_OscConfig+0x470>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f0      	bne.n	800aca0 <HAL_RCC_OscConfig+0x444>
 800acbe:	e03d      	b.n	800ad3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d107      	bne.n	800acd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e038      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
 800accc:	40023800 	.word	0x40023800
 800acd0:	40007000 	.word	0x40007000
 800acd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800acd8:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <HAL_RCC_OscConfig+0x4ec>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d028      	beq.n	800ad38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d121      	bne.n	800ad38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d11a      	bne.n	800ad38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad08:	4013      	ands	r3, r2
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d111      	bne.n	800ad38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	085b      	lsrs	r3, r3, #1
 800ad20:	3b01      	subs	r3, #1
 800ad22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d107      	bne.n	800ad38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d001      	beq.n	800ad3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e000      	b.n	800ad3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	40023800 	.word	0x40023800

0800ad4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0cc      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad60:	4b68      	ldr	r3, [pc, #416]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d90c      	bls.n	800ad88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad6e:	4b65      	ldr	r3, [pc, #404]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad76:	4b63      	ldr	r3, [pc, #396]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0307 	and.w	r3, r3, #7
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d001      	beq.n	800ad88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e0b8      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0302 	and.w	r3, r3, #2
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d020      	beq.n	800add6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ada0:	4b59      	ldr	r3, [pc, #356]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	4a58      	ldr	r2, [pc, #352]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ada6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800adaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adb8:	4b53      	ldr	r3, [pc, #332]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	4a52      	ldr	r2, [pc, #328]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800adbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800adc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adc4:	4b50      	ldr	r3, [pc, #320]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	494d      	ldr	r1, [pc, #308]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800add2:	4313      	orrs	r3, r2
 800add4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d044      	beq.n	800ae6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d107      	bne.n	800adfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adea:	4b47      	ldr	r3, [pc, #284]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d119      	bne.n	800ae2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e07f      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d003      	beq.n	800ae0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d107      	bne.n	800ae1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae0a:	4b3f      	ldr	r3, [pc, #252]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d109      	bne.n	800ae2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e06f      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae1a:	4b3b      	ldr	r3, [pc, #236]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e067      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae2a:	4b37      	ldr	r3, [pc, #220]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f023 0203 	bic.w	r2, r3, #3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	4934      	ldr	r1, [pc, #208]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae3c:	f7fb ffce 	bl	8006ddc <HAL_GetTick>
 800ae40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae42:	e00a      	b.n	800ae5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae44:	f7fb ffca 	bl	8006ddc <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d901      	bls.n	800ae5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e04f      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae5a:	4b2b      	ldr	r3, [pc, #172]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f003 020c 	and.w	r2, r3, #12
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d1eb      	bne.n	800ae44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae6c:	4b25      	ldr	r3, [pc, #148]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d20c      	bcs.n	800ae94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae7a:	4b22      	ldr	r3, [pc, #136]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae82:	4b20      	ldr	r3, [pc, #128]	; (800af04 <HAL_RCC_ClockConfig+0x1b8>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d001      	beq.n	800ae94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e032      	b.n	800aefa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aea0:	4b19      	ldr	r3, [pc, #100]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	4916      	ldr	r1, [pc, #88]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	490e      	ldr	r1, [pc, #56]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aed2:	f000 f821 	bl	800af18 <HAL_RCC_GetSysClockFreq>
 800aed6:	4602      	mov	r2, r0
 800aed8:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <HAL_RCC_ClockConfig+0x1bc>)
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	091b      	lsrs	r3, r3, #4
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	490a      	ldr	r1, [pc, #40]	; (800af0c <HAL_RCC_ClockConfig+0x1c0>)
 800aee4:	5ccb      	ldrb	r3, [r1, r3]
 800aee6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeea:	4a09      	ldr	r2, [pc, #36]	; (800af10 <HAL_RCC_ClockConfig+0x1c4>)
 800aeec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aeee:	4b09      	ldr	r3, [pc, #36]	; (800af14 <HAL_RCC_ClockConfig+0x1c8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fb ff2e 	bl	8006d54 <HAL_InitTick>

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	40023c00 	.word	0x40023c00
 800af08:	40023800 	.word	0x40023800
 800af0c:	0800e050 	.word	0x0800e050
 800af10:	20000054 	.word	0x20000054
 800af14:	20000058 	.word	0x20000058

0800af18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af1c:	b094      	sub	sp, #80	; 0x50
 800af1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	647b      	str	r3, [r7, #68]	; 0x44
 800af24:	2300      	movs	r3, #0
 800af26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af28:	2300      	movs	r3, #0
 800af2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af30:	4b79      	ldr	r3, [pc, #484]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f003 030c 	and.w	r3, r3, #12
 800af38:	2b08      	cmp	r3, #8
 800af3a:	d00d      	beq.n	800af58 <HAL_RCC_GetSysClockFreq+0x40>
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	f200 80e1 	bhi.w	800b104 <HAL_RCC_GetSysClockFreq+0x1ec>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <HAL_RCC_GetSysClockFreq+0x34>
 800af46:	2b04      	cmp	r3, #4
 800af48:	d003      	beq.n	800af52 <HAL_RCC_GetSysClockFreq+0x3a>
 800af4a:	e0db      	b.n	800b104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af4c:	4b73      	ldr	r3, [pc, #460]	; (800b11c <HAL_RCC_GetSysClockFreq+0x204>)
 800af4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800af50:	e0db      	b.n	800b10a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af52:	4b73      	ldr	r3, [pc, #460]	; (800b120 <HAL_RCC_GetSysClockFreq+0x208>)
 800af54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800af56:	e0d8      	b.n	800b10a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af58:	4b6f      	ldr	r3, [pc, #444]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af62:	4b6d      	ldr	r3, [pc, #436]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d063      	beq.n	800b036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af6e:	4b6a      	ldr	r3, [pc, #424]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	099b      	lsrs	r3, r3, #6
 800af74:	2200      	movs	r2, #0
 800af76:	63bb      	str	r3, [r7, #56]	; 0x38
 800af78:	63fa      	str	r2, [r7, #60]	; 0x3c
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
 800af82:	2300      	movs	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
 800af86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	f04f 0000 	mov.w	r0, #0
 800af92:	f04f 0100 	mov.w	r1, #0
 800af96:	0159      	lsls	r1, r3, #5
 800af98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af9c:	0150      	lsls	r0, r2, #5
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4621      	mov	r1, r4
 800afa4:	1a51      	subs	r1, r2, r1
 800afa6:	6139      	str	r1, [r7, #16]
 800afa8:	4629      	mov	r1, r5
 800afaa:	eb63 0301 	sbc.w	r3, r3, r1
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	f04f 0200 	mov.w	r2, #0
 800afb4:	f04f 0300 	mov.w	r3, #0
 800afb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afbc:	4659      	mov	r1, fp
 800afbe:	018b      	lsls	r3, r1, #6
 800afc0:	4651      	mov	r1, sl
 800afc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800afc6:	4651      	mov	r1, sl
 800afc8:	018a      	lsls	r2, r1, #6
 800afca:	4651      	mov	r1, sl
 800afcc:	ebb2 0801 	subs.w	r8, r2, r1
 800afd0:	4659      	mov	r1, fp
 800afd2:	eb63 0901 	sbc.w	r9, r3, r1
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	f04f 0300 	mov.w	r3, #0
 800afde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afea:	4690      	mov	r8, r2
 800afec:	4699      	mov	r9, r3
 800afee:	4623      	mov	r3, r4
 800aff0:	eb18 0303 	adds.w	r3, r8, r3
 800aff4:	60bb      	str	r3, [r7, #8]
 800aff6:	462b      	mov	r3, r5
 800aff8:	eb49 0303 	adc.w	r3, r9, r3
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	f04f 0200 	mov.w	r2, #0
 800b002:	f04f 0300 	mov.w	r3, #0
 800b006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b00a:	4629      	mov	r1, r5
 800b00c:	024b      	lsls	r3, r1, #9
 800b00e:	4621      	mov	r1, r4
 800b010:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b014:	4621      	mov	r1, r4
 800b016:	024a      	lsls	r2, r1, #9
 800b018:	4610      	mov	r0, r2
 800b01a:	4619      	mov	r1, r3
 800b01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b01e:	2200      	movs	r2, #0
 800b020:	62bb      	str	r3, [r7, #40]	; 0x28
 800b022:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b028:	f7f5 ff26 	bl	8000e78 <__aeabi_uldivmod>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4613      	mov	r3, r2
 800b032:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b034:	e058      	b.n	800b0e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b036:	4b38      	ldr	r3, [pc, #224]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	099b      	lsrs	r3, r3, #6
 800b03c:	2200      	movs	r2, #0
 800b03e:	4618      	mov	r0, r3
 800b040:	4611      	mov	r1, r2
 800b042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b046:	623b      	str	r3, [r7, #32]
 800b048:	2300      	movs	r3, #0
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
 800b04c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	f04f 0000 	mov.w	r0, #0
 800b058:	f04f 0100 	mov.w	r1, #0
 800b05c:	0159      	lsls	r1, r3, #5
 800b05e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b062:	0150      	lsls	r0, r2, #5
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4641      	mov	r1, r8
 800b06a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b06e:	4649      	mov	r1, r9
 800b070:	eb63 0b01 	sbc.w	fp, r3, r1
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b088:	ebb2 040a 	subs.w	r4, r2, sl
 800b08c:	eb63 050b 	sbc.w	r5, r3, fp
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	00eb      	lsls	r3, r5, #3
 800b09a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b09e:	00e2      	lsls	r2, r4, #3
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	461d      	mov	r5, r3
 800b0a4:	4643      	mov	r3, r8
 800b0a6:	18e3      	adds	r3, r4, r3
 800b0a8:	603b      	str	r3, [r7, #0]
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	eb45 0303 	adc.w	r3, r5, r3
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	f04f 0200 	mov.w	r2, #0
 800b0b6:	f04f 0300 	mov.w	r3, #0
 800b0ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b0be:	4629      	mov	r1, r5
 800b0c0:	028b      	lsls	r3, r1, #10
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	028a      	lsls	r2, r1, #10
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	61fa      	str	r2, [r7, #28]
 800b0d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0dc:	f7f5 fecc 	bl	8000e78 <__aeabi_uldivmod>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b0e8:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	0c1b      	lsrs	r3, r3, #16
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b0f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b102:	e002      	b.n	800b10a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <HAL_RCC_GetSysClockFreq+0x204>)
 800b106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3750      	adds	r7, #80	; 0x50
 800b110:	46bd      	mov	sp, r7
 800b112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b116:	bf00      	nop
 800b118:	40023800 	.word	0x40023800
 800b11c:	00f42400 	.word	0x00f42400
 800b120:	007a1200 	.word	0x007a1200

0800b124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b128:	4b03      	ldr	r3, [pc, #12]	; (800b138 <HAL_RCC_GetHCLKFreq+0x14>)
 800b12a:	681b      	ldr	r3, [r3, #0]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	20000054 	.word	0x20000054

0800b13c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b140:	f7ff fff0 	bl	800b124 <HAL_RCC_GetHCLKFreq>
 800b144:	4602      	mov	r2, r0
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	0a9b      	lsrs	r3, r3, #10
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	4903      	ldr	r1, [pc, #12]	; (800b160 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b152:	5ccb      	ldrb	r3, [r1, r3]
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	40023800 	.word	0x40023800
 800b160:	0800e060 	.word	0x0800e060

0800b164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b168:	f7ff ffdc 	bl	800b124 <HAL_RCC_GetHCLKFreq>
 800b16c:	4602      	mov	r2, r0
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	0b5b      	lsrs	r3, r3, #13
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	4903      	ldr	r1, [pc, #12]	; (800b188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b17a:	5ccb      	ldrb	r3, [r1, r3]
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b180:	4618      	mov	r0, r3
 800b182:	bd80      	pop	{r7, pc}
 800b184:	40023800 	.word	0x40023800
 800b188:	0800e060 	.word	0x0800e060

0800b18c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e041      	b.n	800b222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7fb fbaa 	bl	800690c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f000 fd88 	bl	800bce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d001      	beq.n	800b244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e044      	b.n	800b2ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0201 	orr.w	r2, r2, #1
 800b25a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a1e      	ldr	r2, [pc, #120]	; (800b2dc <HAL_TIM_Base_Start_IT+0xb0>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d018      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x6c>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26e:	d013      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x6c>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1a      	ldr	r2, [pc, #104]	; (800b2e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00e      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x6c>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a19      	ldr	r2, [pc, #100]	; (800b2e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d009      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x6c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d004      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x6c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a16      	ldr	r2, [pc, #88]	; (800b2ec <HAL_TIM_Base_Start_IT+0xc0>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d111      	bne.n	800b2bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d010      	beq.n	800b2cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f042 0201 	orr.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ba:	e007      	b.n	800b2cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	40010000 	.word	0x40010000
 800b2e0:	40000400 	.word	0x40000400
 800b2e4:	40000800 	.word	0x40000800
 800b2e8:	40000c00 	.word	0x40000c00
 800b2ec:	40014000 	.word	0x40014000

0800b2f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e041      	b.n	800b386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f839 	bl	800b38e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f000 fcd6 	bl	800bce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d109      	bne.n	800b3c8 <HAL_TIM_PWM_Start+0x24>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	bf14      	ite	ne
 800b3c0:	2301      	movne	r3, #1
 800b3c2:	2300      	moveq	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	e022      	b.n	800b40e <HAL_TIM_PWM_Start+0x6a>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b04      	cmp	r3, #4
 800b3cc:	d109      	bne.n	800b3e2 <HAL_TIM_PWM_Start+0x3e>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	bf14      	ite	ne
 800b3da:	2301      	movne	r3, #1
 800b3dc:	2300      	moveq	r3, #0
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	e015      	b.n	800b40e <HAL_TIM_PWM_Start+0x6a>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d109      	bne.n	800b3fc <HAL_TIM_PWM_Start+0x58>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	bf14      	ite	ne
 800b3f4:	2301      	movne	r3, #1
 800b3f6:	2300      	moveq	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	e008      	b.n	800b40e <HAL_TIM_PWM_Start+0x6a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e068      	b.n	800b4e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <HAL_TIM_PWM_Start+0x82>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b424:	e013      	b.n	800b44e <HAL_TIM_PWM_Start+0xaa>
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b04      	cmp	r3, #4
 800b42a:	d104      	bne.n	800b436 <HAL_TIM_PWM_Start+0x92>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b434:	e00b      	b.n	800b44e <HAL_TIM_PWM_Start+0xaa>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d104      	bne.n	800b446 <HAL_TIM_PWM_Start+0xa2>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b444:	e003      	b.n	800b44e <HAL_TIM_PWM_Start+0xaa>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2202      	movs	r2, #2
 800b44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2201      	movs	r2, #1
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fee8 	bl	800c22c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a23      	ldr	r2, [pc, #140]	; (800b4f0 <HAL_TIM_PWM_Start+0x14c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d107      	bne.n	800b476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a1d      	ldr	r2, [pc, #116]	; (800b4f0 <HAL_TIM_PWM_Start+0x14c>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d018      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x10e>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b488:	d013      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x10e>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a19      	ldr	r2, [pc, #100]	; (800b4f4 <HAL_TIM_PWM_Start+0x150>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d00e      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x10e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <HAL_TIM_PWM_Start+0x154>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d009      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x10e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <HAL_TIM_PWM_Start+0x158>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d004      	beq.n	800b4b2 <HAL_TIM_PWM_Start+0x10e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a14      	ldr	r2, [pc, #80]	; (800b500 <HAL_TIM_PWM_Start+0x15c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d111      	bne.n	800b4d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b06      	cmp	r3, #6
 800b4c2:	d010      	beq.n	800b4e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0201 	orr.w	r2, r2, #1
 800b4d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d4:	e007      	b.n	800b4e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f042 0201 	orr.w	r2, r2, #1
 800b4e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	40010000 	.word	0x40010000
 800b4f4:	40000400 	.word	0x40000400
 800b4f8:	40000800 	.word	0x40000800
 800b4fc:	40000c00 	.word	0x40000c00
 800b500:	40014000 	.word	0x40014000

0800b504 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e097      	b.n	800b648 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fb f927 	bl	8006780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2202      	movs	r2, #2
 800b536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b548:	f023 0307 	bic.w	r3, r3, #7
 800b54c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3304      	adds	r3, #4
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f000 fbc1 	bl	800bce0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	689a      	ldr	r2, [r3, #8]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	4313      	orrs	r3, r2
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b5a4:	f023 030c 	bic.w	r3, r3, #12
 800b5a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	011a      	lsls	r2, r3, #4
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	031b      	lsls	r3, r3, #12
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b5e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b5ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b660:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b668:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b670:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b678:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d110      	bne.n	800b6a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d102      	bne.n	800b68c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b686:	7b7b      	ldrb	r3, [r7, #13]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d001      	beq.n	800b690 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e069      	b.n	800b764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6a0:	e031      	b.n	800b706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	d110      	bne.n	800b6ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d102      	bne.n	800b6b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6ae:	7b3b      	ldrb	r3, [r7, #12]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d001      	beq.n	800b6b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e055      	b.n	800b764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6c8:	e01d      	b.n	800b706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d108      	bne.n	800b6e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d105      	bne.n	800b6e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b6d6:	7b7b      	ldrb	r3, [r7, #13]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d102      	bne.n	800b6e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b6dc:	7b3b      	ldrb	r3, [r7, #12]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d001      	beq.n	800b6e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e03e      	b.n	800b764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2202      	movs	r2, #2
 800b702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <HAL_TIM_Encoder_Start+0xc4>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d008      	beq.n	800b724 <HAL_TIM_Encoder_Start+0xd4>
 800b712:	e00f      	b.n	800b734 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2201      	movs	r2, #1
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fd85 	bl	800c22c <TIM_CCxChannelCmd>
      break;
 800b722:	e016      	b.n	800b752 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2201      	movs	r2, #1
 800b72a:	2104      	movs	r1, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fd7d 	bl	800c22c <TIM_CCxChannelCmd>
      break;
 800b732:	e00e      	b.n	800b752 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2201      	movs	r2, #1
 800b73a:	2100      	movs	r1, #0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fd75 	bl	800c22c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2201      	movs	r2, #1
 800b748:	2104      	movs	r1, #4
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fd6e 	bl	800c22c <TIM_CCxChannelCmd>
      break;
 800b750:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f042 0201 	orr.w	r2, r2, #1
 800b760:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d122      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d11b      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f06f 0202 	mvn.w	r2, #2
 800b798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa77 	bl	800bca2 <HAL_TIM_IC_CaptureCallback>
 800b7b4:	e005      	b.n	800b7c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa69 	bl	800bc8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fa7a 	bl	800bcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f003 0304 	and.w	r3, r3, #4
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d122      	bne.n	800b81c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f003 0304 	and.w	r3, r3, #4
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d11b      	bne.n	800b81c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f06f 0204 	mvn.w	r2, #4
 800b7ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fa4d 	bl	800bca2 <HAL_TIM_IC_CaptureCallback>
 800b808:	e005      	b.n	800b816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fa3f 	bl	800bc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fa50 	bl	800bcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0308 	and.w	r3, r3, #8
 800b826:	2b08      	cmp	r3, #8
 800b828:	d122      	bne.n	800b870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0308 	and.w	r3, r3, #8
 800b834:	2b08      	cmp	r3, #8
 800b836:	d11b      	bne.n	800b870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0208 	mvn.w	r2, #8
 800b840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2204      	movs	r2, #4
 800b846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fa23 	bl	800bca2 <HAL_TIM_IC_CaptureCallback>
 800b85c:	e005      	b.n	800b86a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fa15 	bl	800bc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fa26 	bl	800bcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	f003 0310 	and.w	r3, r3, #16
 800b87a:	2b10      	cmp	r3, #16
 800b87c:	d122      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b10      	cmp	r3, #16
 800b88a:	d11b      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f06f 0210 	mvn.w	r2, #16
 800b894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2208      	movs	r2, #8
 800b89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	69db      	ldr	r3, [r3, #28]
 800b8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f9f9 	bl	800bca2 <HAL_TIM_IC_CaptureCallback>
 800b8b0:	e005      	b.n	800b8be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9eb 	bl	800bc8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f9fc 	bl	800bcb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d10e      	bne.n	800b8f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d107      	bne.n	800b8f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f06f 0201 	mvn.w	r2, #1
 800b8e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7f8 fa64 	bl	8003db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8fa:	2b80      	cmp	r3, #128	; 0x80
 800b8fc:	d10e      	bne.n	800b91c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b908:	2b80      	cmp	r3, #128	; 0x80
 800b90a:	d107      	bne.n	800b91c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fd26 	bl	800c368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b926:	2b40      	cmp	r3, #64	; 0x40
 800b928:	d10e      	bne.n	800b948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b934:	2b40      	cmp	r3, #64	; 0x40
 800b936:	d107      	bne.n	800b948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f9c1 	bl	800bcca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	f003 0320 	and.w	r3, r3, #32
 800b952:	2b20      	cmp	r3, #32
 800b954:	d10e      	bne.n	800b974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f003 0320 	and.w	r3, r3, #32
 800b960:	2b20      	cmp	r3, #32
 800b962:	d107      	bne.n	800b974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f06f 0220 	mvn.w	r2, #32
 800b96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fcf0 	bl	800c354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b996:	2302      	movs	r3, #2
 800b998:	e0ae      	b.n	800baf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b0c      	cmp	r3, #12
 800b9a6:	f200 809f 	bhi.w	800bae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b9aa:	a201      	add	r2, pc, #4	; (adr r2, 800b9b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9e5 	.word	0x0800b9e5
 800b9b4:	0800bae9 	.word	0x0800bae9
 800b9b8:	0800bae9 	.word	0x0800bae9
 800b9bc:	0800bae9 	.word	0x0800bae9
 800b9c0:	0800ba25 	.word	0x0800ba25
 800b9c4:	0800bae9 	.word	0x0800bae9
 800b9c8:	0800bae9 	.word	0x0800bae9
 800b9cc:	0800bae9 	.word	0x0800bae9
 800b9d0:	0800ba67 	.word	0x0800ba67
 800b9d4:	0800bae9 	.word	0x0800bae9
 800b9d8:	0800bae9 	.word	0x0800bae9
 800b9dc:	0800bae9 	.word	0x0800bae9
 800b9e0:	0800baa7 	.word	0x0800baa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68b9      	ldr	r1, [r7, #8]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 f9f8 	bl	800bde0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0208 	orr.w	r2, r2, #8
 800b9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699a      	ldr	r2, [r3, #24]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f022 0204 	bic.w	r2, r2, #4
 800ba0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6999      	ldr	r1, [r3, #24]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	691a      	ldr	r2, [r3, #16]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	619a      	str	r2, [r3, #24]
      break;
 800ba22:	e064      	b.n	800baee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68b9      	ldr	r1, [r7, #8]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fa3e 	bl	800beac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	699a      	ldr	r2, [r3, #24]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699a      	ldr	r2, [r3, #24]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6999      	ldr	r1, [r3, #24]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	021a      	lsls	r2, r3, #8
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	619a      	str	r2, [r3, #24]
      break;
 800ba64:	e043      	b.n	800baee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68b9      	ldr	r1, [r7, #8]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fa89 	bl	800bf84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	69da      	ldr	r2, [r3, #28]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 0208 	orr.w	r2, r2, #8
 800ba80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	69da      	ldr	r2, [r3, #28]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0204 	bic.w	r2, r2, #4
 800ba90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	69d9      	ldr	r1, [r3, #28]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	691a      	ldr	r2, [r3, #16]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	430a      	orrs	r2, r1
 800baa2:	61da      	str	r2, [r3, #28]
      break;
 800baa4:	e023      	b.n	800baee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 fad3 	bl	800c058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69da      	ldr	r2, [r3, #28]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	69da      	ldr	r2, [r3, #28]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	69d9      	ldr	r1, [r3, #28]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	021a      	lsls	r2, r3, #8
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	61da      	str	r2, [r3, #28]
      break;
 800bae6:	e002      	b.n	800baee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	75fb      	strb	r3, [r7, #23]
      break;
 800baec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_TIM_ConfigClockSource+0x1c>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0b4      	b.n	800bc86 <HAL_TIM_ConfigClockSource+0x186>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb54:	d03e      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0xd4>
 800bb56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb5a:	f200 8087 	bhi.w	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb62:	f000 8086 	beq.w	800bc72 <HAL_TIM_ConfigClockSource+0x172>
 800bb66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb6a:	d87f      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb6c:	2b70      	cmp	r3, #112	; 0x70
 800bb6e:	d01a      	beq.n	800bba6 <HAL_TIM_ConfigClockSource+0xa6>
 800bb70:	2b70      	cmp	r3, #112	; 0x70
 800bb72:	d87b      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb74:	2b60      	cmp	r3, #96	; 0x60
 800bb76:	d050      	beq.n	800bc1a <HAL_TIM_ConfigClockSource+0x11a>
 800bb78:	2b60      	cmp	r3, #96	; 0x60
 800bb7a:	d877      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb7c:	2b50      	cmp	r3, #80	; 0x50
 800bb7e:	d03c      	beq.n	800bbfa <HAL_TIM_ConfigClockSource+0xfa>
 800bb80:	2b50      	cmp	r3, #80	; 0x50
 800bb82:	d873      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb84:	2b40      	cmp	r3, #64	; 0x40
 800bb86:	d058      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x13a>
 800bb88:	2b40      	cmp	r3, #64	; 0x40
 800bb8a:	d86f      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb8c:	2b30      	cmp	r3, #48	; 0x30
 800bb8e:	d064      	beq.n	800bc5a <HAL_TIM_ConfigClockSource+0x15a>
 800bb90:	2b30      	cmp	r3, #48	; 0x30
 800bb92:	d86b      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb94:	2b20      	cmp	r3, #32
 800bb96:	d060      	beq.n	800bc5a <HAL_TIM_ConfigClockSource+0x15a>
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	d867      	bhi.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d05c      	beq.n	800bc5a <HAL_TIM_ConfigClockSource+0x15a>
 800bba0:	2b10      	cmp	r3, #16
 800bba2:	d05a      	beq.n	800bc5a <HAL_TIM_ConfigClockSource+0x15a>
 800bba4:	e062      	b.n	800bc6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6899      	ldr	r1, [r3, #8]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	f000 fb19 	bl	800c1ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	609a      	str	r2, [r3, #8]
      break;
 800bbd2:	e04f      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	6899      	ldr	r1, [r3, #8]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f000 fb02 	bl	800c1ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbf6:	609a      	str	r2, [r3, #8]
      break;
 800bbf8:	e03c      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	6859      	ldr	r1, [r3, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f000 fa76 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2150      	movs	r1, #80	; 0x50
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 facf 	bl	800c1b6 <TIM_ITRx_SetConfig>
      break;
 800bc18:	e02c      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	6859      	ldr	r1, [r3, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f000 fa95 	bl	800c156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2160      	movs	r1, #96	; 0x60
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fabf 	bl	800c1b6 <TIM_ITRx_SetConfig>
      break;
 800bc38:	e01c      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6818      	ldr	r0, [r3, #0]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	6859      	ldr	r1, [r3, #4]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f000 fa56 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2140      	movs	r1, #64	; 0x40
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 faaf 	bl	800c1b6 <TIM_ITRx_SetConfig>
      break;
 800bc58:	e00c      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4619      	mov	r1, r3
 800bc64:	4610      	mov	r0, r2
 800bc66:	f000 faa6 	bl	800c1b6 <TIM_ITRx_SetConfig>
      break;
 800bc6a:	e003      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc70:	e000      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bc72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcaa:	bf00      	nop
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a34      	ldr	r2, [pc, #208]	; (800bdc4 <TIM_Base_SetConfig+0xe4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00f      	beq.n	800bd18 <TIM_Base_SetConfig+0x38>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcfe:	d00b      	beq.n	800bd18 <TIM_Base_SetConfig+0x38>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a31      	ldr	r2, [pc, #196]	; (800bdc8 <TIM_Base_SetConfig+0xe8>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d007      	beq.n	800bd18 <TIM_Base_SetConfig+0x38>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a30      	ldr	r2, [pc, #192]	; (800bdcc <TIM_Base_SetConfig+0xec>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d003      	beq.n	800bd18 <TIM_Base_SetConfig+0x38>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a2f      	ldr	r2, [pc, #188]	; (800bdd0 <TIM_Base_SetConfig+0xf0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d108      	bne.n	800bd2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a25      	ldr	r2, [pc, #148]	; (800bdc4 <TIM_Base_SetConfig+0xe4>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d01b      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd38:	d017      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a22      	ldr	r2, [pc, #136]	; (800bdc8 <TIM_Base_SetConfig+0xe8>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d013      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a21      	ldr	r2, [pc, #132]	; (800bdcc <TIM_Base_SetConfig+0xec>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d00f      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a20      	ldr	r2, [pc, #128]	; (800bdd0 <TIM_Base_SetConfig+0xf0>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00b      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a1f      	ldr	r2, [pc, #124]	; (800bdd4 <TIM_Base_SetConfig+0xf4>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d007      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a1e      	ldr	r2, [pc, #120]	; (800bdd8 <TIM_Base_SetConfig+0xf8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d003      	beq.n	800bd6a <TIM_Base_SetConfig+0x8a>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a1d      	ldr	r2, [pc, #116]	; (800bddc <TIM_Base_SetConfig+0xfc>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d108      	bne.n	800bd7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <TIM_Base_SetConfig+0xe4>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d103      	bne.n	800bdb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	615a      	str	r2, [r3, #20]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	40010000 	.word	0x40010000
 800bdc8:	40000400 	.word	0x40000400
 800bdcc:	40000800 	.word	0x40000800
 800bdd0:	40000c00 	.word	0x40000c00
 800bdd4:	40014000 	.word	0x40014000
 800bdd8:	40014400 	.word	0x40014400
 800bddc:	40014800 	.word	0x40014800

0800bde0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	f023 0201 	bic.w	r2, r3, #1
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f023 0302 	bic.w	r3, r3, #2
 800be28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	4313      	orrs	r3, r2
 800be32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a1c      	ldr	r2, [pc, #112]	; (800bea8 <TIM_OC1_SetConfig+0xc8>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d10c      	bne.n	800be56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	f023 0308 	bic.w	r3, r3, #8
 800be42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f023 0304 	bic.w	r3, r3, #4
 800be54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a13      	ldr	r2, [pc, #76]	; (800bea8 <TIM_OC1_SetConfig+0xc8>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d111      	bne.n	800be82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	4313      	orrs	r3, r2
 800be80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	621a      	str	r2, [r3, #32]
}
 800be9c:	bf00      	nop
 800be9e:	371c      	adds	r7, #28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	40010000 	.word	0x40010000

0800beac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f023 0210 	bic.w	r2, r3, #16
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f023 0320 	bic.w	r3, r3, #32
 800bef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a1e      	ldr	r2, [pc, #120]	; (800bf80 <TIM_OC2_SetConfig+0xd4>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d10d      	bne.n	800bf28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a15      	ldr	r2, [pc, #84]	; (800bf80 <TIM_OC2_SetConfig+0xd4>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d113      	bne.n	800bf58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	621a      	str	r2, [r3, #32]
}
 800bf72:	bf00      	nop
 800bf74:	371c      	adds	r7, #28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	40010000 	.word	0x40010000

0800bf84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 0303 	bic.w	r3, r3, #3
 800bfba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a1d      	ldr	r2, [pc, #116]	; (800c054 <TIM_OC3_SetConfig+0xd0>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d10d      	bne.n	800bffe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a14      	ldr	r2, [pc, #80]	; (800c054 <TIM_OC3_SetConfig+0xd0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d113      	bne.n	800c02e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	011b      	lsls	r3, r3, #4
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	4313      	orrs	r3, r2
 800c020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	621a      	str	r2, [r3, #32]
}
 800c048:	bf00      	nop
 800c04a:	371c      	adds	r7, #28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	40010000 	.word	0x40010000

0800c058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	021b      	lsls	r3, r3, #8
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	031b      	lsls	r3, r3, #12
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a10      	ldr	r2, [pc, #64]	; (800c0f4 <TIM_OC4_SetConfig+0x9c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d109      	bne.n	800c0cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	019b      	lsls	r3, r3, #6
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	621a      	str	r2, [r3, #32]
}
 800c0e6:	bf00      	nop
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	40010000 	.word	0x40010000

0800c0f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	f023 0201 	bic.w	r2, r3, #1
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f023 030a 	bic.w	r3, r3, #10
 800c134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	621a      	str	r2, [r3, #32]
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c156:	b480      	push	{r7}
 800c158:	b087      	sub	sp, #28
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	f023 0210 	bic.w	r2, r3, #16
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	031b      	lsls	r3, r3, #12
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	621a      	str	r2, [r3, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	f043 0307 	orr.w	r3, r3, #7
 800c1d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	609a      	str	r2, [r3, #8]
}
 800c1e0:	bf00      	nop
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	021a      	lsls	r2, r3, #8
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	431a      	orrs	r2, r3
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4313      	orrs	r3, r2
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	4313      	orrs	r3, r2
 800c218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	609a      	str	r2, [r3, #8]
}
 800c220:	bf00      	nop
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f003 031f 	and.w	r3, r3, #31
 800c23e:	2201      	movs	r2, #1
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6a1a      	ldr	r2, [r3, #32]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	43db      	mvns	r3, r3
 800c24e:	401a      	ands	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a1a      	ldr	r2, [r3, #32]
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	f003 031f 	and.w	r3, r3, #31
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	fa01 f303 	lsl.w	r3, r1, r3
 800c264:	431a      	orrs	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	621a      	str	r2, [r3, #32]
}
 800c26a:	bf00      	nop
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
	...

0800c278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d101      	bne.n	800c290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c28c:	2302      	movs	r3, #2
 800c28e:	e050      	b.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2202      	movs	r2, #2
 800c29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a1c      	ldr	r2, [pc, #112]	; (800c340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d018      	beq.n	800c306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2dc:	d013      	beq.n	800c306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a18      	ldr	r2, [pc, #96]	; (800c344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d00e      	beq.n	800c306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a16      	ldr	r2, [pc, #88]	; (800c348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d009      	beq.n	800c306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a15      	ldr	r2, [pc, #84]	; (800c34c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d004      	beq.n	800c306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a13      	ldr	r2, [pc, #76]	; (800c350 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d10c      	bne.n	800c320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c30c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	4313      	orrs	r3, r2
 800c316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	40010000 	.word	0x40010000
 800c344:	40000400 	.word	0x40000400
 800c348:	40000800 	.word	0x40000800
 800c34c:	40000c00 	.word	0x40000c00
 800c350:	40014000 	.word	0x40014000

0800c354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e03f      	b.n	800c40e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7fa fb32 	bl	8006a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2224      	movs	r2, #36	; 0x24
 800c3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68da      	ldr	r2, [r3, #12]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fddf 	bl	800cf84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691a      	ldr	r2, [r3, #16]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	695a      	ldr	r2, [r3, #20]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68da      	ldr	r2, [r3, #12]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2220      	movs	r2, #32
 800c400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2220      	movs	r2, #32
 800c408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b08a      	sub	sp, #40	; 0x28
 800c41a:	af02      	add	r7, sp, #8
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	603b      	str	r3, [r7, #0]
 800c422:	4613      	mov	r3, r2
 800c424:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b20      	cmp	r3, #32
 800c434:	d17c      	bne.n	800c530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <HAL_UART_Transmit+0x2c>
 800c43c:	88fb      	ldrh	r3, [r7, #6]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e075      	b.n	800c532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d101      	bne.n	800c454 <HAL_UART_Transmit+0x3e>
 800c450:	2302      	movs	r3, #2
 800c452:	e06e      	b.n	800c532 <HAL_UART_Transmit+0x11c>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2221      	movs	r2, #33	; 0x21
 800c466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c46a:	f7fa fcb7 	bl	8006ddc <HAL_GetTick>
 800c46e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	88fa      	ldrh	r2, [r7, #6]
 800c474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	88fa      	ldrh	r2, [r7, #6]
 800c47a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c484:	d108      	bne.n	800c498 <HAL_UART_Transmit+0x82>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d104      	bne.n	800c498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	61bb      	str	r3, [r7, #24]
 800c496:	e003      	b.n	800c4a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c49c:	2300      	movs	r3, #0
 800c49e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c4a8:	e02a      	b.n	800c500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2180      	movs	r1, #128	; 0x80
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 fb1f 	bl	800caf8 <UART_WaitOnFlagUntilTimeout>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e036      	b.n	800c532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10b      	bne.n	800c4e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	3302      	adds	r3, #2
 800c4de:	61bb      	str	r3, [r7, #24]
 800c4e0:	e007      	b.n	800c4f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	781a      	ldrb	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c504:	b29b      	uxth	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1cf      	bne.n	800c4aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2200      	movs	r2, #0
 800c512:	2140      	movs	r1, #64	; 0x40
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 faef 	bl	800caf8 <UART_WaitOnFlagUntilTimeout>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c520:	2303      	movs	r3, #3
 800c522:	e006      	b.n	800c532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2220      	movs	r2, #32
 800c528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	e000      	b.n	800c532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c530:	2302      	movs	r3, #2
  }
}
 800c532:	4618      	mov	r0, r3
 800c534:	3720      	adds	r7, #32
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	4613      	mov	r3, r2
 800c546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b20      	cmp	r3, #32
 800c552:	d11d      	bne.n	800c590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <HAL_UART_Receive_IT+0x26>
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e016      	b.n	800c592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <HAL_UART_Receive_IT+0x38>
 800c56e:	2302      	movs	r3, #2
 800c570:	e00f      	b.n	800c592 <HAL_UART_Receive_IT+0x58>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	461a      	mov	r2, r3
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 fb24 	bl	800cbd4 <UART_Start_Receive_IT>
 800c58c:	4603      	mov	r3, r0
 800c58e:	e000      	b.n	800c592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c590:	2302      	movs	r3, #2
  }
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b0ba      	sub	sp, #232	; 0xe8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d2:	f003 030f 	and.w	r3, r3, #15
 800c5d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c5da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10f      	bne.n	800c602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e6:	f003 0320 	and.w	r3, r3, #32
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d009      	beq.n	800c602 <HAL_UART_IRQHandler+0x66>
 800c5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fc07 	bl	800ce0e <UART_Receive_IT>
      return;
 800c600:	e256      	b.n	800cab0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80de 	beq.w	800c7c8 <HAL_UART_IRQHandler+0x22c>
 800c60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d106      	bne.n	800c626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c61c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80d1 	beq.w	800c7c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <HAL_UART_IRQHandler+0xae>
 800c632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	f043 0201 	orr.w	r2, r3, #1
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64e:	f003 0304 	and.w	r3, r3, #4
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00b      	beq.n	800c66e <HAL_UART_IRQHandler+0xd2>
 800c656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d005      	beq.n	800c66e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c666:	f043 0202 	orr.w	r2, r3, #2
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c672:	f003 0302 	and.w	r3, r3, #2
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <HAL_UART_IRQHandler+0xf6>
 800c67a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d005      	beq.n	800c692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	f043 0204 	orr.w	r2, r3, #4
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d011      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x126>
 800c69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d105      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ae:	f003 0301 	and.w	r3, r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d005      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ba:	f043 0208 	orr.w	r2, r3, #8
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 81ed 	beq.w	800caa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d0:	f003 0320 	and.w	r3, r3, #32
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d008      	beq.n	800c6ea <HAL_UART_IRQHandler+0x14e>
 800c6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fb92 	bl	800ce0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f4:	2b40      	cmp	r3, #64	; 0x40
 800c6f6:	bf0c      	ite	eq
 800c6f8:	2301      	moveq	r3, #1
 800c6fa:	2300      	movne	r3, #0
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c706:	f003 0308 	and.w	r3, r3, #8
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d103      	bne.n	800c716 <HAL_UART_IRQHandler+0x17a>
 800c70e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d04f      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa9a 	bl	800cc50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c726:	2b40      	cmp	r3, #64	; 0x40
 800c728:	d141      	bne.n	800c7ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3314      	adds	r3, #20
 800c730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3314      	adds	r3, #20
 800c752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c75a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1d9      	bne.n	800c72a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d013      	beq.n	800c7a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	4a7d      	ldr	r2, [pc, #500]	; (800c978 <HAL_UART_IRQHandler+0x3dc>)
 800c784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fb f8c9 	bl	8007922 <HAL_DMA_Abort_IT>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d016      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a4:	e00e      	b.n	800c7c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f990 	bl	800cacc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ac:	e00a      	b.n	800c7c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f98c 	bl	800cacc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b4:	e006      	b.n	800c7c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f988 	bl	800cacc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c7c2:	e170      	b.n	800caa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c4:	bf00      	nop
    return;
 800c7c6:	e16e      	b.n	800caa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	f040 814a 	bne.w	800ca66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d6:	f003 0310 	and.w	r3, r3, #16
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 8143 	beq.w	800ca66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7e4:	f003 0310 	and.w	r3, r3, #16
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 813c 	beq.w	800ca66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60bb      	str	r3, [r7, #8]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	60bb      	str	r3, [r7, #8]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	60bb      	str	r3, [r7, #8]
 800c802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c80e:	2b40      	cmp	r3, #64	; 0x40
 800c810:	f040 80b4 	bne.w	800c97c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8140 	beq.w	800caaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c82e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c832:	429a      	cmp	r2, r3
 800c834:	f080 8139 	bcs.w	800caaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c83e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c84a:	f000 8088 	beq.w	800c95e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	330c      	adds	r3, #12
 800c854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c85c:	e853 3f00 	ldrex	r3, [r3]
 800c860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c86c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	330c      	adds	r3, #12
 800c876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c87a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c87e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1d9      	bne.n	800c84e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c8aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
 800c8b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c8be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c8c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c8c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e1      	bne.n	800c89a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3314      	adds	r3, #20
 800c8dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8e0:	e853 3f00 	ldrex	r3, [r3]
 800c8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3314      	adds	r3, #20
 800c8f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e3      	bne.n	800c8d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2220      	movs	r2, #32
 800c912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	330c      	adds	r3, #12
 800c922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c92e:	f023 0310 	bic.w	r3, r3, #16
 800c932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	330c      	adds	r3, #12
 800c93c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c940:	65ba      	str	r2, [r7, #88]	; 0x58
 800c942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e3      	bne.n	800c91c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fa ff72 	bl	8007842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c966:	b29b      	uxth	r3, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f8b6 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c974:	e099      	b.n	800caaa <HAL_UART_IRQHandler+0x50e>
 800c976:	bf00      	nop
 800c978:	0800cd17 	.word	0x0800cd17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c984:	b29b      	uxth	r3, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c990:	b29b      	uxth	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 808b 	beq.w	800caae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 8086 	beq.w	800caae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	330c      	adds	r3, #12
 800c9a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	e853 3f00 	ldrex	r3, [r3]
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c9c6:	647a      	str	r2, [r7, #68]	; 0x44
 800c9c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e3      	bne.n	800c9a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3314      	adds	r3, #20
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f023 0301 	bic.w	r3, r3, #1
 800c9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3314      	adds	r3, #20
 800c9fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9fe:	633a      	str	r2, [r7, #48]	; 0x30
 800ca00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e3      	bne.n	800c9da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2220      	movs	r2, #32
 800ca16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	330c      	adds	r3, #12
 800ca26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	e853 3f00 	ldrex	r3, [r3]
 800ca2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0310 	bic.w	r3, r3, #16
 800ca36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	330c      	adds	r3, #12
 800ca40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ca44:	61fa      	str	r2, [r7, #28]
 800ca46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca48:	69b9      	ldr	r1, [r7, #24]
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	e841 2300 	strex	r3, r2, [r1]
 800ca50:	617b      	str	r3, [r7, #20]
   return(result);
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e3      	bne.n	800ca20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f83e 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca64:	e023      	b.n	800caae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d009      	beq.n	800ca86 <HAL_UART_IRQHandler+0x4ea>
 800ca72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f95d 	bl	800cd3e <UART_Transmit_IT>
    return;
 800ca84:	e014      	b.n	800cab0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00e      	beq.n	800cab0 <HAL_UART_IRQHandler+0x514>
 800ca92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d008      	beq.n	800cab0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f99d 	bl	800cdde <UART_EndTransmit_IT>
    return;
 800caa4:	e004      	b.n	800cab0 <HAL_UART_IRQHandler+0x514>
    return;
 800caa6:	bf00      	nop
 800caa8:	e002      	b.n	800cab0 <HAL_UART_IRQHandler+0x514>
      return;
 800caaa:	bf00      	nop
 800caac:	e000      	b.n	800cab0 <HAL_UART_IRQHandler+0x514>
      return;
 800caae:	bf00      	nop
  }
}
 800cab0:	37e8      	adds	r7, #232	; 0xe8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop

0800cab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b090      	sub	sp, #64	; 0x40
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	603b      	str	r3, [r7, #0]
 800cb04:	4613      	mov	r3, r2
 800cb06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb08:	e050      	b.n	800cbac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb10:	d04c      	beq.n	800cbac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cb12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d007      	beq.n	800cb28 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb18:	f7fa f960 	bl	8006ddc <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d241      	bcs.n	800cbac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	e853 3f00 	ldrex	r3, [r3]
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	330c      	adds	r3, #12
 800cb46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb48:	637a      	str	r2, [r7, #52]	; 0x34
 800cb4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb50:	e841 2300 	strex	r3, r2, [r1]
 800cb54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e5      	bne.n	800cb28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3314      	adds	r3, #20
 800cb62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	e853 3f00 	ldrex	r3, [r3]
 800cb6a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f023 0301 	bic.w	r3, r3, #1
 800cb72:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3314      	adds	r3, #20
 800cb7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb7c:	623a      	str	r2, [r7, #32]
 800cb7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb80:	69f9      	ldr	r1, [r7, #28]
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	e841 2300 	strex	r3, r2, [r1]
 800cb88:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1e5      	bne.n	800cb5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2220      	movs	r2, #32
 800cb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e00f      	b.n	800cbcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	bf0c      	ite	eq
 800cbbc:	2301      	moveq	r3, #1
 800cbbe:	2300      	movne	r3, #0
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d09f      	beq.n	800cb0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3740      	adds	r7, #64	; 0x40
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	88fa      	ldrh	r2, [r7, #6]
 800cbec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	88fa      	ldrh	r2, [r7, #6]
 800cbf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2222      	movs	r2, #34	; 0x22
 800cbfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	695a      	ldr	r2, [r3, #20]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f042 0201 	orr.w	r2, r2, #1
 800cc30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68da      	ldr	r2, [r3, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f042 0220 	orr.w	r2, r2, #32
 800cc40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b095      	sub	sp, #84	; 0x54
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	330c      	adds	r3, #12
 800cc5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	330c      	adds	r3, #12
 800cc76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc78:	643a      	str	r2, [r7, #64]	; 0x40
 800cc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e5      	bne.n	800cc58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3314      	adds	r3, #20
 800cc92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	f023 0301 	bic.w	r3, r3, #1
 800cca2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3314      	adds	r3, #20
 800ccaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb4:	e841 2300 	strex	r3, r2, [r1]
 800ccb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e5      	bne.n	800cc8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d119      	bne.n	800ccfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	330c      	adds	r3, #12
 800ccce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	e853 3f00 	ldrex	r3, [r3]
 800ccd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f023 0310 	bic.w	r3, r3, #16
 800ccde:	647b      	str	r3, [r7, #68]	; 0x44
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	330c      	adds	r3, #12
 800cce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cce8:	61ba      	str	r2, [r7, #24]
 800ccea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e5      	bne.n	800ccc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cd0a:	bf00      	nop
 800cd0c:	3754      	adds	r7, #84	; 0x54
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f7ff fecb 	bl	800cacc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd36:	bf00      	nop
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b21      	cmp	r3, #33	; 0x21
 800cd50:	d13e      	bne.n	800cdd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd5a:	d114      	bne.n	800cd86 <UART_Transmit_IT+0x48>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d110      	bne.n	800cd86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	1c9a      	adds	r2, r3, #2
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	621a      	str	r2, [r3, #32]
 800cd84:	e008      	b.n	800cd98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	1c59      	adds	r1, r3, #1
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	6211      	str	r1, [r2, #32]
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	4619      	mov	r1, r3
 800cda6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10f      	bne.n	800cdcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68da      	ldr	r2, [r3, #12]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68da      	ldr	r2, [r3, #12]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e000      	b.n	800cdd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cdd0:	2302      	movs	r3, #2
  }
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff fe5a 	bl	800cab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b08c      	sub	sp, #48	; 0x30
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b22      	cmp	r3, #34	; 0x22
 800ce20:	f040 80ab 	bne.w	800cf7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce2c:	d117      	bne.n	800ce5e <UART_Receive_IT+0x50>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d113      	bne.n	800ce5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce56:	1c9a      	adds	r2, r3, #2
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	629a      	str	r2, [r3, #40]	; 0x28
 800ce5c:	e026      	b.n	800ceac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce64:	2300      	movs	r3, #0
 800ce66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce70:	d007      	beq.n	800ce82 <UART_Receive_IT+0x74>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10a      	bne.n	800ce90 <UART_Receive_IT+0x82>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d106      	bne.n	800ce90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	e008      	b.n	800cea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d15a      	bne.n	800cf76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f022 0220 	bic.w	r2, r2, #32
 800cece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	695a      	ldr	r2, [r3, #20]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f022 0201 	bic.w	r2, r2, #1
 800ceee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2220      	movs	r2, #32
 800cef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d135      	bne.n	800cf6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	330c      	adds	r3, #12
 800cf0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	e853 3f00 	ldrex	r3, [r3]
 800cf14:	613b      	str	r3, [r7, #16]
   return(result);
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f023 0310 	bic.w	r3, r3, #16
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	330c      	adds	r3, #12
 800cf24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf26:	623a      	str	r2, [r7, #32]
 800cf28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2a:	69f9      	ldr	r1, [r7, #28]
 800cf2c:	6a3a      	ldr	r2, [r7, #32]
 800cf2e:	e841 2300 	strex	r3, r2, [r1]
 800cf32:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1e5      	bne.n	800cf06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0310 	and.w	r3, r3, #16
 800cf44:	2b10      	cmp	r3, #16
 800cf46:	d10a      	bne.n	800cf5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff fdbb 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
 800cf6a:	e002      	b.n	800cf72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f6 fe8f 	bl	8003c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e002      	b.n	800cf7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e000      	b.n	800cf7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cf7a:	2302      	movs	r3, #2
  }
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3730      	adds	r7, #48	; 0x30
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf88:	b0c0      	sub	sp, #256	; 0x100
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa0:	68d9      	ldr	r1, [r3, #12]
 800cfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	ea40 0301 	orr.w	r3, r0, r1
 800cfac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb2:	689a      	ldr	r2, [r3, #8]
 800cfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	431a      	orrs	r2, r3
 800cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc8:	69db      	ldr	r3, [r3, #28]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cfd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cfdc:	f021 010c 	bic.w	r1, r1, #12
 800cfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfea:	430b      	orrs	r3, r1
 800cfec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cfee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cffe:	6999      	ldr	r1, [r3, #24]
 800d000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	ea40 0301 	orr.w	r3, r0, r1
 800d00a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4b8f      	ldr	r3, [pc, #572]	; (800d250 <UART_SetConfig+0x2cc>)
 800d014:	429a      	cmp	r2, r3
 800d016:	d005      	beq.n	800d024 <UART_SetConfig+0xa0>
 800d018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b8d      	ldr	r3, [pc, #564]	; (800d254 <UART_SetConfig+0x2d0>)
 800d020:	429a      	cmp	r2, r3
 800d022:	d104      	bne.n	800d02e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d024:	f7fe f89e 	bl	800b164 <HAL_RCC_GetPCLK2Freq>
 800d028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d02c:	e003      	b.n	800d036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d02e:	f7fe f885 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 800d032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d040:	f040 810c 	bne.w	800d25c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d048:	2200      	movs	r2, #0
 800d04a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d04e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d056:	4622      	mov	r2, r4
 800d058:	462b      	mov	r3, r5
 800d05a:	1891      	adds	r1, r2, r2
 800d05c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d05e:	415b      	adcs	r3, r3
 800d060:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d066:	4621      	mov	r1, r4
 800d068:	eb12 0801 	adds.w	r8, r2, r1
 800d06c:	4629      	mov	r1, r5
 800d06e:	eb43 0901 	adc.w	r9, r3, r1
 800d072:	f04f 0200 	mov.w	r2, #0
 800d076:	f04f 0300 	mov.w	r3, #0
 800d07a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d07e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d086:	4690      	mov	r8, r2
 800d088:	4699      	mov	r9, r3
 800d08a:	4623      	mov	r3, r4
 800d08c:	eb18 0303 	adds.w	r3, r8, r3
 800d090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d094:	462b      	mov	r3, r5
 800d096:	eb49 0303 	adc.w	r3, r9, r3
 800d09a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d0aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d0ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	18db      	adds	r3, r3, r3
 800d0b6:	653b      	str	r3, [r7, #80]	; 0x50
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	eb42 0303 	adc.w	r3, r2, r3
 800d0be:	657b      	str	r3, [r7, #84]	; 0x54
 800d0c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d0c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d0c8:	f7f3 fed6 	bl	8000e78 <__aeabi_uldivmod>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4b61      	ldr	r3, [pc, #388]	; (800d258 <UART_SetConfig+0x2d4>)
 800d0d2:	fba3 2302 	umull	r2, r3, r3, r2
 800d0d6:	095b      	lsrs	r3, r3, #5
 800d0d8:	011c      	lsls	r4, r3, #4
 800d0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d0e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	1891      	adds	r1, r2, r2
 800d0f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800d0f4:	415b      	adcs	r3, r3
 800d0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d0fc:	4641      	mov	r1, r8
 800d0fe:	eb12 0a01 	adds.w	sl, r2, r1
 800d102:	4649      	mov	r1, r9
 800d104:	eb43 0b01 	adc.w	fp, r3, r1
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d11c:	4692      	mov	sl, r2
 800d11e:	469b      	mov	fp, r3
 800d120:	4643      	mov	r3, r8
 800d122:	eb1a 0303 	adds.w	r3, sl, r3
 800d126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d12a:	464b      	mov	r3, r9
 800d12c:	eb4b 0303 	adc.w	r3, fp, r3
 800d130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d148:	460b      	mov	r3, r1
 800d14a:	18db      	adds	r3, r3, r3
 800d14c:	643b      	str	r3, [r7, #64]	; 0x40
 800d14e:	4613      	mov	r3, r2
 800d150:	eb42 0303 	adc.w	r3, r2, r3
 800d154:	647b      	str	r3, [r7, #68]	; 0x44
 800d156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d15a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d15e:	f7f3 fe8b 	bl	8000e78 <__aeabi_uldivmod>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4611      	mov	r1, r2
 800d168:	4b3b      	ldr	r3, [pc, #236]	; (800d258 <UART_SetConfig+0x2d4>)
 800d16a:	fba3 2301 	umull	r2, r3, r3, r1
 800d16e:	095b      	lsrs	r3, r3, #5
 800d170:	2264      	movs	r2, #100	; 0x64
 800d172:	fb02 f303 	mul.w	r3, r2, r3
 800d176:	1acb      	subs	r3, r1, r3
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d17e:	4b36      	ldr	r3, [pc, #216]	; (800d258 <UART_SetConfig+0x2d4>)
 800d180:	fba3 2302 	umull	r2, r3, r3, r2
 800d184:	095b      	lsrs	r3, r3, #5
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d18c:	441c      	add	r4, r3
 800d18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d192:	2200      	movs	r2, #0
 800d194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d19c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d1a0:	4642      	mov	r2, r8
 800d1a2:	464b      	mov	r3, r9
 800d1a4:	1891      	adds	r1, r2, r2
 800d1a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d1a8:	415b      	adcs	r3, r3
 800d1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d1b0:	4641      	mov	r1, r8
 800d1b2:	1851      	adds	r1, r2, r1
 800d1b4:	6339      	str	r1, [r7, #48]	; 0x30
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	414b      	adcs	r3, r1
 800d1ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d1bc:	f04f 0200 	mov.w	r2, #0
 800d1c0:	f04f 0300 	mov.w	r3, #0
 800d1c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d1c8:	4659      	mov	r1, fp
 800d1ca:	00cb      	lsls	r3, r1, #3
 800d1cc:	4651      	mov	r1, sl
 800d1ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1d2:	4651      	mov	r1, sl
 800d1d4:	00ca      	lsls	r2, r1, #3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	4603      	mov	r3, r0
 800d1dc:	4642      	mov	r2, r8
 800d1de:	189b      	adds	r3, r3, r2
 800d1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	eb42 0303 	adc.w	r3, r2, r3
 800d1ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d1fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d204:	460b      	mov	r3, r1
 800d206:	18db      	adds	r3, r3, r3
 800d208:	62bb      	str	r3, [r7, #40]	; 0x28
 800d20a:	4613      	mov	r3, r2
 800d20c:	eb42 0303 	adc.w	r3, r2, r3
 800d210:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d21a:	f7f3 fe2d 	bl	8000e78 <__aeabi_uldivmod>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <UART_SetConfig+0x2d4>)
 800d224:	fba3 1302 	umull	r1, r3, r3, r2
 800d228:	095b      	lsrs	r3, r3, #5
 800d22a:	2164      	movs	r1, #100	; 0x64
 800d22c:	fb01 f303 	mul.w	r3, r1, r3
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	3332      	adds	r3, #50	; 0x32
 800d236:	4a08      	ldr	r2, [pc, #32]	; (800d258 <UART_SetConfig+0x2d4>)
 800d238:	fba2 2303 	umull	r2, r3, r2, r3
 800d23c:	095b      	lsrs	r3, r3, #5
 800d23e:	f003 0207 	and.w	r2, r3, #7
 800d242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4422      	add	r2, r4
 800d24a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d24c:	e105      	b.n	800d45a <UART_SetConfig+0x4d6>
 800d24e:	bf00      	nop
 800d250:	40011000 	.word	0x40011000
 800d254:	40011400 	.word	0x40011400
 800d258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d260:	2200      	movs	r2, #0
 800d262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d26a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d26e:	4642      	mov	r2, r8
 800d270:	464b      	mov	r3, r9
 800d272:	1891      	adds	r1, r2, r2
 800d274:	6239      	str	r1, [r7, #32]
 800d276:	415b      	adcs	r3, r3
 800d278:	627b      	str	r3, [r7, #36]	; 0x24
 800d27a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d27e:	4641      	mov	r1, r8
 800d280:	1854      	adds	r4, r2, r1
 800d282:	4649      	mov	r1, r9
 800d284:	eb43 0501 	adc.w	r5, r3, r1
 800d288:	f04f 0200 	mov.w	r2, #0
 800d28c:	f04f 0300 	mov.w	r3, #0
 800d290:	00eb      	lsls	r3, r5, #3
 800d292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d296:	00e2      	lsls	r2, r4, #3
 800d298:	4614      	mov	r4, r2
 800d29a:	461d      	mov	r5, r3
 800d29c:	4643      	mov	r3, r8
 800d29e:	18e3      	adds	r3, r4, r3
 800d2a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	eb45 0303 	adc.w	r3, r5, r3
 800d2aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d2be:	f04f 0200 	mov.w	r2, #0
 800d2c2:	f04f 0300 	mov.w	r3, #0
 800d2c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	008b      	lsls	r3, r1, #2
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	008a      	lsls	r2, r1, #2
 800d2d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d2dc:	f7f3 fdcc 	bl	8000e78 <__aeabi_uldivmod>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4b60      	ldr	r3, [pc, #384]	; (800d468 <UART_SetConfig+0x4e4>)
 800d2e6:	fba3 2302 	umull	r2, r3, r3, r2
 800d2ea:	095b      	lsrs	r3, r3, #5
 800d2ec:	011c      	lsls	r4, r3, #4
 800d2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d300:	4642      	mov	r2, r8
 800d302:	464b      	mov	r3, r9
 800d304:	1891      	adds	r1, r2, r2
 800d306:	61b9      	str	r1, [r7, #24]
 800d308:	415b      	adcs	r3, r3
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d310:	4641      	mov	r1, r8
 800d312:	1851      	adds	r1, r2, r1
 800d314:	6139      	str	r1, [r7, #16]
 800d316:	4649      	mov	r1, r9
 800d318:	414b      	adcs	r3, r1
 800d31a:	617b      	str	r3, [r7, #20]
 800d31c:	f04f 0200 	mov.w	r2, #0
 800d320:	f04f 0300 	mov.w	r3, #0
 800d324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d328:	4659      	mov	r1, fp
 800d32a:	00cb      	lsls	r3, r1, #3
 800d32c:	4651      	mov	r1, sl
 800d32e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d332:	4651      	mov	r1, sl
 800d334:	00ca      	lsls	r2, r1, #3
 800d336:	4610      	mov	r0, r2
 800d338:	4619      	mov	r1, r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	4642      	mov	r2, r8
 800d33e:	189b      	adds	r3, r3, r2
 800d340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d344:	464b      	mov	r3, r9
 800d346:	460a      	mov	r2, r1
 800d348:	eb42 0303 	adc.w	r3, r2, r3
 800d34c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	67bb      	str	r3, [r7, #120]	; 0x78
 800d35a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d368:	4649      	mov	r1, r9
 800d36a:	008b      	lsls	r3, r1, #2
 800d36c:	4641      	mov	r1, r8
 800d36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d372:	4641      	mov	r1, r8
 800d374:	008a      	lsls	r2, r1, #2
 800d376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d37a:	f7f3 fd7d 	bl	8000e78 <__aeabi_uldivmod>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4b39      	ldr	r3, [pc, #228]	; (800d468 <UART_SetConfig+0x4e4>)
 800d384:	fba3 1302 	umull	r1, r3, r3, r2
 800d388:	095b      	lsrs	r3, r3, #5
 800d38a:	2164      	movs	r1, #100	; 0x64
 800d38c:	fb01 f303 	mul.w	r3, r1, r3
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	3332      	adds	r3, #50	; 0x32
 800d396:	4a34      	ldr	r2, [pc, #208]	; (800d468 <UART_SetConfig+0x4e4>)
 800d398:	fba2 2303 	umull	r2, r3, r2, r3
 800d39c:	095b      	lsrs	r3, r3, #5
 800d39e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3a2:	441c      	add	r4, r3
 800d3a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	673b      	str	r3, [r7, #112]	; 0x70
 800d3ac:	677a      	str	r2, [r7, #116]	; 0x74
 800d3ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d3b2:	4642      	mov	r2, r8
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	1891      	adds	r1, r2, r2
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	415b      	adcs	r3, r3
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3c2:	4641      	mov	r1, r8
 800d3c4:	1851      	adds	r1, r2, r1
 800d3c6:	6039      	str	r1, [r7, #0]
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	414b      	adcs	r3, r1
 800d3cc:	607b      	str	r3, [r7, #4]
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	f04f 0300 	mov.w	r3, #0
 800d3d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d3da:	4659      	mov	r1, fp
 800d3dc:	00cb      	lsls	r3, r1, #3
 800d3de:	4651      	mov	r1, sl
 800d3e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d3e4:	4651      	mov	r1, sl
 800d3e6:	00ca      	lsls	r2, r1, #3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	189b      	adds	r3, r3, r2
 800d3f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	460a      	mov	r2, r1
 800d3f8:	eb42 0303 	adc.w	r3, r2, r3
 800d3fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	663b      	str	r3, [r7, #96]	; 0x60
 800d408:	667a      	str	r2, [r7, #100]	; 0x64
 800d40a:	f04f 0200 	mov.w	r2, #0
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d416:	4649      	mov	r1, r9
 800d418:	008b      	lsls	r3, r1, #2
 800d41a:	4641      	mov	r1, r8
 800d41c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d420:	4641      	mov	r1, r8
 800d422:	008a      	lsls	r2, r1, #2
 800d424:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d428:	f7f3 fd26 	bl	8000e78 <__aeabi_uldivmod>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	4b0d      	ldr	r3, [pc, #52]	; (800d468 <UART_SetConfig+0x4e4>)
 800d432:	fba3 1302 	umull	r1, r3, r3, r2
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	2164      	movs	r1, #100	; 0x64
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	3332      	adds	r3, #50	; 0x32
 800d444:	4a08      	ldr	r2, [pc, #32]	; (800d468 <UART_SetConfig+0x4e4>)
 800d446:	fba2 2303 	umull	r2, r3, r2, r3
 800d44a:	095b      	lsrs	r3, r3, #5
 800d44c:	f003 020f 	and.w	r2, r3, #15
 800d450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4422      	add	r2, r4
 800d458:	609a      	str	r2, [r3, #8]
}
 800d45a:	bf00      	nop
 800d45c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d460:	46bd      	mov	sp, r7
 800d462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d466:	bf00      	nop
 800d468:	51eb851f 	.word	0x51eb851f

0800d46c <__errno>:
 800d46c:	4b01      	ldr	r3, [pc, #4]	; (800d474 <__errno+0x8>)
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	20000060 	.word	0x20000060

0800d478 <__libc_init_array>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	4d0d      	ldr	r5, [pc, #52]	; (800d4b0 <__libc_init_array+0x38>)
 800d47c:	4c0d      	ldr	r4, [pc, #52]	; (800d4b4 <__libc_init_array+0x3c>)
 800d47e:	1b64      	subs	r4, r4, r5
 800d480:	10a4      	asrs	r4, r4, #2
 800d482:	2600      	movs	r6, #0
 800d484:	42a6      	cmp	r6, r4
 800d486:	d109      	bne.n	800d49c <__libc_init_array+0x24>
 800d488:	4d0b      	ldr	r5, [pc, #44]	; (800d4b8 <__libc_init_array+0x40>)
 800d48a:	4c0c      	ldr	r4, [pc, #48]	; (800d4bc <__libc_init_array+0x44>)
 800d48c:	f000 fd14 	bl	800deb8 <_init>
 800d490:	1b64      	subs	r4, r4, r5
 800d492:	10a4      	asrs	r4, r4, #2
 800d494:	2600      	movs	r6, #0
 800d496:	42a6      	cmp	r6, r4
 800d498:	d105      	bne.n	800d4a6 <__libc_init_array+0x2e>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a0:	4798      	blx	r3
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	e7ee      	b.n	800d484 <__libc_init_array+0xc>
 800d4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4aa:	4798      	blx	r3
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	e7f2      	b.n	800d496 <__libc_init_array+0x1e>
 800d4b0:	0800e0a4 	.word	0x0800e0a4
 800d4b4:	0800e0a4 	.word	0x0800e0a4
 800d4b8:	0800e0a4 	.word	0x0800e0a4
 800d4bc:	0800e0a8 	.word	0x0800e0a8

0800d4c0 <memset>:
 800d4c0:	4402      	add	r2, r0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d100      	bne.n	800d4ca <memset+0xa>
 800d4c8:	4770      	bx	lr
 800d4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d4ce:	e7f9      	b.n	800d4c4 <memset+0x4>

0800d4d0 <siprintf>:
 800d4d0:	b40e      	push	{r1, r2, r3}
 800d4d2:	b500      	push	{lr}
 800d4d4:	b09c      	sub	sp, #112	; 0x70
 800d4d6:	ab1d      	add	r3, sp, #116	; 0x74
 800d4d8:	9002      	str	r0, [sp, #8]
 800d4da:	9006      	str	r0, [sp, #24]
 800d4dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d4e0:	4809      	ldr	r0, [pc, #36]	; (800d508 <siprintf+0x38>)
 800d4e2:	9107      	str	r1, [sp, #28]
 800d4e4:	9104      	str	r1, [sp, #16]
 800d4e6:	4909      	ldr	r1, [pc, #36]	; (800d50c <siprintf+0x3c>)
 800d4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ec:	9105      	str	r1, [sp, #20]
 800d4ee:	6800      	ldr	r0, [r0, #0]
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	a902      	add	r1, sp, #8
 800d4f4:	f000 f868 	bl	800d5c8 <_svfiprintf_r>
 800d4f8:	9b02      	ldr	r3, [sp, #8]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	b01c      	add	sp, #112	; 0x70
 800d500:	f85d eb04 	ldr.w	lr, [sp], #4
 800d504:	b003      	add	sp, #12
 800d506:	4770      	bx	lr
 800d508:	20000060 	.word	0x20000060
 800d50c:	ffff0208 	.word	0xffff0208

0800d510 <__ssputs_r>:
 800d510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d514:	688e      	ldr	r6, [r1, #8]
 800d516:	429e      	cmp	r6, r3
 800d518:	4682      	mov	sl, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	4690      	mov	r8, r2
 800d51e:	461f      	mov	r7, r3
 800d520:	d838      	bhi.n	800d594 <__ssputs_r+0x84>
 800d522:	898a      	ldrh	r2, [r1, #12]
 800d524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d528:	d032      	beq.n	800d590 <__ssputs_r+0x80>
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	6909      	ldr	r1, [r1, #16]
 800d52e:	eba5 0901 	sub.w	r9, r5, r1
 800d532:	6965      	ldr	r5, [r4, #20]
 800d534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d53c:	3301      	adds	r3, #1
 800d53e:	444b      	add	r3, r9
 800d540:	106d      	asrs	r5, r5, #1
 800d542:	429d      	cmp	r5, r3
 800d544:	bf38      	it	cc
 800d546:	461d      	movcc	r5, r3
 800d548:	0553      	lsls	r3, r2, #21
 800d54a:	d531      	bpl.n	800d5b0 <__ssputs_r+0xa0>
 800d54c:	4629      	mov	r1, r5
 800d54e:	f000 fb63 	bl	800dc18 <_malloc_r>
 800d552:	4606      	mov	r6, r0
 800d554:	b950      	cbnz	r0, 800d56c <__ssputs_r+0x5c>
 800d556:	230c      	movs	r3, #12
 800d558:	f8ca 3000 	str.w	r3, [sl]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56c:	6921      	ldr	r1, [r4, #16]
 800d56e:	464a      	mov	r2, r9
 800d570:	f000 fabe 	bl	800daf0 <memcpy>
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d57e:	81a3      	strh	r3, [r4, #12]
 800d580:	6126      	str	r6, [r4, #16]
 800d582:	6165      	str	r5, [r4, #20]
 800d584:	444e      	add	r6, r9
 800d586:	eba5 0509 	sub.w	r5, r5, r9
 800d58a:	6026      	str	r6, [r4, #0]
 800d58c:	60a5      	str	r5, [r4, #8]
 800d58e:	463e      	mov	r6, r7
 800d590:	42be      	cmp	r6, r7
 800d592:	d900      	bls.n	800d596 <__ssputs_r+0x86>
 800d594:	463e      	mov	r6, r7
 800d596:	6820      	ldr	r0, [r4, #0]
 800d598:	4632      	mov	r2, r6
 800d59a:	4641      	mov	r1, r8
 800d59c:	f000 fab6 	bl	800db0c <memmove>
 800d5a0:	68a3      	ldr	r3, [r4, #8]
 800d5a2:	1b9b      	subs	r3, r3, r6
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	4433      	add	r3, r6
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	e7db      	b.n	800d568 <__ssputs_r+0x58>
 800d5b0:	462a      	mov	r2, r5
 800d5b2:	f000 fba5 	bl	800dd00 <_realloc_r>
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d1e1      	bne.n	800d580 <__ssputs_r+0x70>
 800d5bc:	6921      	ldr	r1, [r4, #16]
 800d5be:	4650      	mov	r0, sl
 800d5c0:	f000 fabe 	bl	800db40 <_free_r>
 800d5c4:	e7c7      	b.n	800d556 <__ssputs_r+0x46>
	...

0800d5c8 <_svfiprintf_r>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	4698      	mov	r8, r3
 800d5ce:	898b      	ldrh	r3, [r1, #12]
 800d5d0:	061b      	lsls	r3, r3, #24
 800d5d2:	b09d      	sub	sp, #116	; 0x74
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	4614      	mov	r4, r2
 800d5da:	d50e      	bpl.n	800d5fa <_svfiprintf_r+0x32>
 800d5dc:	690b      	ldr	r3, [r1, #16]
 800d5de:	b963      	cbnz	r3, 800d5fa <_svfiprintf_r+0x32>
 800d5e0:	2140      	movs	r1, #64	; 0x40
 800d5e2:	f000 fb19 	bl	800dc18 <_malloc_r>
 800d5e6:	6028      	str	r0, [r5, #0]
 800d5e8:	6128      	str	r0, [r5, #16]
 800d5ea:	b920      	cbnz	r0, 800d5f6 <_svfiprintf_r+0x2e>
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	603b      	str	r3, [r7, #0]
 800d5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f4:	e0d1      	b.n	800d79a <_svfiprintf_r+0x1d2>
 800d5f6:	2340      	movs	r3, #64	; 0x40
 800d5f8:	616b      	str	r3, [r5, #20]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fe:	2320      	movs	r3, #32
 800d600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d604:	f8cd 800c 	str.w	r8, [sp, #12]
 800d608:	2330      	movs	r3, #48	; 0x30
 800d60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d7b4 <_svfiprintf_r+0x1ec>
 800d60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d612:	f04f 0901 	mov.w	r9, #1
 800d616:	4623      	mov	r3, r4
 800d618:	469a      	mov	sl, r3
 800d61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61e:	b10a      	cbz	r2, 800d624 <_svfiprintf_r+0x5c>
 800d620:	2a25      	cmp	r2, #37	; 0x25
 800d622:	d1f9      	bne.n	800d618 <_svfiprintf_r+0x50>
 800d624:	ebba 0b04 	subs.w	fp, sl, r4
 800d628:	d00b      	beq.n	800d642 <_svfiprintf_r+0x7a>
 800d62a:	465b      	mov	r3, fp
 800d62c:	4622      	mov	r2, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	4638      	mov	r0, r7
 800d632:	f7ff ff6d 	bl	800d510 <__ssputs_r>
 800d636:	3001      	adds	r0, #1
 800d638:	f000 80aa 	beq.w	800d790 <_svfiprintf_r+0x1c8>
 800d63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d63e:	445a      	add	r2, fp
 800d640:	9209      	str	r2, [sp, #36]	; 0x24
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 80a2 	beq.w	800d790 <_svfiprintf_r+0x1c8>
 800d64c:	2300      	movs	r3, #0
 800d64e:	f04f 32ff 	mov.w	r2, #4294967295
 800d652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d656:	f10a 0a01 	add.w	sl, sl, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9307      	str	r3, [sp, #28]
 800d65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d662:	931a      	str	r3, [sp, #104]	; 0x68
 800d664:	4654      	mov	r4, sl
 800d666:	2205      	movs	r2, #5
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	4851      	ldr	r0, [pc, #324]	; (800d7b4 <_svfiprintf_r+0x1ec>)
 800d66e:	f7f2 fdb7 	bl	80001e0 <memchr>
 800d672:	9a04      	ldr	r2, [sp, #16]
 800d674:	b9d8      	cbnz	r0, 800d6ae <_svfiprintf_r+0xe6>
 800d676:	06d0      	lsls	r0, r2, #27
 800d678:	bf44      	itt	mi
 800d67a:	2320      	movmi	r3, #32
 800d67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d680:	0711      	lsls	r1, r2, #28
 800d682:	bf44      	itt	mi
 800d684:	232b      	movmi	r3, #43	; 0x2b
 800d686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d68a:	f89a 3000 	ldrb.w	r3, [sl]
 800d68e:	2b2a      	cmp	r3, #42	; 0x2a
 800d690:	d015      	beq.n	800d6be <_svfiprintf_r+0xf6>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	4654      	mov	r4, sl
 800d696:	2000      	movs	r0, #0
 800d698:	f04f 0c0a 	mov.w	ip, #10
 800d69c:	4621      	mov	r1, r4
 800d69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a2:	3b30      	subs	r3, #48	; 0x30
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d94e      	bls.n	800d746 <_svfiprintf_r+0x17e>
 800d6a8:	b1b0      	cbz	r0, 800d6d8 <_svfiprintf_r+0x110>
 800d6aa:	9207      	str	r2, [sp, #28]
 800d6ac:	e014      	b.n	800d6d8 <_svfiprintf_r+0x110>
 800d6ae:	eba0 0308 	sub.w	r3, r0, r8
 800d6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	46a2      	mov	sl, r4
 800d6bc:	e7d2      	b.n	800d664 <_svfiprintf_r+0x9c>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d19      	adds	r1, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9103      	str	r1, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfbb      	ittet	lt
 800d6ca:	425b      	neglt	r3, r3
 800d6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6d0:	9307      	strge	r3, [sp, #28]
 800d6d2:	9307      	strlt	r3, [sp, #28]
 800d6d4:	bfb8      	it	lt
 800d6d6:	9204      	strlt	r2, [sp, #16]
 800d6d8:	7823      	ldrb	r3, [r4, #0]
 800d6da:	2b2e      	cmp	r3, #46	; 0x2e
 800d6dc:	d10c      	bne.n	800d6f8 <_svfiprintf_r+0x130>
 800d6de:	7863      	ldrb	r3, [r4, #1]
 800d6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6e2:	d135      	bne.n	800d750 <_svfiprintf_r+0x188>
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	1d1a      	adds	r2, r3, #4
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	9203      	str	r2, [sp, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bfb8      	it	lt
 800d6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6f4:	3402      	adds	r4, #2
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7c4 <_svfiprintf_r+0x1fc>
 800d6fc:	7821      	ldrb	r1, [r4, #0]
 800d6fe:	2203      	movs	r2, #3
 800d700:	4650      	mov	r0, sl
 800d702:	f7f2 fd6d 	bl	80001e0 <memchr>
 800d706:	b140      	cbz	r0, 800d71a <_svfiprintf_r+0x152>
 800d708:	2340      	movs	r3, #64	; 0x40
 800d70a:	eba0 000a 	sub.w	r0, r0, sl
 800d70e:	fa03 f000 	lsl.w	r0, r3, r0
 800d712:	9b04      	ldr	r3, [sp, #16]
 800d714:	4303      	orrs	r3, r0
 800d716:	3401      	adds	r4, #1
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71e:	4826      	ldr	r0, [pc, #152]	; (800d7b8 <_svfiprintf_r+0x1f0>)
 800d720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d724:	2206      	movs	r2, #6
 800d726:	f7f2 fd5b 	bl	80001e0 <memchr>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d038      	beq.n	800d7a0 <_svfiprintf_r+0x1d8>
 800d72e:	4b23      	ldr	r3, [pc, #140]	; (800d7bc <_svfiprintf_r+0x1f4>)
 800d730:	bb1b      	cbnz	r3, 800d77a <_svfiprintf_r+0x1b2>
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	3307      	adds	r3, #7
 800d736:	f023 0307 	bic.w	r3, r3, #7
 800d73a:	3308      	adds	r3, #8
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d740:	4433      	add	r3, r6
 800d742:	9309      	str	r3, [sp, #36]	; 0x24
 800d744:	e767      	b.n	800d616 <_svfiprintf_r+0x4e>
 800d746:	fb0c 3202 	mla	r2, ip, r2, r3
 800d74a:	460c      	mov	r4, r1
 800d74c:	2001      	movs	r0, #1
 800d74e:	e7a5      	b.n	800d69c <_svfiprintf_r+0xd4>
 800d750:	2300      	movs	r3, #0
 800d752:	3401      	adds	r4, #1
 800d754:	9305      	str	r3, [sp, #20]
 800d756:	4619      	mov	r1, r3
 800d758:	f04f 0c0a 	mov.w	ip, #10
 800d75c:	4620      	mov	r0, r4
 800d75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d762:	3a30      	subs	r2, #48	; 0x30
 800d764:	2a09      	cmp	r2, #9
 800d766:	d903      	bls.n	800d770 <_svfiprintf_r+0x1a8>
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d0c5      	beq.n	800d6f8 <_svfiprintf_r+0x130>
 800d76c:	9105      	str	r1, [sp, #20]
 800d76e:	e7c3      	b.n	800d6f8 <_svfiprintf_r+0x130>
 800d770:	fb0c 2101 	mla	r1, ip, r1, r2
 800d774:	4604      	mov	r4, r0
 800d776:	2301      	movs	r3, #1
 800d778:	e7f0      	b.n	800d75c <_svfiprintf_r+0x194>
 800d77a:	ab03      	add	r3, sp, #12
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	462a      	mov	r2, r5
 800d780:	4b0f      	ldr	r3, [pc, #60]	; (800d7c0 <_svfiprintf_r+0x1f8>)
 800d782:	a904      	add	r1, sp, #16
 800d784:	4638      	mov	r0, r7
 800d786:	f3af 8000 	nop.w
 800d78a:	1c42      	adds	r2, r0, #1
 800d78c:	4606      	mov	r6, r0
 800d78e:	d1d6      	bne.n	800d73e <_svfiprintf_r+0x176>
 800d790:	89ab      	ldrh	r3, [r5, #12]
 800d792:	065b      	lsls	r3, r3, #25
 800d794:	f53f af2c 	bmi.w	800d5f0 <_svfiprintf_r+0x28>
 800d798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d79a:	b01d      	add	sp, #116	; 0x74
 800d79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a0:	ab03      	add	r3, sp, #12
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	462a      	mov	r2, r5
 800d7a6:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <_svfiprintf_r+0x1f8>)
 800d7a8:	a904      	add	r1, sp, #16
 800d7aa:	4638      	mov	r0, r7
 800d7ac:	f000 f87a 	bl	800d8a4 <_printf_i>
 800d7b0:	e7eb      	b.n	800d78a <_svfiprintf_r+0x1c2>
 800d7b2:	bf00      	nop
 800d7b4:	0800e068 	.word	0x0800e068
 800d7b8:	0800e072 	.word	0x0800e072
 800d7bc:	00000000 	.word	0x00000000
 800d7c0:	0800d511 	.word	0x0800d511
 800d7c4:	0800e06e 	.word	0x0800e06e

0800d7c8 <_printf_common>:
 800d7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	4699      	mov	r9, r3
 800d7d0:	688a      	ldr	r2, [r1, #8]
 800d7d2:	690b      	ldr	r3, [r1, #16]
 800d7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	bfb8      	it	lt
 800d7dc:	4613      	movlt	r3, r2
 800d7de:	6033      	str	r3, [r6, #0]
 800d7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	b10a      	cbz	r2, 800d7ee <_printf_common+0x26>
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	6033      	str	r3, [r6, #0]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	0699      	lsls	r1, r3, #26
 800d7f2:	bf42      	ittt	mi
 800d7f4:	6833      	ldrmi	r3, [r6, #0]
 800d7f6:	3302      	addmi	r3, #2
 800d7f8:	6033      	strmi	r3, [r6, #0]
 800d7fa:	6825      	ldr	r5, [r4, #0]
 800d7fc:	f015 0506 	ands.w	r5, r5, #6
 800d800:	d106      	bne.n	800d810 <_printf_common+0x48>
 800d802:	f104 0a19 	add.w	sl, r4, #25
 800d806:	68e3      	ldr	r3, [r4, #12]
 800d808:	6832      	ldr	r2, [r6, #0]
 800d80a:	1a9b      	subs	r3, r3, r2
 800d80c:	42ab      	cmp	r3, r5
 800d80e:	dc26      	bgt.n	800d85e <_printf_common+0x96>
 800d810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d814:	1e13      	subs	r3, r2, #0
 800d816:	6822      	ldr	r2, [r4, #0]
 800d818:	bf18      	it	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	0692      	lsls	r2, r2, #26
 800d81e:	d42b      	bmi.n	800d878 <_printf_common+0xb0>
 800d820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d824:	4649      	mov	r1, r9
 800d826:	4638      	mov	r0, r7
 800d828:	47c0      	blx	r8
 800d82a:	3001      	adds	r0, #1
 800d82c:	d01e      	beq.n	800d86c <_printf_common+0xa4>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	68e5      	ldr	r5, [r4, #12]
 800d832:	6832      	ldr	r2, [r6, #0]
 800d834:	f003 0306 	and.w	r3, r3, #6
 800d838:	2b04      	cmp	r3, #4
 800d83a:	bf08      	it	eq
 800d83c:	1aad      	subeq	r5, r5, r2
 800d83e:	68a3      	ldr	r3, [r4, #8]
 800d840:	6922      	ldr	r2, [r4, #16]
 800d842:	bf0c      	ite	eq
 800d844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d848:	2500      	movne	r5, #0
 800d84a:	4293      	cmp	r3, r2
 800d84c:	bfc4      	itt	gt
 800d84e:	1a9b      	subgt	r3, r3, r2
 800d850:	18ed      	addgt	r5, r5, r3
 800d852:	2600      	movs	r6, #0
 800d854:	341a      	adds	r4, #26
 800d856:	42b5      	cmp	r5, r6
 800d858:	d11a      	bne.n	800d890 <_printf_common+0xc8>
 800d85a:	2000      	movs	r0, #0
 800d85c:	e008      	b.n	800d870 <_printf_common+0xa8>
 800d85e:	2301      	movs	r3, #1
 800d860:	4652      	mov	r2, sl
 800d862:	4649      	mov	r1, r9
 800d864:	4638      	mov	r0, r7
 800d866:	47c0      	blx	r8
 800d868:	3001      	adds	r0, #1
 800d86a:	d103      	bne.n	800d874 <_printf_common+0xac>
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d874:	3501      	adds	r5, #1
 800d876:	e7c6      	b.n	800d806 <_printf_common+0x3e>
 800d878:	18e1      	adds	r1, r4, r3
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	2030      	movs	r0, #48	; 0x30
 800d87e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d882:	4422      	add	r2, r4
 800d884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d88c:	3302      	adds	r3, #2
 800d88e:	e7c7      	b.n	800d820 <_printf_common+0x58>
 800d890:	2301      	movs	r3, #1
 800d892:	4622      	mov	r2, r4
 800d894:	4649      	mov	r1, r9
 800d896:	4638      	mov	r0, r7
 800d898:	47c0      	blx	r8
 800d89a:	3001      	adds	r0, #1
 800d89c:	d0e6      	beq.n	800d86c <_printf_common+0xa4>
 800d89e:	3601      	adds	r6, #1
 800d8a0:	e7d9      	b.n	800d856 <_printf_common+0x8e>
	...

0800d8a4 <_printf_i>:
 800d8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a8:	7e0f      	ldrb	r7, [r1, #24]
 800d8aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8ac:	2f78      	cmp	r7, #120	; 0x78
 800d8ae:	4691      	mov	r9, r2
 800d8b0:	4680      	mov	r8, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	469a      	mov	sl, r3
 800d8b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8ba:	d807      	bhi.n	800d8cc <_printf_i+0x28>
 800d8bc:	2f62      	cmp	r7, #98	; 0x62
 800d8be:	d80a      	bhi.n	800d8d6 <_printf_i+0x32>
 800d8c0:	2f00      	cmp	r7, #0
 800d8c2:	f000 80d8 	beq.w	800da76 <_printf_i+0x1d2>
 800d8c6:	2f58      	cmp	r7, #88	; 0x58
 800d8c8:	f000 80a3 	beq.w	800da12 <_printf_i+0x16e>
 800d8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8d4:	e03a      	b.n	800d94c <_printf_i+0xa8>
 800d8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8da:	2b15      	cmp	r3, #21
 800d8dc:	d8f6      	bhi.n	800d8cc <_printf_i+0x28>
 800d8de:	a101      	add	r1, pc, #4	; (adr r1, 800d8e4 <_printf_i+0x40>)
 800d8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8e4:	0800d93d 	.word	0x0800d93d
 800d8e8:	0800d951 	.word	0x0800d951
 800d8ec:	0800d8cd 	.word	0x0800d8cd
 800d8f0:	0800d8cd 	.word	0x0800d8cd
 800d8f4:	0800d8cd 	.word	0x0800d8cd
 800d8f8:	0800d8cd 	.word	0x0800d8cd
 800d8fc:	0800d951 	.word	0x0800d951
 800d900:	0800d8cd 	.word	0x0800d8cd
 800d904:	0800d8cd 	.word	0x0800d8cd
 800d908:	0800d8cd 	.word	0x0800d8cd
 800d90c:	0800d8cd 	.word	0x0800d8cd
 800d910:	0800da5d 	.word	0x0800da5d
 800d914:	0800d981 	.word	0x0800d981
 800d918:	0800da3f 	.word	0x0800da3f
 800d91c:	0800d8cd 	.word	0x0800d8cd
 800d920:	0800d8cd 	.word	0x0800d8cd
 800d924:	0800da7f 	.word	0x0800da7f
 800d928:	0800d8cd 	.word	0x0800d8cd
 800d92c:	0800d981 	.word	0x0800d981
 800d930:	0800d8cd 	.word	0x0800d8cd
 800d934:	0800d8cd 	.word	0x0800d8cd
 800d938:	0800da47 	.word	0x0800da47
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	602a      	str	r2, [r5, #0]
 800d944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d94c:	2301      	movs	r3, #1
 800d94e:	e0a3      	b.n	800da98 <_printf_i+0x1f4>
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	6829      	ldr	r1, [r5, #0]
 800d954:	0606      	lsls	r6, r0, #24
 800d956:	f101 0304 	add.w	r3, r1, #4
 800d95a:	d50a      	bpl.n	800d972 <_printf_i+0xce>
 800d95c:	680e      	ldr	r6, [r1, #0]
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	2e00      	cmp	r6, #0
 800d962:	da03      	bge.n	800d96c <_printf_i+0xc8>
 800d964:	232d      	movs	r3, #45	; 0x2d
 800d966:	4276      	negs	r6, r6
 800d968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d96c:	485e      	ldr	r0, [pc, #376]	; (800dae8 <_printf_i+0x244>)
 800d96e:	230a      	movs	r3, #10
 800d970:	e019      	b.n	800d9a6 <_printf_i+0x102>
 800d972:	680e      	ldr	r6, [r1, #0]
 800d974:	602b      	str	r3, [r5, #0]
 800d976:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d97a:	bf18      	it	ne
 800d97c:	b236      	sxthne	r6, r6
 800d97e:	e7ef      	b.n	800d960 <_printf_i+0xbc>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	6820      	ldr	r0, [r4, #0]
 800d984:	1d19      	adds	r1, r3, #4
 800d986:	6029      	str	r1, [r5, #0]
 800d988:	0601      	lsls	r1, r0, #24
 800d98a:	d501      	bpl.n	800d990 <_printf_i+0xec>
 800d98c:	681e      	ldr	r6, [r3, #0]
 800d98e:	e002      	b.n	800d996 <_printf_i+0xf2>
 800d990:	0646      	lsls	r6, r0, #25
 800d992:	d5fb      	bpl.n	800d98c <_printf_i+0xe8>
 800d994:	881e      	ldrh	r6, [r3, #0]
 800d996:	4854      	ldr	r0, [pc, #336]	; (800dae8 <_printf_i+0x244>)
 800d998:	2f6f      	cmp	r7, #111	; 0x6f
 800d99a:	bf0c      	ite	eq
 800d99c:	2308      	moveq	r3, #8
 800d99e:	230a      	movne	r3, #10
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9a6:	6865      	ldr	r5, [r4, #4]
 800d9a8:	60a5      	str	r5, [r4, #8]
 800d9aa:	2d00      	cmp	r5, #0
 800d9ac:	bfa2      	ittt	ge
 800d9ae:	6821      	ldrge	r1, [r4, #0]
 800d9b0:	f021 0104 	bicge.w	r1, r1, #4
 800d9b4:	6021      	strge	r1, [r4, #0]
 800d9b6:	b90e      	cbnz	r6, 800d9bc <_printf_i+0x118>
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d04d      	beq.n	800da58 <_printf_i+0x1b4>
 800d9bc:	4615      	mov	r5, r2
 800d9be:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9c2:	fb03 6711 	mls	r7, r3, r1, r6
 800d9c6:	5dc7      	ldrb	r7, [r0, r7]
 800d9c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9cc:	4637      	mov	r7, r6
 800d9ce:	42bb      	cmp	r3, r7
 800d9d0:	460e      	mov	r6, r1
 800d9d2:	d9f4      	bls.n	800d9be <_printf_i+0x11a>
 800d9d4:	2b08      	cmp	r3, #8
 800d9d6:	d10b      	bne.n	800d9f0 <_printf_i+0x14c>
 800d9d8:	6823      	ldr	r3, [r4, #0]
 800d9da:	07de      	lsls	r6, r3, #31
 800d9dc:	d508      	bpl.n	800d9f0 <_printf_i+0x14c>
 800d9de:	6923      	ldr	r3, [r4, #16]
 800d9e0:	6861      	ldr	r1, [r4, #4]
 800d9e2:	4299      	cmp	r1, r3
 800d9e4:	bfde      	ittt	le
 800d9e6:	2330      	movle	r3, #48	; 0x30
 800d9e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9f0:	1b52      	subs	r2, r2, r5
 800d9f2:	6122      	str	r2, [r4, #16]
 800d9f4:	f8cd a000 	str.w	sl, [sp]
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	aa03      	add	r2, sp, #12
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	4640      	mov	r0, r8
 800da00:	f7ff fee2 	bl	800d7c8 <_printf_common>
 800da04:	3001      	adds	r0, #1
 800da06:	d14c      	bne.n	800daa2 <_printf_i+0x1fe>
 800da08:	f04f 30ff 	mov.w	r0, #4294967295
 800da0c:	b004      	add	sp, #16
 800da0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da12:	4835      	ldr	r0, [pc, #212]	; (800dae8 <_printf_i+0x244>)
 800da14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da18:	6829      	ldr	r1, [r5, #0]
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800da20:	6029      	str	r1, [r5, #0]
 800da22:	061d      	lsls	r5, r3, #24
 800da24:	d514      	bpl.n	800da50 <_printf_i+0x1ac>
 800da26:	07df      	lsls	r7, r3, #31
 800da28:	bf44      	itt	mi
 800da2a:	f043 0320 	orrmi.w	r3, r3, #32
 800da2e:	6023      	strmi	r3, [r4, #0]
 800da30:	b91e      	cbnz	r6, 800da3a <_printf_i+0x196>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	f023 0320 	bic.w	r3, r3, #32
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	2310      	movs	r3, #16
 800da3c:	e7b0      	b.n	800d9a0 <_printf_i+0xfc>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	f043 0320 	orr.w	r3, r3, #32
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	2378      	movs	r3, #120	; 0x78
 800da48:	4828      	ldr	r0, [pc, #160]	; (800daec <_printf_i+0x248>)
 800da4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da4e:	e7e3      	b.n	800da18 <_printf_i+0x174>
 800da50:	0659      	lsls	r1, r3, #25
 800da52:	bf48      	it	mi
 800da54:	b2b6      	uxthmi	r6, r6
 800da56:	e7e6      	b.n	800da26 <_printf_i+0x182>
 800da58:	4615      	mov	r5, r2
 800da5a:	e7bb      	b.n	800d9d4 <_printf_i+0x130>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	6826      	ldr	r6, [r4, #0]
 800da60:	6961      	ldr	r1, [r4, #20]
 800da62:	1d18      	adds	r0, r3, #4
 800da64:	6028      	str	r0, [r5, #0]
 800da66:	0635      	lsls	r5, r6, #24
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	d501      	bpl.n	800da70 <_printf_i+0x1cc>
 800da6c:	6019      	str	r1, [r3, #0]
 800da6e:	e002      	b.n	800da76 <_printf_i+0x1d2>
 800da70:	0670      	lsls	r0, r6, #25
 800da72:	d5fb      	bpl.n	800da6c <_printf_i+0x1c8>
 800da74:	8019      	strh	r1, [r3, #0]
 800da76:	2300      	movs	r3, #0
 800da78:	6123      	str	r3, [r4, #16]
 800da7a:	4615      	mov	r5, r2
 800da7c:	e7ba      	b.n	800d9f4 <_printf_i+0x150>
 800da7e:	682b      	ldr	r3, [r5, #0]
 800da80:	1d1a      	adds	r2, r3, #4
 800da82:	602a      	str	r2, [r5, #0]
 800da84:	681d      	ldr	r5, [r3, #0]
 800da86:	6862      	ldr	r2, [r4, #4]
 800da88:	2100      	movs	r1, #0
 800da8a:	4628      	mov	r0, r5
 800da8c:	f7f2 fba8 	bl	80001e0 <memchr>
 800da90:	b108      	cbz	r0, 800da96 <_printf_i+0x1f2>
 800da92:	1b40      	subs	r0, r0, r5
 800da94:	6060      	str	r0, [r4, #4]
 800da96:	6863      	ldr	r3, [r4, #4]
 800da98:	6123      	str	r3, [r4, #16]
 800da9a:	2300      	movs	r3, #0
 800da9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daa0:	e7a8      	b.n	800d9f4 <_printf_i+0x150>
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	462a      	mov	r2, r5
 800daa6:	4649      	mov	r1, r9
 800daa8:	4640      	mov	r0, r8
 800daaa:	47d0      	blx	sl
 800daac:	3001      	adds	r0, #1
 800daae:	d0ab      	beq.n	800da08 <_printf_i+0x164>
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	079b      	lsls	r3, r3, #30
 800dab4:	d413      	bmi.n	800dade <_printf_i+0x23a>
 800dab6:	68e0      	ldr	r0, [r4, #12]
 800dab8:	9b03      	ldr	r3, [sp, #12]
 800daba:	4298      	cmp	r0, r3
 800dabc:	bfb8      	it	lt
 800dabe:	4618      	movlt	r0, r3
 800dac0:	e7a4      	b.n	800da0c <_printf_i+0x168>
 800dac2:	2301      	movs	r3, #1
 800dac4:	4632      	mov	r2, r6
 800dac6:	4649      	mov	r1, r9
 800dac8:	4640      	mov	r0, r8
 800daca:	47d0      	blx	sl
 800dacc:	3001      	adds	r0, #1
 800dace:	d09b      	beq.n	800da08 <_printf_i+0x164>
 800dad0:	3501      	adds	r5, #1
 800dad2:	68e3      	ldr	r3, [r4, #12]
 800dad4:	9903      	ldr	r1, [sp, #12]
 800dad6:	1a5b      	subs	r3, r3, r1
 800dad8:	42ab      	cmp	r3, r5
 800dada:	dcf2      	bgt.n	800dac2 <_printf_i+0x21e>
 800dadc:	e7eb      	b.n	800dab6 <_printf_i+0x212>
 800dade:	2500      	movs	r5, #0
 800dae0:	f104 0619 	add.w	r6, r4, #25
 800dae4:	e7f5      	b.n	800dad2 <_printf_i+0x22e>
 800dae6:	bf00      	nop
 800dae8:	0800e079 	.word	0x0800e079
 800daec:	0800e08a 	.word	0x0800e08a

0800daf0 <memcpy>:
 800daf0:	440a      	add	r2, r1
 800daf2:	4291      	cmp	r1, r2
 800daf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800daf8:	d100      	bne.n	800dafc <memcpy+0xc>
 800dafa:	4770      	bx	lr
 800dafc:	b510      	push	{r4, lr}
 800dafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db06:	4291      	cmp	r1, r2
 800db08:	d1f9      	bne.n	800dafe <memcpy+0xe>
 800db0a:	bd10      	pop	{r4, pc}

0800db0c <memmove>:
 800db0c:	4288      	cmp	r0, r1
 800db0e:	b510      	push	{r4, lr}
 800db10:	eb01 0402 	add.w	r4, r1, r2
 800db14:	d902      	bls.n	800db1c <memmove+0x10>
 800db16:	4284      	cmp	r4, r0
 800db18:	4623      	mov	r3, r4
 800db1a:	d807      	bhi.n	800db2c <memmove+0x20>
 800db1c:	1e43      	subs	r3, r0, #1
 800db1e:	42a1      	cmp	r1, r4
 800db20:	d008      	beq.n	800db34 <memmove+0x28>
 800db22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db2a:	e7f8      	b.n	800db1e <memmove+0x12>
 800db2c:	4402      	add	r2, r0
 800db2e:	4601      	mov	r1, r0
 800db30:	428a      	cmp	r2, r1
 800db32:	d100      	bne.n	800db36 <memmove+0x2a>
 800db34:	bd10      	pop	{r4, pc}
 800db36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db3e:	e7f7      	b.n	800db30 <memmove+0x24>

0800db40 <_free_r>:
 800db40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db42:	2900      	cmp	r1, #0
 800db44:	d044      	beq.n	800dbd0 <_free_r+0x90>
 800db46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db4a:	9001      	str	r0, [sp, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f1a1 0404 	sub.w	r4, r1, #4
 800db52:	bfb8      	it	lt
 800db54:	18e4      	addlt	r4, r4, r3
 800db56:	f000 f913 	bl	800dd80 <__malloc_lock>
 800db5a:	4a1e      	ldr	r2, [pc, #120]	; (800dbd4 <_free_r+0x94>)
 800db5c:	9801      	ldr	r0, [sp, #4]
 800db5e:	6813      	ldr	r3, [r2, #0]
 800db60:	b933      	cbnz	r3, 800db70 <_free_r+0x30>
 800db62:	6063      	str	r3, [r4, #4]
 800db64:	6014      	str	r4, [r2, #0]
 800db66:	b003      	add	sp, #12
 800db68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db6c:	f000 b90e 	b.w	800dd8c <__malloc_unlock>
 800db70:	42a3      	cmp	r3, r4
 800db72:	d908      	bls.n	800db86 <_free_r+0x46>
 800db74:	6825      	ldr	r5, [r4, #0]
 800db76:	1961      	adds	r1, r4, r5
 800db78:	428b      	cmp	r3, r1
 800db7a:	bf01      	itttt	eq
 800db7c:	6819      	ldreq	r1, [r3, #0]
 800db7e:	685b      	ldreq	r3, [r3, #4]
 800db80:	1949      	addeq	r1, r1, r5
 800db82:	6021      	streq	r1, [r4, #0]
 800db84:	e7ed      	b.n	800db62 <_free_r+0x22>
 800db86:	461a      	mov	r2, r3
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	b10b      	cbz	r3, 800db90 <_free_r+0x50>
 800db8c:	42a3      	cmp	r3, r4
 800db8e:	d9fa      	bls.n	800db86 <_free_r+0x46>
 800db90:	6811      	ldr	r1, [r2, #0]
 800db92:	1855      	adds	r5, r2, r1
 800db94:	42a5      	cmp	r5, r4
 800db96:	d10b      	bne.n	800dbb0 <_free_r+0x70>
 800db98:	6824      	ldr	r4, [r4, #0]
 800db9a:	4421      	add	r1, r4
 800db9c:	1854      	adds	r4, r2, r1
 800db9e:	42a3      	cmp	r3, r4
 800dba0:	6011      	str	r1, [r2, #0]
 800dba2:	d1e0      	bne.n	800db66 <_free_r+0x26>
 800dba4:	681c      	ldr	r4, [r3, #0]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	6053      	str	r3, [r2, #4]
 800dbaa:	4421      	add	r1, r4
 800dbac:	6011      	str	r1, [r2, #0]
 800dbae:	e7da      	b.n	800db66 <_free_r+0x26>
 800dbb0:	d902      	bls.n	800dbb8 <_free_r+0x78>
 800dbb2:	230c      	movs	r3, #12
 800dbb4:	6003      	str	r3, [r0, #0]
 800dbb6:	e7d6      	b.n	800db66 <_free_r+0x26>
 800dbb8:	6825      	ldr	r5, [r4, #0]
 800dbba:	1961      	adds	r1, r4, r5
 800dbbc:	428b      	cmp	r3, r1
 800dbbe:	bf04      	itt	eq
 800dbc0:	6819      	ldreq	r1, [r3, #0]
 800dbc2:	685b      	ldreq	r3, [r3, #4]
 800dbc4:	6063      	str	r3, [r4, #4]
 800dbc6:	bf04      	itt	eq
 800dbc8:	1949      	addeq	r1, r1, r5
 800dbca:	6021      	streq	r1, [r4, #0]
 800dbcc:	6054      	str	r4, [r2, #4]
 800dbce:	e7ca      	b.n	800db66 <_free_r+0x26>
 800dbd0:	b003      	add	sp, #12
 800dbd2:	bd30      	pop	{r4, r5, pc}
 800dbd4:	2000074c 	.word	0x2000074c

0800dbd8 <sbrk_aligned>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	4e0e      	ldr	r6, [pc, #56]	; (800dc14 <sbrk_aligned+0x3c>)
 800dbdc:	460c      	mov	r4, r1
 800dbde:	6831      	ldr	r1, [r6, #0]
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	b911      	cbnz	r1, 800dbea <sbrk_aligned+0x12>
 800dbe4:	f000 f8bc 	bl	800dd60 <_sbrk_r>
 800dbe8:	6030      	str	r0, [r6, #0]
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f000 f8b7 	bl	800dd60 <_sbrk_r>
 800dbf2:	1c43      	adds	r3, r0, #1
 800dbf4:	d00a      	beq.n	800dc0c <sbrk_aligned+0x34>
 800dbf6:	1cc4      	adds	r4, r0, #3
 800dbf8:	f024 0403 	bic.w	r4, r4, #3
 800dbfc:	42a0      	cmp	r0, r4
 800dbfe:	d007      	beq.n	800dc10 <sbrk_aligned+0x38>
 800dc00:	1a21      	subs	r1, r4, r0
 800dc02:	4628      	mov	r0, r5
 800dc04:	f000 f8ac 	bl	800dd60 <_sbrk_r>
 800dc08:	3001      	adds	r0, #1
 800dc0a:	d101      	bne.n	800dc10 <sbrk_aligned+0x38>
 800dc0c:	f04f 34ff 	mov.w	r4, #4294967295
 800dc10:	4620      	mov	r0, r4
 800dc12:	bd70      	pop	{r4, r5, r6, pc}
 800dc14:	20000750 	.word	0x20000750

0800dc18 <_malloc_r>:
 800dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1c:	1ccd      	adds	r5, r1, #3
 800dc1e:	f025 0503 	bic.w	r5, r5, #3
 800dc22:	3508      	adds	r5, #8
 800dc24:	2d0c      	cmp	r5, #12
 800dc26:	bf38      	it	cc
 800dc28:	250c      	movcc	r5, #12
 800dc2a:	2d00      	cmp	r5, #0
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	db01      	blt.n	800dc34 <_malloc_r+0x1c>
 800dc30:	42a9      	cmp	r1, r5
 800dc32:	d905      	bls.n	800dc40 <_malloc_r+0x28>
 800dc34:	230c      	movs	r3, #12
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	2600      	movs	r6, #0
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	4e2e      	ldr	r6, [pc, #184]	; (800dcfc <_malloc_r+0xe4>)
 800dc42:	f000 f89d 	bl	800dd80 <__malloc_lock>
 800dc46:	6833      	ldr	r3, [r6, #0]
 800dc48:	461c      	mov	r4, r3
 800dc4a:	bb34      	cbnz	r4, 800dc9a <_malloc_r+0x82>
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4638      	mov	r0, r7
 800dc50:	f7ff ffc2 	bl	800dbd8 <sbrk_aligned>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	4604      	mov	r4, r0
 800dc58:	d14d      	bne.n	800dcf6 <_malloc_r+0xde>
 800dc5a:	6834      	ldr	r4, [r6, #0]
 800dc5c:	4626      	mov	r6, r4
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	d140      	bne.n	800dce4 <_malloc_r+0xcc>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	4631      	mov	r1, r6
 800dc66:	4638      	mov	r0, r7
 800dc68:	eb04 0803 	add.w	r8, r4, r3
 800dc6c:	f000 f878 	bl	800dd60 <_sbrk_r>
 800dc70:	4580      	cmp	r8, r0
 800dc72:	d13a      	bne.n	800dcea <_malloc_r+0xd2>
 800dc74:	6821      	ldr	r1, [r4, #0]
 800dc76:	3503      	adds	r5, #3
 800dc78:	1a6d      	subs	r5, r5, r1
 800dc7a:	f025 0503 	bic.w	r5, r5, #3
 800dc7e:	3508      	adds	r5, #8
 800dc80:	2d0c      	cmp	r5, #12
 800dc82:	bf38      	it	cc
 800dc84:	250c      	movcc	r5, #12
 800dc86:	4629      	mov	r1, r5
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f7ff ffa5 	bl	800dbd8 <sbrk_aligned>
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d02b      	beq.n	800dcea <_malloc_r+0xd2>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	442b      	add	r3, r5
 800dc96:	6023      	str	r3, [r4, #0]
 800dc98:	e00e      	b.n	800dcb8 <_malloc_r+0xa0>
 800dc9a:	6822      	ldr	r2, [r4, #0]
 800dc9c:	1b52      	subs	r2, r2, r5
 800dc9e:	d41e      	bmi.n	800dcde <_malloc_r+0xc6>
 800dca0:	2a0b      	cmp	r2, #11
 800dca2:	d916      	bls.n	800dcd2 <_malloc_r+0xba>
 800dca4:	1961      	adds	r1, r4, r5
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	6025      	str	r5, [r4, #0]
 800dcaa:	bf18      	it	ne
 800dcac:	6059      	strne	r1, [r3, #4]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	bf08      	it	eq
 800dcb2:	6031      	streq	r1, [r6, #0]
 800dcb4:	5162      	str	r2, [r4, r5]
 800dcb6:	604b      	str	r3, [r1, #4]
 800dcb8:	4638      	mov	r0, r7
 800dcba:	f104 060b 	add.w	r6, r4, #11
 800dcbe:	f000 f865 	bl	800dd8c <__malloc_unlock>
 800dcc2:	f026 0607 	bic.w	r6, r6, #7
 800dcc6:	1d23      	adds	r3, r4, #4
 800dcc8:	1af2      	subs	r2, r6, r3
 800dcca:	d0b6      	beq.n	800dc3a <_malloc_r+0x22>
 800dccc:	1b9b      	subs	r3, r3, r6
 800dcce:	50a3      	str	r3, [r4, r2]
 800dcd0:	e7b3      	b.n	800dc3a <_malloc_r+0x22>
 800dcd2:	6862      	ldr	r2, [r4, #4]
 800dcd4:	42a3      	cmp	r3, r4
 800dcd6:	bf0c      	ite	eq
 800dcd8:	6032      	streq	r2, [r6, #0]
 800dcda:	605a      	strne	r2, [r3, #4]
 800dcdc:	e7ec      	b.n	800dcb8 <_malloc_r+0xa0>
 800dcde:	4623      	mov	r3, r4
 800dce0:	6864      	ldr	r4, [r4, #4]
 800dce2:	e7b2      	b.n	800dc4a <_malloc_r+0x32>
 800dce4:	4634      	mov	r4, r6
 800dce6:	6876      	ldr	r6, [r6, #4]
 800dce8:	e7b9      	b.n	800dc5e <_malloc_r+0x46>
 800dcea:	230c      	movs	r3, #12
 800dcec:	603b      	str	r3, [r7, #0]
 800dcee:	4638      	mov	r0, r7
 800dcf0:	f000 f84c 	bl	800dd8c <__malloc_unlock>
 800dcf4:	e7a1      	b.n	800dc3a <_malloc_r+0x22>
 800dcf6:	6025      	str	r5, [r4, #0]
 800dcf8:	e7de      	b.n	800dcb8 <_malloc_r+0xa0>
 800dcfa:	bf00      	nop
 800dcfc:	2000074c 	.word	0x2000074c

0800dd00 <_realloc_r>:
 800dd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd04:	4680      	mov	r8, r0
 800dd06:	4614      	mov	r4, r2
 800dd08:	460e      	mov	r6, r1
 800dd0a:	b921      	cbnz	r1, 800dd16 <_realloc_r+0x16>
 800dd0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	4611      	mov	r1, r2
 800dd12:	f7ff bf81 	b.w	800dc18 <_malloc_r>
 800dd16:	b92a      	cbnz	r2, 800dd24 <_realloc_r+0x24>
 800dd18:	f7ff ff12 	bl	800db40 <_free_r>
 800dd1c:	4625      	mov	r5, r4
 800dd1e:	4628      	mov	r0, r5
 800dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd24:	f000 f838 	bl	800dd98 <_malloc_usable_size_r>
 800dd28:	4284      	cmp	r4, r0
 800dd2a:	4607      	mov	r7, r0
 800dd2c:	d802      	bhi.n	800dd34 <_realloc_r+0x34>
 800dd2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd32:	d812      	bhi.n	800dd5a <_realloc_r+0x5a>
 800dd34:	4621      	mov	r1, r4
 800dd36:	4640      	mov	r0, r8
 800dd38:	f7ff ff6e 	bl	800dc18 <_malloc_r>
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d0ed      	beq.n	800dd1e <_realloc_r+0x1e>
 800dd42:	42bc      	cmp	r4, r7
 800dd44:	4622      	mov	r2, r4
 800dd46:	4631      	mov	r1, r6
 800dd48:	bf28      	it	cs
 800dd4a:	463a      	movcs	r2, r7
 800dd4c:	f7ff fed0 	bl	800daf0 <memcpy>
 800dd50:	4631      	mov	r1, r6
 800dd52:	4640      	mov	r0, r8
 800dd54:	f7ff fef4 	bl	800db40 <_free_r>
 800dd58:	e7e1      	b.n	800dd1e <_realloc_r+0x1e>
 800dd5a:	4635      	mov	r5, r6
 800dd5c:	e7df      	b.n	800dd1e <_realloc_r+0x1e>
	...

0800dd60 <_sbrk_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d06      	ldr	r5, [pc, #24]	; (800dd7c <_sbrk_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	602b      	str	r3, [r5, #0]
 800dd6c:	f7f8 ff5e 	bl	8006c2c <_sbrk>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_sbrk_r+0x1a>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_sbrk_r+0x1a>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20000754 	.word	0x20000754

0800dd80 <__malloc_lock>:
 800dd80:	4801      	ldr	r0, [pc, #4]	; (800dd88 <__malloc_lock+0x8>)
 800dd82:	f000 b811 	b.w	800dda8 <__retarget_lock_acquire_recursive>
 800dd86:	bf00      	nop
 800dd88:	20000758 	.word	0x20000758

0800dd8c <__malloc_unlock>:
 800dd8c:	4801      	ldr	r0, [pc, #4]	; (800dd94 <__malloc_unlock+0x8>)
 800dd8e:	f000 b80c 	b.w	800ddaa <__retarget_lock_release_recursive>
 800dd92:	bf00      	nop
 800dd94:	20000758 	.word	0x20000758

0800dd98 <_malloc_usable_size_r>:
 800dd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd9c:	1f18      	subs	r0, r3, #4
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bfbc      	itt	lt
 800dda2:	580b      	ldrlt	r3, [r1, r0]
 800dda4:	18c0      	addlt	r0, r0, r3
 800dda6:	4770      	bx	lr

0800dda8 <__retarget_lock_acquire_recursive>:
 800dda8:	4770      	bx	lr

0800ddaa <__retarget_lock_release_recursive>:
 800ddaa:	4770      	bx	lr
 800ddac:	0000      	movs	r0, r0
	...

0800ddb0 <ceil>:
 800ddb0:	ec51 0b10 	vmov	r0, r1, d0
 800ddb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ddbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ddc0:	2e13      	cmp	r6, #19
 800ddc2:	ee10 5a10 	vmov	r5, s0
 800ddc6:	ee10 8a10 	vmov	r8, s0
 800ddca:	460c      	mov	r4, r1
 800ddcc:	dc30      	bgt.n	800de30 <ceil+0x80>
 800ddce:	2e00      	cmp	r6, #0
 800ddd0:	da12      	bge.n	800ddf8 <ceil+0x48>
 800ddd2:	a335      	add	r3, pc, #212	; (adr r3, 800dea8 <ceil+0xf8>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f7f2 fa58 	bl	800028c <__adddf3>
 800dddc:	2200      	movs	r2, #0
 800ddde:	2300      	movs	r3, #0
 800dde0:	f7f2 fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 800dde4:	b128      	cbz	r0, 800ddf2 <ceil+0x42>
 800dde6:	2c00      	cmp	r4, #0
 800dde8:	db55      	blt.n	800de96 <ceil+0xe6>
 800ddea:	432c      	orrs	r4, r5
 800ddec:	d057      	beq.n	800de9e <ceil+0xee>
 800ddee:	4c30      	ldr	r4, [pc, #192]	; (800deb0 <ceil+0x100>)
 800ddf0:	2500      	movs	r5, #0
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	e025      	b.n	800de44 <ceil+0x94>
 800ddf8:	4f2e      	ldr	r7, [pc, #184]	; (800deb4 <ceil+0x104>)
 800ddfa:	4137      	asrs	r7, r6
 800ddfc:	ea01 0307 	and.w	r3, r1, r7
 800de00:	4303      	orrs	r3, r0
 800de02:	d01f      	beq.n	800de44 <ceil+0x94>
 800de04:	a328      	add	r3, pc, #160	; (adr r3, 800dea8 <ceil+0xf8>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f7f2 fa3f 	bl	800028c <__adddf3>
 800de0e:	2200      	movs	r2, #0
 800de10:	2300      	movs	r3, #0
 800de12:	f7f2 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 800de16:	2800      	cmp	r0, #0
 800de18:	d0eb      	beq.n	800ddf2 <ceil+0x42>
 800de1a:	2c00      	cmp	r4, #0
 800de1c:	bfc2      	ittt	gt
 800de1e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800de22:	fa43 f606 	asrgt.w	r6, r3, r6
 800de26:	19a4      	addgt	r4, r4, r6
 800de28:	ea24 0407 	bic.w	r4, r4, r7
 800de2c:	2500      	movs	r5, #0
 800de2e:	e7e0      	b.n	800ddf2 <ceil+0x42>
 800de30:	2e33      	cmp	r6, #51	; 0x33
 800de32:	dd0b      	ble.n	800de4c <ceil+0x9c>
 800de34:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800de38:	d104      	bne.n	800de44 <ceil+0x94>
 800de3a:	ee10 2a10 	vmov	r2, s0
 800de3e:	460b      	mov	r3, r1
 800de40:	f7f2 fa24 	bl	800028c <__adddf3>
 800de44:	ec41 0b10 	vmov	d0, r0, r1
 800de48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	fa23 f707 	lsr.w	r7, r3, r7
 800de58:	4207      	tst	r7, r0
 800de5a:	d0f3      	beq.n	800de44 <ceil+0x94>
 800de5c:	a312      	add	r3, pc, #72	; (adr r3, 800dea8 <ceil+0xf8>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 fa13 	bl	800028c <__adddf3>
 800de66:	2200      	movs	r2, #0
 800de68:	2300      	movs	r3, #0
 800de6a:	f7f2 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d0bf      	beq.n	800ddf2 <ceil+0x42>
 800de72:	2c00      	cmp	r4, #0
 800de74:	dd02      	ble.n	800de7c <ceil+0xcc>
 800de76:	2e14      	cmp	r6, #20
 800de78:	d103      	bne.n	800de82 <ceil+0xd2>
 800de7a:	3401      	adds	r4, #1
 800de7c:	ea25 0507 	bic.w	r5, r5, r7
 800de80:	e7b7      	b.n	800ddf2 <ceil+0x42>
 800de82:	2301      	movs	r3, #1
 800de84:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800de88:	fa03 f606 	lsl.w	r6, r3, r6
 800de8c:	4435      	add	r5, r6
 800de8e:	4545      	cmp	r5, r8
 800de90:	bf38      	it	cc
 800de92:	18e4      	addcc	r4, r4, r3
 800de94:	e7f2      	b.n	800de7c <ceil+0xcc>
 800de96:	2500      	movs	r5, #0
 800de98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800de9c:	e7a9      	b.n	800ddf2 <ceil+0x42>
 800de9e:	4625      	mov	r5, r4
 800dea0:	e7a7      	b.n	800ddf2 <ceil+0x42>
 800dea2:	bf00      	nop
 800dea4:	f3af 8000 	nop.w
 800dea8:	8800759c 	.word	0x8800759c
 800deac:	7e37e43c 	.word	0x7e37e43c
 800deb0:	3ff00000 	.word	0x3ff00000
 800deb4:	000fffff 	.word	0x000fffff

0800deb8 <_init>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	bf00      	nop
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr

0800dec4 <_fini>:
 800dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec6:	bf00      	nop
 800dec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deca:	bc08      	pop	{r3}
 800decc:	469e      	mov	lr, r3
 800dece:	4770      	bx	lr
