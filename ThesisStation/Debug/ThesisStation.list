
ThesisStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f54  08008f54  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f5c  08008f5c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08008f64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000058  08008fbc  00020058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08008fbc  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ea  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a2  00000000  00000000  00033172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00035318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000211e  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001324d  00000000  00000000  000394b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092042  00000000  00000000  0004c703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de745  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000de798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008f24 	.word	0x08008f24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	08008f24 	.word	0x08008f24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b96e 	b.w	8001034 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	9d08      	ldr	r5, [sp, #32]
 8000d76:	4604      	mov	r4, r0
 8000d78:	468c      	mov	ip, r1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8083 	bne.w	8000e86 <__udivmoddi4+0x116>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d947      	bls.n	8000e16 <__udivmoddi4+0xa6>
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b142      	cbz	r2, 8000d9e <__udivmoddi4+0x2e>
 8000d8c:	f1c2 0020 	rsb	r0, r2, #32
 8000d90:	fa24 f000 	lsr.w	r0, r4, r0
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4097      	lsls	r7, r2
 8000d98:	ea40 0c01 	orr.w	ip, r0, r1
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da2:	0c23      	lsrs	r3, r4, #16
 8000da4:	fbbc f6f8 	udiv	r6, ip, r8
 8000da8:	fa1f fe87 	uxth.w	lr, r7
 8000dac:	fb08 c116 	mls	r1, r8, r6, ip
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f10e 	mul.w	r1, r6, lr
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x60>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc2:	f080 8119 	bcs.w	8000ff8 <__udivmoddi4+0x288>
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	f240 8116 	bls.w	8000ff8 <__udivmoddi4+0x288>
 8000dcc:	3e02      	subs	r6, #2
 8000dce:	443b      	add	r3, r7
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x8c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	f080 8105 	bcs.w	8000ffc <__udivmoddi4+0x28c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f240 8102 	bls.w	8000ffc <__udivmoddi4+0x28c>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e00:	eba4 040e 	sub.w	r4, r4, lr
 8000e04:	2600      	movs	r6, #0
 8000e06:	b11d      	cbz	r5, 8000e10 <__udivmoddi4+0xa0>
 8000e08:	40d4      	lsrs	r4, r2
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xaa>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d150      	bne.n	8000ec4 <__udivmoddi4+0x154>
 8000e22:	1bcb      	subs	r3, r1, r7
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e32:	0c21      	lsrs	r1, r4, #16
 8000e34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0xe4>
 8000e44:	1879      	adds	r1, r7, r1
 8000e46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0xe2>
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	f200 80e9 	bhi.w	8001024 <__udivmoddi4+0x2b4>
 8000e52:	4684      	mov	ip, r0
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	b2a3      	uxth	r3, r4
 8000e58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e64:	fb08 f800 	mul.w	r8, r8, r0
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x10c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x10a>
 8000e74:	45a0      	cmp	r8, r4
 8000e76:	f200 80d9 	bhi.w	800102c <__udivmoddi4+0x2bc>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	eba4 0408 	sub.w	r4, r4, r8
 8000e80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e84:	e7bf      	b.n	8000e06 <__udivmoddi4+0x96>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0x12e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <__udivmoddi4+0x282>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x1cc>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0x140>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80b8 	bhi.w	8001020 <__udivmoddi4+0x2b0>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	468c      	mov	ip, r1
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0a8      	beq.n	8000e10 <__udivmoddi4+0xa0>
 8000ebe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ec4:	f1c2 0320 	rsb	r3, r2, #32
 8000ec8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ecc:	4097      	lsls	r7, r2
 8000ece:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed6:	40d9      	lsrs	r1, r3
 8000ed8:	4330      	orrs	r0, r6
 8000eda:	0c03      	lsrs	r3, r0, #16
 8000edc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee0:	fa1f f887 	uxth.w	r8, r7
 8000ee4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eec:	fb06 f108 	mul.w	r1, r6, r8
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x19c>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000efe:	f080 808d 	bcs.w	800101c <__udivmoddi4+0x2ac>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 808a 	bls.w	800101c <__udivmoddi4+0x2ac>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	443b      	add	r3, r7
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b281      	uxth	r1, r0
 8000f10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb00 f308 	mul.w	r3, r0, r8
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x1c4>
 8000f24:	1879      	adds	r1, r7, r1
 8000f26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2a:	d273      	bcs.n	8001014 <__udivmoddi4+0x2a4>
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d971      	bls.n	8001014 <__udivmoddi4+0x2a4>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4439      	add	r1, r7
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3a:	e778      	b.n	8000e2e <__udivmoddi4+0xbe>
 8000f3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000f40:	fa03 f406 	lsl.w	r4, r3, r6
 8000f44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f62:	fa1f f884 	uxth.w	r8, r4
 8000f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000f72:	458a      	cmp	sl, r1
 8000f74:	fa02 f206 	lsl.w	r2, r2, r6
 8000f78:	fa00 f306 	lsl.w	r3, r0, r6
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x220>
 8000f7e:	1861      	adds	r1, r4, r1
 8000f80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f84:	d248      	bcs.n	8001018 <__udivmoddi4+0x2a8>
 8000f86:	458a      	cmp	sl, r1
 8000f88:	d946      	bls.n	8001018 <__udivmoddi4+0x2a8>
 8000f8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000f8e:	4421      	add	r1, r4
 8000f90:	eba1 010a 	sub.w	r1, r1, sl
 8000f94:	b2bf      	uxth	r7, r7
 8000f96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa2:	fb00 f808 	mul.w	r8, r0, r8
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x24a>
 8000faa:	19e7      	adds	r7, r4, r7
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d22e      	bcs.n	8001010 <__udivmoddi4+0x2a0>
 8000fb2:	45b8      	cmp	r8, r7
 8000fb4:	d92c      	bls.n	8001010 <__udivmoddi4+0x2a0>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4427      	add	r7, r4
 8000fba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fbe:	eba7 0708 	sub.w	r7, r7, r8
 8000fc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fc6:	454f      	cmp	r7, r9
 8000fc8:	46c6      	mov	lr, r8
 8000fca:	4649      	mov	r1, r9
 8000fcc:	d31a      	bcc.n	8001004 <__udivmoddi4+0x294>
 8000fce:	d017      	beq.n	8001000 <__udivmoddi4+0x290>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x27a>
 8000fd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000fd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000fda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fde:	40f2      	lsrs	r2, r6
 8000fe0:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe4:	40f7      	lsrs	r7, r6
 8000fe6:	e9c5 2700 	strd	r2, r7, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	462e      	mov	r6, r5
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e70b      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	e6e9      	b.n	8000dd0 <__udivmoddi4+0x60>
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	e6fd      	b.n	8000dfc <__udivmoddi4+0x8c>
 8001000:	4543      	cmp	r3, r8
 8001002:	d2e5      	bcs.n	8000fd0 <__udivmoddi4+0x260>
 8001004:	ebb8 0e02 	subs.w	lr, r8, r2
 8001008:	eb69 0104 	sbc.w	r1, r9, r4
 800100c:	3801      	subs	r0, #1
 800100e:	e7df      	b.n	8000fd0 <__udivmoddi4+0x260>
 8001010:	4608      	mov	r0, r1
 8001012:	e7d2      	b.n	8000fba <__udivmoddi4+0x24a>
 8001014:	4660      	mov	r0, ip
 8001016:	e78d      	b.n	8000f34 <__udivmoddi4+0x1c4>
 8001018:	4681      	mov	r9, r0
 800101a:	e7b9      	b.n	8000f90 <__udivmoddi4+0x220>
 800101c:	4666      	mov	r6, ip
 800101e:	e775      	b.n	8000f0c <__udivmoddi4+0x19c>
 8001020:	4630      	mov	r0, r6
 8001022:	e74a      	b.n	8000eba <__udivmoddi4+0x14a>
 8001024:	f1ac 0c02 	sub.w	ip, ip, #2
 8001028:	4439      	add	r1, r7
 800102a:	e713      	b.n	8000e54 <__udivmoddi4+0xe4>
 800102c:	3802      	subs	r0, #2
 800102e:	443c      	add	r4, r7
 8001030:	e724      	b.n	8000e7c <__udivmoddi4+0x10c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <VL6180X_Init>:
 @brief  Initializes VL6180X and check if it is found and resets chip.
 @param  Pointer of i2c
 @returns True if chip found and initialized, False otherwise
 */
/**************************************************************************/
bool VL6180X_Init(I2C_HandleTypeDef *hi2c) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	VL6180X_i2c = hi2c;
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <VL6180X_Init+0x38>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	_i2caddr = VL6180X_DEFAULT_I2C_ADDR;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <VL6180X_Init+0x3c>)
 8001048:	2252      	movs	r2, #82	; 0x52
 800104a:	701a      	strb	r2, [r3, #0]

//	if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
//		return false;
//	}

	 if (read8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) == 0x01) {
 800104c:	2016      	movs	r0, #22
 800104e:	f000 f8e5 	bl	800121c <read8>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <VL6180X_Init+0x24>
	loadSettings();
 8001058:	f000 f80e 	bl	8001078 <loadSettings>
	}

	write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800105c:	2100      	movs	r1, #0
 800105e:	2016      	movs	r0, #22
 8001060:	f000 f90c 	bl	800127c <write8>

	return true;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000078 	.word	0x20000078
 8001074:	20000074 	.word	0x20000074

08001078 <loadSettings>:
/*!
 @brief  Load the settings for proximity/distance ranging
 */
/**************************************************************************/

void loadSettings(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	// load settings!

	// private settings from page 24 of app note
	write8(0x0207, 0x01);
 800107c:	2101      	movs	r1, #1
 800107e:	f240 2007 	movw	r0, #519	; 0x207
 8001082:	f000 f8fb 	bl	800127c <write8>
	write8(0x0208, 0x01);
 8001086:	2101      	movs	r1, #1
 8001088:	f44f 7002 	mov.w	r0, #520	; 0x208
 800108c:	f000 f8f6 	bl	800127c <write8>
	write8(0x0096, 0x00);
 8001090:	2100      	movs	r1, #0
 8001092:	2096      	movs	r0, #150	; 0x96
 8001094:	f000 f8f2 	bl	800127c <write8>
	write8(0x0097, 0xfd);
 8001098:	21fd      	movs	r1, #253	; 0xfd
 800109a:	2097      	movs	r0, #151	; 0x97
 800109c:	f000 f8ee 	bl	800127c <write8>
	write8(0x00e3, 0x00);
 80010a0:	2100      	movs	r1, #0
 80010a2:	20e3      	movs	r0, #227	; 0xe3
 80010a4:	f000 f8ea 	bl	800127c <write8>
	write8(0x00e4, 0x04);
 80010a8:	2104      	movs	r1, #4
 80010aa:	20e4      	movs	r0, #228	; 0xe4
 80010ac:	f000 f8e6 	bl	800127c <write8>
	write8(0x00e5, 0x02);
 80010b0:	2102      	movs	r1, #2
 80010b2:	20e5      	movs	r0, #229	; 0xe5
 80010b4:	f000 f8e2 	bl	800127c <write8>
	write8(0x00e6, 0x01);
 80010b8:	2101      	movs	r1, #1
 80010ba:	20e6      	movs	r0, #230	; 0xe6
 80010bc:	f000 f8de 	bl	800127c <write8>
	write8(0x00e7, 0x03);
 80010c0:	2103      	movs	r1, #3
 80010c2:	20e7      	movs	r0, #231	; 0xe7
 80010c4:	f000 f8da 	bl	800127c <write8>
	write8(0x00f5, 0x02);
 80010c8:	2102      	movs	r1, #2
 80010ca:	20f5      	movs	r0, #245	; 0xf5
 80010cc:	f000 f8d6 	bl	800127c <write8>
	write8(0x00d9, 0x05);
 80010d0:	2105      	movs	r1, #5
 80010d2:	20d9      	movs	r0, #217	; 0xd9
 80010d4:	f000 f8d2 	bl	800127c <write8>
	write8(0x00db, 0xce);
 80010d8:	21ce      	movs	r1, #206	; 0xce
 80010da:	20db      	movs	r0, #219	; 0xdb
 80010dc:	f000 f8ce 	bl	800127c <write8>
	write8(0x00dc, 0x03);
 80010e0:	2103      	movs	r1, #3
 80010e2:	20dc      	movs	r0, #220	; 0xdc
 80010e4:	f000 f8ca 	bl	800127c <write8>
	write8(0x00dd, 0xf8);
 80010e8:	21f8      	movs	r1, #248	; 0xf8
 80010ea:	20dd      	movs	r0, #221	; 0xdd
 80010ec:	f000 f8c6 	bl	800127c <write8>
	write8(0x009f, 0x00);
 80010f0:	2100      	movs	r1, #0
 80010f2:	209f      	movs	r0, #159	; 0x9f
 80010f4:	f000 f8c2 	bl	800127c <write8>
	write8(0x00a3, 0x3c);
 80010f8:	213c      	movs	r1, #60	; 0x3c
 80010fa:	20a3      	movs	r0, #163	; 0xa3
 80010fc:	f000 f8be 	bl	800127c <write8>
	write8(0x00b7, 0x00);
 8001100:	2100      	movs	r1, #0
 8001102:	20b7      	movs	r0, #183	; 0xb7
 8001104:	f000 f8ba 	bl	800127c <write8>
	write8(0x00bb, 0x3c);
 8001108:	213c      	movs	r1, #60	; 0x3c
 800110a:	20bb      	movs	r0, #187	; 0xbb
 800110c:	f000 f8b6 	bl	800127c <write8>
	write8(0x00b2, 0x09);
 8001110:	2109      	movs	r1, #9
 8001112:	20b2      	movs	r0, #178	; 0xb2
 8001114:	f000 f8b2 	bl	800127c <write8>
	write8(0x00ca, 0x09);
 8001118:	2109      	movs	r1, #9
 800111a:	20ca      	movs	r0, #202	; 0xca
 800111c:	f000 f8ae 	bl	800127c <write8>
	write8(0x0198, 0x01);
 8001120:	2101      	movs	r1, #1
 8001122:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8001126:	f000 f8a9 	bl	800127c <write8>
	write8(0x01b0, 0x17);
 800112a:	2117      	movs	r1, #23
 800112c:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8001130:	f000 f8a4 	bl	800127c <write8>
	write8(0x01ad, 0x00);
 8001134:	2100      	movs	r1, #0
 8001136:	f240 10ad 	movw	r0, #429	; 0x1ad
 800113a:	f000 f89f 	bl	800127c <write8>
	write8(0x00ff, 0x05);
 800113e:	2105      	movs	r1, #5
 8001140:	20ff      	movs	r0, #255	; 0xff
 8001142:	f000 f89b 	bl	800127c <write8>
	write8(0x0100, 0x05);
 8001146:	2105      	movs	r1, #5
 8001148:	f44f 7080 	mov.w	r0, #256	; 0x100
 800114c:	f000 f896 	bl	800127c <write8>
	write8(0x0199, 0x05);
 8001150:	2105      	movs	r1, #5
 8001152:	f240 1099 	movw	r0, #409	; 0x199
 8001156:	f000 f891 	bl	800127c <write8>
	write8(0x01a6, 0x1b);
 800115a:	211b      	movs	r1, #27
 800115c:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8001160:	f000 f88c 	bl	800127c <write8>
	write8(0x01ac, 0x3e);
 8001164:	213e      	movs	r1, #62	; 0x3e
 8001166:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 800116a:	f000 f887 	bl	800127c <write8>
	write8(0x01a7, 0x1f);
 800116e:	211f      	movs	r1, #31
 8001170:	f240 10a7 	movw	r0, #423	; 0x1a7
 8001174:	f000 f882 	bl	800127c <write8>
	write8(0x0030, 0x00);
 8001178:	2100      	movs	r1, #0
 800117a:	2030      	movs	r0, #48	; 0x30
 800117c:	f000 f87e 	bl	800127c <write8>

	// Recommended _ Public registers - See data sheet for more detail
	write8(0x0011, 0x10); // Enables polling for 'New Sample ready' when measurement completes
 8001180:	2110      	movs	r1, #16
 8001182:	2011      	movs	r0, #17
 8001184:	f000 f87a 	bl	800127c <write8>
	write8(0x010a, 0x30); // Set the averaging sample period (compromise between lower noise and increased execution time)
 8001188:	2130      	movs	r1, #48	; 0x30
 800118a:	f44f 7085 	mov.w	r0, #266	; 0x10a
 800118e:	f000 f875 	bl	800127c <write8>
	write8(0x003f, 0x46); // Sets the light and dark gain (upper nibble). Dark gain should not be changed.
 8001192:	2146      	movs	r1, #70	; 0x46
 8001194:	203f      	movs	r0, #63	; 0x3f
 8001196:	f000 f871 	bl	800127c <write8>
	write8(0x0031, 0xFF); // sets the # of range measurements after which auto calibration of system is performed
 800119a:	21ff      	movs	r1, #255	; 0xff
 800119c:	2031      	movs	r0, #49	; 0x31
 800119e:	f000 f86d 	bl	800127c <write8>
	write8(0x0040, 0x63); // Set ALS integration time to 100ms
 80011a2:	2163      	movs	r1, #99	; 0x63
 80011a4:	2040      	movs	r0, #64	; 0x40
 80011a6:	f000 f869 	bl	800127c <write8>
	write8(0x002e, 0x01); // perform a single temperature calibration of the ranging sensor
 80011aa:	2101      	movs	r1, #1
 80011ac:	202e      	movs	r0, #46	; 0x2e
 80011ae:	f000 f865 	bl	800127c <write8>

	// Optional_ Public registers - See data sheet for more detail
	write8(SYSRANGE_INTERMEASUREMENT_PERIOD, 0x09); // Set default ranging inter-measurement period to 100ms
 80011b2:	2109      	movs	r1, #9
 80011b4:	201b      	movs	r0, #27
 80011b6:	f000 f861 	bl	800127c <write8>
	write8(0x003e, 0x31); 	// Set default ALS inter-measurement period to 500ms
 80011ba:	2131      	movs	r1, #49	; 0x31
 80011bc:	203e      	movs	r0, #62	; 0x3e
 80011be:	f000 f85d 	bl	800127c <write8>
	write8(0x0014, 0x24); // Configures interrupt on 'New Sample Ready threshold event'
 80011c2:	2124      	movs	r1, #36	; 0x24
 80011c4:	2014      	movs	r0, #20
 80011c6:	f000 f859 	bl	800127c <write8>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}

080011ce <VL6180X_readRange>:
 readRangeStatus} to before using the return value!
 @return Distance in millimeters if valid
 */
/**************************************************************************/

uint8_t VL6180X_readRange(void) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
	// wait for device to be ready for range measurement
	while (!(read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01))
 80011d4:	bf00      	nop
 80011d6:	204d      	movs	r0, #77	; 0x4d
 80011d8:	f000 f820 	bl	800121c <read8>
 80011dc:	4603      	mov	r3, r0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f7      	beq.n	80011d6 <VL6180X_readRange+0x8>
		;

	// Start a range measurement
	write8(VL6180X_REG_SYSRANGE_START, 0x01);
 80011e6:	2101      	movs	r1, #1
 80011e8:	2018      	movs	r0, #24
 80011ea:	f000 f847 	bl	800127c <write8>

	// Poll until bit 2 is set
	while (!(read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04))
 80011ee:	bf00      	nop
 80011f0:	204f      	movs	r0, #79	; 0x4f
 80011f2:	f000 f813 	bl	800121c <read8>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f7      	beq.n	80011f0 <VL6180X_readRange+0x22>
		;

	// read range in mm
	uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
 8001200:	2062      	movs	r0, #98	; 0x62
 8001202:	f000 f80b 	bl	800121c <read8>
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]

	// clear interrupt
	write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 800120a:	2107      	movs	r1, #7
 800120c:	2015      	movs	r0, #21
 800120e:	f000 f835 	bl	800127c <write8>

	return range;
 8001212:	79fb      	ldrb	r3, [r7, #7]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <read8>:
 @brief  I2C low level interfacing
 */
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t read8(uint16_t address) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af02      	add	r7, sp, #8
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	uint8_t pData[2] = { address >> 8, address };
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 2, 10);
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <read8+0x58>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <read8+0x5c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b299      	uxth	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	230a      	movs	r3, #10
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2302      	movs	r3, #2
 800124a:	f004 fc19 	bl	8005a80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(VL6180X_i2c, _i2caddr, pData, 1, 10);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <read8+0x58>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <read8+0x5c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b299      	uxth	r1, r3
 8001258:	f107 020c 	add.w	r2, r7, #12
 800125c:	230a      	movs	r3, #10
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	f004 fd0b 	bl	8005c7c <HAL_I2C_Master_Receive>
	data = pData[0];
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	73fb      	strb	r3, [r7, #15]
	return data;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000078 	.word	0x20000078
 8001278:	20000074 	.word	0x20000074

0800127c <write8>:
	data |= pData[1];
	return data;
}

// write 1 byte
void write8(uint16_t address, uint8_t data) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	4613      	mov	r3, r2
 800128a:	717b      	strb	r3, [r7, #5]
	uint8_t pData[3] = { address >> 8, address, data };
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b29b      	uxth	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	733b      	strb	r3, [r7, #12]
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	737b      	strb	r3, [r7, #13]
 800129c:	797b      	ldrb	r3, [r7, #5]
 800129e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(VL6180X_i2c, _i2caddr, pData, 3, 10);
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <write8+0x44>)
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <write8+0x48>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b299      	uxth	r1, r3
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	230a      	movs	r3, #10
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2303      	movs	r3, #3
 80012b4:	f004 fbe4 	bl	8005a80 <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000078 	.word	0x20000078
 80012c4:	20000074 	.word	0x20000074

080012c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012d0:	f003 fe8a 	bl	8004fe8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012d4:	f000 fe82 	bl	8001fdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012d8:	f001 f944 	bl	8002564 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80012dc:	f001 f8ee 	bl	80024bc <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80012e0:	f000 ff12 	bl	8002108 <MX_TIM1_Init>
	MX_TIM2_Init();
 80012e4:	f000 ff68 	bl	80021b8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80012e8:	f000 ffba 	bl	8002260 <MX_TIM3_Init>
	MX_TIM4_Init();
 80012ec:	f001 f80c 	bl	8002308 <MX_TIM4_Init>
	MX_TIM5_Init();
 80012f0:	f001 f896 	bl	8002420 <MX_TIM5_Init>
	MX_USART6_UART_Init();
 80012f4:	f001 f90c 	bl	8002510 <MX_USART6_UART_Init>
	MX_I2C2_Init();
 80012f8:	f000 fed8 	bl	80020ac <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
	HAL_TIM_Base_Start_IT(&htim2);
 80012fc:	48ea      	ldr	r0, [pc, #936]	; (80016a8 <main+0x3e0>)
 80012fe:	f005 fed5 	bl	80070ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001302:	48ea      	ldr	r0, [pc, #936]	; (80016ac <main+0x3e4>)
 8001304:	f005 fed2 	bl	80070ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001308:	48e9      	ldr	r0, [pc, #932]	; (80016b0 <main+0x3e8>)
 800130a:	f005 fecf 	bl	80070ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800130e:	48e9      	ldr	r0, [pc, #932]	; (80016b4 <main+0x3ec>)
 8001310:	f005 fecc 	bl	80070ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001314:	213c      	movs	r1, #60	; 0x3c
 8001316:	48e8      	ldr	r0, [pc, #928]	; (80016b8 <main+0x3f0>)
 8001318:	f006 f8da 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800131c:	213c      	movs	r1, #60	; 0x3c
 800131e:	48e2      	ldr	r0, [pc, #904]	; (80016a8 <main+0x3e0>)
 8001320:	f006 f8d6 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001324:	213c      	movs	r1, #60	; 0x3c
 8001326:	48e1      	ldr	r0, [pc, #900]	; (80016ac <main+0x3e4>)
 8001328:	f006 f8d2 	bl	80074d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	48e0      	ldr	r0, [pc, #896]	; (80016b0 <main+0x3e8>)
 8001330:	f005 ff78 	bl	8007224 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	48de      	ldr	r0, [pc, #888]	; (80016b0 <main+0x3e8>)
 8001338:	f005 ff74 	bl	8007224 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800133c:	2108      	movs	r1, #8
 800133e:	48dc      	ldr	r0, [pc, #880]	; (80016b0 <main+0x3e8>)
 8001340:	f005 ff70 	bl	8007224 <HAL_TIM_PWM_Start>
	hx711_init(&loadcell, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1);
 8001344:	2302      	movs	r3, #2
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	4bdc      	ldr	r3, [pc, #880]	; (80016bc <main+0x3f4>)
 800134a:	2201      	movs	r2, #1
 800134c:	49db      	ldr	r1, [pc, #876]	; (80016bc <main+0x3f4>)
 800134e:	48dc      	ldr	r0, [pc, #880]	; (80016c0 <main+0x3f8>)
 8001350:	f001 fed0 	bl	80030f4 <hx711_init>
	hx711_coef_set(&loadcell, 1, 1); // read after calibration
 8001354:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001358:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800135c:	48d8      	ldr	r0, [pc, #864]	; (80016c0 <main+0x3f8>)
 800135e:	f002 fb69 	bl	8003a34 <hx711_coef_set>
	hx711_init(&loadcell2, GPIOC, GPIO_PIN_2, GPIOC, GPIO_PIN_3);
 8001362:	2308      	movs	r3, #8
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4bd5      	ldr	r3, [pc, #852]	; (80016bc <main+0x3f4>)
 8001368:	2204      	movs	r2, #4
 800136a:	49d4      	ldr	r1, [pc, #848]	; (80016bc <main+0x3f4>)
 800136c:	48d5      	ldr	r0, [pc, #852]	; (80016c4 <main+0x3fc>)
 800136e:	f001 fec1 	bl	80030f4 <hx711_init>
	hx711_coef_set(&loadcell2, 1, 1); // read after calibration
 8001372:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001376:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800137a:	48d2      	ldr	r0, [pc, #840]	; (80016c4 <main+0x3fc>)
 800137c:	f002 fb5a 	bl	8003a34 <hx711_coef_set>
//  AutoFox_INA226_Constructor(&ina226);
//  AutoFox_INA226_Init(&ina226,INA226_IC2_ADDRESS,SHUNT_RESISTOR_OHMS,10);
//  AutoFox_INA226_setupCalibration(&ina226,SHUNT_RESISTOR_OHMS,10);
	tcaselect(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f002 fb6b 	bl	8003a5c <tcaselect>
	HAL_Delay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f003 fea0 	bl	80050cc <HAL_Delay>
	VL6180X_Init(&hi2c2);
 800138c:	48ce      	ldr	r0, [pc, #824]	; (80016c8 <main+0x400>)
 800138e:	f7ff fe53 	bl	8001038 <VL6180X_Init>
	HAL_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f003 fe9a 	bl	80050cc <HAL_Delay>
	tcaselect(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f002 fb5f 	bl	8003a5c <tcaselect>
	HAL_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f003 fe94 	bl	80050cc <HAL_Delay>
	VL6180X_Init(&hi2c2);
 80013a4:	48c8      	ldr	r0, [pc, #800]	; (80016c8 <main+0x400>)
 80013a6:	f7ff fe47 	bl	8001038 <VL6180X_Init>
	xr[0] = (m*(h-x[5])*(w-x[4]))/(h*w);
 80013aa:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001700 <main+0x438>
 80013ae:	eddf 7ac7 	vldr	s15, [pc, #796]	; 80016cc <main+0x404>
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 80016f8 <main+0x430>
 80013ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013be:	eddf 6ad1 	vldr	s13, [pc, #836]	; 8001704 <main+0x43c>
 80013c2:	eddf 7ac3 	vldr	s15, [pc, #780]	; 80016d0 <main+0x408>
 80013c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013ce:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001700 <main+0x438>
 80013d2:	eddf 7acc 	vldr	s15, [pc, #816]	; 8001704 <main+0x43c>
 80013d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013de:	4bbd      	ldr	r3, [pc, #756]	; (80016d4 <main+0x40c>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
	xr[1] = (m*(h-x[5])*x[4])/(h*w);
 80013e4:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001700 <main+0x438>
 80013e8:	eddf 7ab8 	vldr	s15, [pc, #736]	; 80016cc <main+0x404>
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80016f8 <main+0x430>
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80016d0 <main+0x408>
 80013fc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001400:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001700 <main+0x438>
 8001404:	eddf 7abf 	vldr	s15, [pc, #764]	; 8001704 <main+0x43c>
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001410:	4bb0      	ldr	r3, [pc, #704]	; (80016d4 <main+0x40c>)
 8001412:	edc3 7a01 	vstr	s15, [r3, #4]
	xr[2] = (m*x[5]*(w-x[4]))/(h*w);
 8001416:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80016cc <main+0x404>
 800141a:	eddf 7ab7 	vldr	s15, [pc, #732]	; 80016f8 <main+0x430>
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8001704 <main+0x43c>
 8001426:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80016d0 <main+0x408>
 800142a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800142e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001432:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001700 <main+0x438>
 8001436:	eddf 7ab3 	vldr	s15, [pc, #716]	; 8001704 <main+0x43c>
 800143a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <main+0x40c>)
 8001444:	edc3 7a02 	vstr	s15, [r3, #8]
	xr[3] = (m*x[5]*x[4])/(h*w);
 8001448:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80016cc <main+0x404>
 800144c:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80016f8 <main+0x430>
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80016d0 <main+0x408>
 8001458:	ee67 6a87 	vmul.f32	s13, s15, s14
 800145c:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001700 <main+0x438>
 8001460:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8001704 <main+0x43c>
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <main+0x40c>)
 800146e:	edc3 7a03 	vstr	s15, [r3, #12]
	yr[0] = (m*(h-y[5])*(w-y[4]))/(h*w);
 8001472:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001700 <main+0x438>
 8001476:	eddf 7a98 	vldr	s15, [pc, #608]	; 80016d8 <main+0x410>
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80016f8 <main+0x430>
 8001482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001486:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8001704 <main+0x43c>
 800148a:	eddf 7a94 	vldr	s15, [pc, #592]	; 80016dc <main+0x414>
 800148e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001492:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001496:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001700 <main+0x438>
 800149a:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8001704 <main+0x43c>
 800149e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a6:	4b8e      	ldr	r3, [pc, #568]	; (80016e0 <main+0x418>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	yr[1] = (m*(h-y[5])*y[4])/(h*w);
 80014ac:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001700 <main+0x438>
 80014b0:	eddf 7a89 	vldr	s15, [pc, #548]	; 80016d8 <main+0x410>
 80014b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b8:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80016f8 <main+0x430>
 80014bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80016dc <main+0x414>
 80014c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014c8:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001700 <main+0x438>
 80014cc:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8001704 <main+0x43c>
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d8:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <main+0x418>)
 80014da:	edc3 7a01 	vstr	s15, [r3, #4]
	yr[2] = (m*y[5]*(w-y[4]))/(h*w);
 80014de:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80016d8 <main+0x410>
 80014e2:	eddf 7a85 	vldr	s15, [pc, #532]	; 80016f8 <main+0x430>
 80014e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ea:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001704 <main+0x43c>
 80014ee:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80016dc <main+0x414>
 80014f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014fa:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001700 <main+0x438>
 80014fe:	eddf 7a81 	vldr	s15, [pc, #516]	; 8001704 <main+0x43c>
 8001502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150a:	4b75      	ldr	r3, [pc, #468]	; (80016e0 <main+0x418>)
 800150c:	edc3 7a02 	vstr	s15, [r3, #8]
	yr[3] = (m*y[5]*y[4])/(h*w);
 8001510:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80016d8 <main+0x410>
 8001514:	eddf 7a78 	vldr	s15, [pc, #480]	; 80016f8 <main+0x430>
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80016dc <main+0x414>
 8001520:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001524:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001700 <main+0x438>
 8001528:	eddf 7a76 	vldr	s15, [pc, #472]	; 8001704 <main+0x43c>
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <main+0x418>)
 8001536:	edc3 7a03 	vstr	s15, [r3, #12]
	zr[0] = (m*(h-z[5])*(w-z[4]))/(h*w);
 800153a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001700 <main+0x438>
 800153e:	eddf 7a69 	vldr	s15, [pc, #420]	; 80016e4 <main+0x41c>
 8001542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001546:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80016f8 <main+0x430>
 800154a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800154e:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001704 <main+0x43c>
 8001552:	eddf 7a65 	vldr	s15, [pc, #404]	; 80016e8 <main+0x420>
 8001556:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800155a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800155e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001700 <main+0x438>
 8001562:	eddf 7a68 	vldr	s15, [pc, #416]	; 8001704 <main+0x43c>
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <main+0x424>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	zr[1] = (m*(h-z[5])*z[4])/(h*w);
 8001574:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001700 <main+0x438>
 8001578:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80016e4 <main+0x41c>
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80016f8 <main+0x430>
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80016e8 <main+0x420>
 800158c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001590:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001700 <main+0x438>
 8001594:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001704 <main+0x43c>
 8001598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	4b52      	ldr	r3, [pc, #328]	; (80016ec <main+0x424>)
 80015a2:	edc3 7a01 	vstr	s15, [r3, #4]
	zr[2] = (m*z[5]*(w-z[4]))/(h*w);
 80015a6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80016e4 <main+0x41c>
 80015aa:	eddf 7a53 	vldr	s15, [pc, #332]	; 80016f8 <main+0x430>
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001704 <main+0x43c>
 80015b6:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80016e8 <main+0x420>
 80015ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015c2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001700 <main+0x438>
 80015c6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8001704 <main+0x43c>
 80015ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <main+0x424>)
 80015d4:	edc3 7a02 	vstr	s15, [r3, #8]
	zr[3] = (m*z[5]*z[4])/(h*w);
 80015d8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80016e4 <main+0x41c>
 80015dc:	eddf 7a46 	vldr	s15, [pc, #280]	; 80016f8 <main+0x430>
 80015e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80016e8 <main+0x420>
 80015e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001700 <main+0x438>
 80015f0:	eddf 7a44 	vldr	s15, [pc, #272]	; 8001704 <main+0x43c>
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <main+0x424>)
 80015fe:	edc3 7a03 	vstr	s15, [r3, #12]
	pr[0] = (m*(h-p[5])*(w-p[4]))/(h*w);
 8001602:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001700 <main+0x438>
 8001606:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80016f0 <main+0x428>
 800160a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80016f8 <main+0x430>
 8001612:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001616:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001704 <main+0x43c>
 800161a:	eddf 7a38 	vldr	s15, [pc, #224]	; 80016fc <main+0x434>
 800161e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001622:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001626:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001700 <main+0x438>
 800162a:	eddf 7a36 	vldr	s15, [pc, #216]	; 8001704 <main+0x43c>
 800162e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <main+0x42c>)
 8001638:	edc3 7a00 	vstr	s15, [r3]
	pr[1] = (m*(h-p[5])*p[4])/(h*w);
 800163c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001700 <main+0x438>
 8001640:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80016f0 <main+0x428>
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80016f8 <main+0x430>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80016fc <main+0x434>
 8001654:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001658:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001700 <main+0x438>
 800165c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001704 <main+0x43c>
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <main+0x42c>)
 800166a:	edc3 7a01 	vstr	s15, [r3, #4]
	pr[2] = (m*p[5]*(w-p[4]))/(h*w);
 800166e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80016f0 <main+0x428>
 8001672:	eddf 7a21 	vldr	s15, [pc, #132]	; 80016f8 <main+0x430>
 8001676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001704 <main+0x43c>
 800167e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80016fc <main+0x434>
 8001682:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001686:	ee67 6a27 	vmul.f32	s13, s14, s15
 800168a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001700 <main+0x438>
 800168e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001704 <main+0x43c>
 8001692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <main+0x42c>)
 800169c:	edc3 7a02 	vstr	s15, [r3, #8]
	pr[3] = (m*p[5]*p[4])/(h*w);
 80016a0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016f0 <main+0x428>
 80016a4:	e030      	b.n	8001708 <main+0x440>
 80016a6:	bf00      	nop
 80016a8:	2000055c 	.word	0x2000055c
 80016ac:	20000398 	.word	0x20000398
 80016b0:	20000270 	.word	0x20000270
 80016b4:	20000350 	.word	0x20000350
 80016b8:	200004bc 	.word	0x200004bc
 80016bc:	40020800 	.word	0x40020800
 80016c0:	20000310 	.word	0x20000310
 80016c4:	200005c0 	.word	0x200005c0
 80016c8:	200002bc 	.word	0x200002bc
 80016cc:	43d78000 	.word	0x43d78000
 80016d0:	440dd333 	.word	0x440dd333
 80016d4:	20000490 	.word	0x20000490
 80016d8:	44002000 	.word	0x44002000
 80016dc:	44124000 	.word	0x44124000
 80016e0:	20000474 	.word	0x20000474
 80016e4:	440c799a 	.word	0x440c799a
 80016e8:	43b8c28f 	.word	0x43b8c28f
 80016ec:	200003f0 	.word	0x200003f0
 80016f0:	4422f333 	.word	0x4422f333
 80016f4:	20000418 	.word	0x20000418
 80016f8:	3fc7ae14 	.word	0x3fc7ae14
 80016fc:	44351333 	.word	0x44351333
 8001700:	44852000 	.word	0x44852000
 8001704:	44924000 	.word	0x44924000
 8001708:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 80016f8 <main+0x430>
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80016fc <main+0x434>
 8001714:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001718:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8001700 <main+0x438>
 800171c:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8001704 <main+0x43c>
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001728:	4bc1      	ldr	r3, [pc, #772]	; (8001a30 <main+0x768>)
 800172a:	edc3 7a03 	vstr	s15, [r3, #12]
	xc[0] = x[0]/xr[0];
 800172e:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001a34 <main+0x76c>
 8001732:	4bc1      	ldr	r3, [pc, #772]	; (8001a38 <main+0x770>)
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173c:	4bbf      	ldr	r3, [pc, #764]	; (8001a3c <main+0x774>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
	xc[1] = x[1]/xr[1];
 8001742:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001a40 <main+0x778>
 8001746:	4bbc      	ldr	r3, [pc, #752]	; (8001a38 <main+0x770>)
 8001748:	ed93 7a01 	vldr	s14, [r3, #4]
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	4bba      	ldr	r3, [pc, #744]	; (8001a3c <main+0x774>)
 8001752:	edc3 7a01 	vstr	s15, [r3, #4]
	xc[2] = x[2]/xr[2];
 8001756:	eddf 6abb 	vldr	s13, [pc, #748]	; 8001a44 <main+0x77c>
 800175a:	4bb7      	ldr	r3, [pc, #732]	; (8001a38 <main+0x770>)
 800175c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001764:	4bb5      	ldr	r3, [pc, #724]	; (8001a3c <main+0x774>)
 8001766:	edc3 7a02 	vstr	s15, [r3, #8]
	xc[3] = x[3]/xr[3];
 800176a:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8001a48 <main+0x780>
 800176e:	4bb2      	ldr	r3, [pc, #712]	; (8001a38 <main+0x770>)
 8001770:	ed93 7a03 	vldr	s14, [r3, #12]
 8001774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001778:	4bb0      	ldr	r3, [pc, #704]	; (8001a3c <main+0x774>)
 800177a:	edc3 7a03 	vstr	s15, [r3, #12]
	yc[0] = y[0]/yr[0];
 800177e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8001a4c <main+0x784>
 8001782:	4bb3      	ldr	r3, [pc, #716]	; (8001a50 <main+0x788>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178c:	4bb1      	ldr	r3, [pc, #708]	; (8001a54 <main+0x78c>)
 800178e:	edc3 7a00 	vstr	s15, [r3]
	yc[1] = y[1]/yr[1];
 8001792:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001a58 <main+0x790>
 8001796:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <main+0x788>)
 8001798:	ed93 7a01 	vldr	s14, [r3, #4]
 800179c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a0:	4bac      	ldr	r3, [pc, #688]	; (8001a54 <main+0x78c>)
 80017a2:	edc3 7a01 	vstr	s15, [r3, #4]
	yc[2] = y[2]/yr[2];
 80017a6:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001a5c <main+0x794>
 80017aa:	4ba9      	ldr	r3, [pc, #676]	; (8001a50 <main+0x788>)
 80017ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80017b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b4:	4ba7      	ldr	r3, [pc, #668]	; (8001a54 <main+0x78c>)
 80017b6:	edc3 7a02 	vstr	s15, [r3, #8]
	yc[3] = y[3]/yr[3];
 80017ba:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001a60 <main+0x798>
 80017be:	4ba4      	ldr	r3, [pc, #656]	; (8001a50 <main+0x788>)
 80017c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	4ba2      	ldr	r3, [pc, #648]	; (8001a54 <main+0x78c>)
 80017ca:	edc3 7a03 	vstr	s15, [r3, #12]
	zc[0] = z[0]/zr[0];
 80017ce:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8001a64 <main+0x79c>
 80017d2:	4ba5      	ldr	r3, [pc, #660]	; (8001a68 <main+0x7a0>)
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017dc:	4ba3      	ldr	r3, [pc, #652]	; (8001a6c <main+0x7a4>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	zc[1] = z[1]/zr[1];
 80017e2:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001a70 <main+0x7a8>
 80017e6:	4ba0      	ldr	r3, [pc, #640]	; (8001a68 <main+0x7a0>)
 80017e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f0:	4b9e      	ldr	r3, [pc, #632]	; (8001a6c <main+0x7a4>)
 80017f2:	edc3 7a01 	vstr	s15, [r3, #4]
	zc[2] = z[2]/zr[2];
 80017f6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8001a74 <main+0x7ac>
 80017fa:	4b9b      	ldr	r3, [pc, #620]	; (8001a68 <main+0x7a0>)
 80017fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <main+0x7a4>)
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
	zc[3] = z[3]/zr[3];
 800180a:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001a78 <main+0x7b0>
 800180e:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <main+0x7a0>)
 8001810:	ed93 7a03 	vldr	s14, [r3, #12]
 8001814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001818:	4b94      	ldr	r3, [pc, #592]	; (8001a6c <main+0x7a4>)
 800181a:	edc3 7a03 	vstr	s15, [r3, #12]
	pc[0] = p[0]/pr[0];
 800181e:	eddf 6a97 	vldr	s13, [pc, #604]	; 8001a7c <main+0x7b4>
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <main+0x768>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182c:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <main+0x7b8>)
 800182e:	edc3 7a00 	vstr	s15, [r3]
	pc[1] = p[1]/pr[1];
 8001832:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001a84 <main+0x7bc>
 8001836:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <main+0x768>)
 8001838:	ed93 7a01 	vldr	s14, [r3, #4]
 800183c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001840:	4b8f      	ldr	r3, [pc, #572]	; (8001a80 <main+0x7b8>)
 8001842:	edc3 7a01 	vstr	s15, [r3, #4]
	pc[2] = p[2]/pr[2];
 8001846:	eddf 6a90 	vldr	s13, [pc, #576]	; 8001a88 <main+0x7c0>
 800184a:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <main+0x768>)
 800184c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001854:	4b8a      	ldr	r3, [pc, #552]	; (8001a80 <main+0x7b8>)
 8001856:	edc3 7a02 	vstr	s15, [r3, #8]
	pc[3] = p[3]/pr[3];
 800185a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001a8c <main+0x7c4>
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <main+0x768>)
 8001860:	ed93 7a03 	vldr	s14, [r3, #12]
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <main+0x7b8>)
 800186a:	edc3 7a03 	vstr	s15, [r3, #12]
	rc[0] = 27306.9453;
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <main+0x7c8>)
 8001870:	4a88      	ldr	r2, [pc, #544]	; (8001a94 <main+0x7cc>)
 8001872:	601a      	str	r2, [r3, #0]
	rc[1] = 23035.0215;
 8001874:	4b86      	ldr	r3, [pc, #536]	; (8001a90 <main+0x7c8>)
 8001876:	4a88      	ldr	r2, [pc, #544]	; (8001a98 <main+0x7d0>)
 8001878:	605a      	str	r2, [r3, #4]
	rc[2] = 100504.188;
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <main+0x7c8>)
 800187c:	4a87      	ldr	r2, [pc, #540]	; (8001a9c <main+0x7d4>)
 800187e:	609a      	str	r2, [r3, #8]
	rc[3] = 124988.211;
 8001880:	4b83      	ldr	r3, [pc, #524]	; (8001a90 <main+0x7c8>)
 8001882:	4a87      	ldr	r2, [pc, #540]	; (8001aa0 <main+0x7d8>)
 8001884:	60da      	str	r2, [r3, #12]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8001886:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <main+0x7dc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f240 528e 	movw	r2, #1422	; 0x58e
 800188e:	4293      	cmp	r3, r2
 8001890:	f000 81a1 	beq.w	8001bd6 <main+0x90e>
 8001894:	f240 528e 	movw	r2, #1422	; 0x58e
 8001898:	4293      	cmp	r3, r2
 800189a:	f300 81f6 	bgt.w	8001c8a <main+0x9c2>
 800189e:	f240 5284 	movw	r2, #1412	; 0x584
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f000 8184 	beq.w	8001bb0 <main+0x8e8>
 80018a8:	f240 5284 	movw	r2, #1412	; 0x584
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f300 81ec 	bgt.w	8001c8a <main+0x9c2>
 80018b2:	2b8e      	cmp	r3, #142	; 0x8e
 80018b4:	f000 8184 	beq.w	8001bc0 <main+0x8f8>
 80018b8:	2b8e      	cmp	r3, #142	; 0x8e
 80018ba:	f300 81e6 	bgt.w	8001c8a <main+0x9c2>
 80018be:	2b8d      	cmp	r3, #141	; 0x8d
 80018c0:	f000 816b 	beq.w	8001b9a <main+0x8d2>
 80018c4:	2b8d      	cmp	r3, #141	; 0x8d
 80018c6:	f300 81e0 	bgt.w	8001c8a <main+0x9c2>
 80018ca:	2b13      	cmp	r3, #19
 80018cc:	dc38      	bgt.n	8001940 <main+0x678>
 80018ce:	f113 0f03 	cmn.w	r3, #3
 80018d2:	f2c0 81da 	blt.w	8001c8a <main+0x9c2>
 80018d6:	3303      	adds	r3, #3
 80018d8:	2b16      	cmp	r3, #22
 80018da:	f200 81d6 	bhi.w	8001c8a <main+0x9c2>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <main+0x61c>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001949 	.word	0x08001949
 80018f0:	08001c8b 	.word	0x08001c8b
 80018f4:	08001c8b 	.word	0x08001c8b
 80018f8:	08001c8b 	.word	0x08001c8b
 80018fc:	08001c8b 	.word	0x08001c8b
 8001900:	08001c8b 	.word	0x08001c8b
 8001904:	08001c8b 	.word	0x08001c8b
 8001908:	08001c8b 	.word	0x08001c8b
 800190c:	08001c8b 	.word	0x08001c8b
 8001910:	08001c8b 	.word	0x08001c8b
 8001914:	08001c8b 	.word	0x08001c8b
 8001918:	08001c8b 	.word	0x08001c8b
 800191c:	080019ff 	.word	0x080019ff
 8001920:	08001a13 	.word	0x08001a13
 8001924:	08001ad5 	.word	0x08001ad5
 8001928:	08001c8b 	.word	0x08001c8b
 800192c:	08001c8b 	.word	0x08001c8b
 8001930:	08001be7 	.word	0x08001be7
 8001934:	08001bfd 	.word	0x08001bfd
 8001938:	08001c29 	.word	0x08001c29
 800193c:	08001c75 	.word	0x08001c75
 8001940:	2b84      	cmp	r3, #132	; 0x84
 8001942:	f000 8123 	beq.w	8001b8c <main+0x8c4>
				zerostate = 1;
				state = 0;
			}
			break;
		default:
			break;
 8001946:	e1a0      	b.n	8001c8a <main+0x9c2>
			zerostate = 1;
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <main+0x7e0>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
			state = -2;
 800194e:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <main+0x7dc>)
 8001950:	f06f 0201 	mvn.w	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
			break;
 8001956:	e1a7      	b.n	8001ca8 <main+0x9e0>
			if(zerostate == 0){
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <main+0x7e0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 8196 	bne.w	8001c8e <main+0x9c6>
				initial_time = micros();
 8001962:	f001 fb83 	bl	800306c <micros>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4950      	ldr	r1, [pc, #320]	; (8001aac <main+0x7e4>)
 800196c:	e9c1 2300 	strd	r2, r3, [r1]
				state = -3;
 8001970:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <main+0x7dc>)
 8001972:	f06f 0202 	mvn.w	r2, #2
 8001976:	601a      	str	r2, [r3, #0]
			break;
 8001978:	e189      	b.n	8001c8e <main+0x9c6>
			if(micros() - initial_time >= 10000000){
 800197a:	f001 fb77 	bl	800306c <micros>
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <main+0x7e4>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	1a84      	subs	r4, r0, r2
 8001986:	eb61 0503 	sbc.w	r5, r1, r3
 800198a:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <main+0x7e8>)
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	429d      	cmp	r5, r3
 8001992:	bf08      	it	eq
 8001994:	4294      	cmpeq	r4, r2
 8001996:	f0c0 817c 	bcc.w	8001c92 <main+0x9ca>
				hx711_tare(&loadcell, 4, 1);
 800199a:	2201      	movs	r2, #1
 800199c:	2104      	movs	r1, #4
 800199e:	4845      	ldr	r0, [pc, #276]	; (8001ab4 <main+0x7ec>)
 80019a0:	f001 fc94 	bl	80032cc <hx711_tare>
				hx711_tare(&loadcell2, 4, 2);
 80019a4:	2202      	movs	r2, #2
 80019a6:	2104      	movs	r1, #4
 80019a8:	4843      	ldr	r0, [pc, #268]	; (8001ab8 <main+0x7f0>)
 80019aa:	f001 fc8f 	bl	80032cc <hx711_tare>
				hx711_calibration(&loadcell, 2, rc[0]);
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <main+0x7c8>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	2102      	movs	r1, #2
 80019ba:	483e      	ldr	r0, [pc, #248]	; (8001ab4 <main+0x7ec>)
 80019bc:	f001 fd54 	bl	8003468 <hx711_calibration>
				hx711_calibration(&loadcell2, 2,  rc[1]);
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <main+0x7c8>)
 80019c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ca:	2102      	movs	r1, #2
 80019cc:	483a      	ldr	r0, [pc, #232]	; (8001ab8 <main+0x7f0>)
 80019ce:	f001 fd4b 	bl	8003468 <hx711_calibration>
				hx711_calibration(&loadcell, 1,  rc[2]);
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <main+0x7c8>)
 80019d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	2101      	movs	r1, #1
 80019de:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <main+0x7ec>)
 80019e0:	f001 fd42 	bl	8003468 <hx711_calibration>
				hx711_calibration(&loadcell2, 1,  rc[3]);
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <main+0x7c8>)
 80019e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	2101      	movs	r1, #1
 80019f0:	4831      	ldr	r0, [pc, #196]	; (8001ab8 <main+0x7f0>)
 80019f2:	f001 fd39 	bl	8003468 <hx711_calibration>
				state = 0;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <main+0x7dc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
			break;
 80019fc:	e149      	b.n	8001c92 <main+0x9ca>
			ptg1 = 588;
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <main+0x7f4>)
 8001a00:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <main+0x7f8>)
 8001a02:	601a      	str	r2, [r3, #0]
			activate1 = 1;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <main+0x7fc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
			state = 12;
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <main+0x7dc>)
 8001a0c:	220c      	movs	r2, #12
 8001a0e:	601a      	str	r2, [r3, #0]
			break;
 8001a10:	e14a      	b.n	8001ca8 <main+0x9e0>
			if (activate1 == 0) {
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <main+0x7fc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 813d 	bne.w	8001c96 <main+0x9ce>
				activate2 = 1;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <main+0x800>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
				ptg2 = 615;
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <main+0x804>)
 8001a24:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <main+0x808>)
 8001a26:	601a      	str	r2, [r3, #0]
				state = 13;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <main+0x7dc>)
 8001a2a:	220d      	movs	r2, #13
 8001a2c:	601a      	str	r2, [r3, #0]
			break;
 8001a2e:	e132      	b.n	8001c96 <main+0x9ce>
 8001a30:	20000418 	.word	0x20000418
 8001a34:	464c7400 	.word	0x464c7400
 8001a38:	20000490 	.word	0x20000490
 8001a3c:	20000250 	.word	0x20000250
 8001a40:	46276400 	.word	0x46276400
 8001a44:	46fc5800 	.word	0x46fc5800
 8001a48:	4716fa00 	.word	0x4716fa00
 8001a4c:	4637e000 	.word	0x4637e000
 8001a50:	20000474 	.word	0x20000474
 8001a54:	200003e0 	.word	0x200003e0
 8001a58:	46066000 	.word	0x46066000
 8001a5c:	47091c00 	.word	0x47091c00
 8001a60:	473cac00 	.word	0x473cac00
 8001a64:	4648c800 	.word	0x4648c800
 8001a68:	200003f0 	.word	0x200003f0
 8001a6c:	200004ac 	.word	0x200004ac
 8001a70:	45af0000 	.word	0x45af0000
 8001a74:	476f1000 	.word	0x476f1000
 8001a78:	46f3c000 	.word	0x46f3c000
 8001a7c:	45fd2000 	.word	0x45fd2000
 8001a80:	200005a4 	.word	0x200005a4
 8001a84:	45cb2000 	.word	0x45cb2000
 8001a88:	46ee4800 	.word	0x46ee4800
 8001a8c:	478a2080 	.word	0x478a2080
 8001a90:	20000240 	.word	0x20000240
 8001a94:	46d555e4 	.word	0x46d555e4
 8001a98:	46b3f60b 	.word	0x46b3f60b
 8001a9c:	47c44c18 	.word	0x47c44c18
 8001aa0:	47f41e1b 	.word	0x47f41e1b
 8001aa4:	200001f8 	.word	0x200001f8
 8001aa8:	200001d0 	.word	0x200001d0
 8001aac:	20000208 	.word	0x20000208
 8001ab0:	00989680 	.word	0x00989680
 8001ab4:	20000310 	.word	0x20000310
 8001ab8:	200005c0 	.word	0x200005c0
 8001abc:	200001e4 	.word	0x200001e4
 8001ac0:	44130000 	.word	0x44130000
 8001ac4:	200001d8 	.word	0x200001d8
 8001ac8:	200001dc 	.word	0x200001dc
 8001acc:	200001e8 	.word	0x200001e8
 8001ad0:	4419c000 	.word	0x4419c000
			if (activate2 == 0) {
 8001ad4:	4ba5      	ldr	r3, [pc, #660]	; (8001d6c <main+0xaa4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 80de 	bne.w	8001c9a <main+0x9d2>
				if (range1 <= 180 && range2 >= 200) {
 8001ade:	4ba4      	ldr	r3, [pc, #656]	; (8001d70 <main+0xaa8>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001d74 <main+0xaac>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d80c      	bhi.n	8001b0c <main+0x844>
 8001af2:	4ba1      	ldr	r3, [pc, #644]	; (8001d78 <main+0xab0>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001d7c <main+0xab4>
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	db02      	blt.n	8001b0c <main+0x844>
					state = 142;
 8001b06:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <main+0xab8>)
 8001b08:	228e      	movs	r2, #142	; 0x8e
 8001b0a:	601a      	str	r2, [r3, #0]
				if (range2 <= 180 && range1 >= 200) {
 8001b0c:	4b9a      	ldr	r3, [pc, #616]	; (8001d78 <main+0xab0>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001d74 <main+0xaac>
 8001b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	d80d      	bhi.n	8001b3c <main+0x874>
 8001b20:	4b93      	ldr	r3, [pc, #588]	; (8001d70 <main+0xaa8>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001d7c <main+0xab4>
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	db03      	blt.n	8001b3c <main+0x874>
					state = 141;
 8001b34:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <main+0xab8>)
 8001b36:	228d      	movs	r2, #141	; 0x8d
 8001b38:	601a      	str	r2, [r3, #0]
			break;
 8001b3a:	e0ae      	b.n	8001c9a <main+0x9d2>
					if(chance == 0){
 8001b3c:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <main+0xabc>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	d106      	bne.n	8001b54 <main+0x88c>
						chance = micros();
 8001b46:	f001 fa91 	bl	800306c <micros>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	498d      	ldr	r1, [pc, #564]	; (8001d84 <main+0xabc>)
 8001b50:	e9c1 2300 	strd	r2, r3, [r1]
					if(micros() - chance >= 3000000){
 8001b54:	f001 fa8a 	bl	800306c <micros>
 8001b58:	4b8a      	ldr	r3, [pc, #552]	; (8001d84 <main+0xabc>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	ebb0 0802 	subs.w	r8, r0, r2
 8001b62:	eb61 0903 	sbc.w	r9, r1, r3
 8001b66:	4a88      	ldr	r2, [pc, #544]	; (8001d88 <main+0xac0>)
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	454b      	cmp	r3, r9
 8001b6e:	bf08      	it	eq
 8001b70:	4542      	cmpeq	r2, r8
 8001b72:	f080 8092 	bcs.w	8001c9a <main+0x9d2>
						state = 132;
 8001b76:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <main+0xab8>)
 8001b78:	2284      	movs	r2, #132	; 0x84
 8001b7a:	601a      	str	r2, [r3, #0]
						chance = 0;
 8001b7c:	4981      	ldr	r1, [pc, #516]	; (8001d84 <main+0xabc>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001b8a:	e086      	b.n	8001c9a <main+0x9d2>
			zerostate = 1;
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <main+0xac4>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
			state = 0;
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <main+0xab8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
		    break;
 8001b98:	e086      	b.n	8001ca8 <main+0x9e0>
			ptg2 = 680;
 8001b9a:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <main+0xac8>)
 8001b9c:	4a7d      	ldr	r2, [pc, #500]	; (8001d94 <main+0xacc>)
 8001b9e:	601a      	str	r2, [r3, #0]
			activate2 = 1;
 8001ba0:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <main+0xaa4>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
			state = 1412;
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <main+0xab8>)
 8001ba8:	f240 5284 	movw	r2, #1412	; 0x584
 8001bac:	601a      	str	r2, [r3, #0]
			break;
 8001bae:	e07b      	b.n	8001ca8 <main+0x9e0>
			if (activate2 == 0) {
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <main+0xaa4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d172      	bne.n	8001c9e <main+0x9d6>
				state = 15;
 8001bb8:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <main+0xab8>)
 8001bba:	220f      	movs	r2, #15
 8001bbc:	601a      	str	r2, [r3, #0]
			break;
 8001bbe:	e06e      	b.n	8001c9e <main+0x9d6>
			ptg1 = 655;
 8001bc0:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <main+0xad0>)
 8001bc2:	4a76      	ldr	r2, [pc, #472]	; (8001d9c <main+0xad4>)
 8001bc4:	601a      	str	r2, [r3, #0]
			activate1 = 1;
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <main+0xad8>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
			state = 1422;
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <main+0xab8>)
 8001bce:	f240 528e 	movw	r2, #1422	; 0x58e
 8001bd2:	601a      	str	r2, [r3, #0]
			break;
 8001bd4:	e068      	b.n	8001ca8 <main+0x9e0>
			if (activate1 == 0) {
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <main+0xad8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d161      	bne.n	8001ca2 <main+0x9da>
				state = 15;
 8001bde:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <main+0xab8>)
 8001be0:	220f      	movs	r2, #15
 8001be2:	601a      	str	r2, [r3, #0]
			break;
 8001be4:	e05d      	b.n	8001ca2 <main+0x9da>
			ptg1 = 0;
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <main+0xad0>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
			activate1 = 1;
 8001bee:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <main+0xad8>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
			state = 17;
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <main+0xab8>)
 8001bf6:	2211      	movs	r2, #17
 8001bf8:	601a      	str	r2, [r3, #0]
			break;
 8001bfa:	e055      	b.n	8001ca8 <main+0x9e0>
			if (distancemetre1 <= 500) {
 8001bfc:	4b69      	ldr	r3, [pc, #420]	; (8001da4 <main+0xadc>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001da8 <main+0xae0>
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d900      	bls.n	8001c12 <main+0x94a>
			break;
 8001c10:	e04a      	b.n	8001ca8 <main+0x9e0>
				ptg2 = 0;
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <main+0xac8>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
				activate2 = 1;
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <main+0xaa4>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
				state = 18;
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <main+0xab8>)
 8001c22:	2212      	movs	r2, #18
 8001c24:	601a      	str	r2, [r3, #0]
			break;
 8001c26:	e03f      	b.n	8001ca8 <main+0x9e0>
			if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <main+0xadc>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001da8 <main+0xae0>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d900      	bls.n	8001c3e <main+0x976>
			break;
 8001c3c:	e034      	b.n	8001ca8 <main+0x9e0>
			if (distancemetre1 <= 500 && distancemetre2 <= 250) {
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <main+0xae4>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001db0 <main+0xae8>
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d900      	bls.n	8001c54 <main+0x98c>
			break;
 8001c52:	e029      	b.n	8001ca8 <main+0x9e0>
				ptg3 = 635;
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <main+0xaec>)
 8001c56:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <main+0xaf0>)
 8001c58:	601a      	str	r2, [r3, #0]
				in5 = 1;
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <main+0xaf4>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
				in6 = 0;
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <main+0xaf8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
				activate3 = 1;
 8001c66:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <main+0xafc>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
				state = 19;
 8001c6c:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <main+0xab8>)
 8001c6e:	2213      	movs	r2, #19
 8001c70:	601a      	str	r2, [r3, #0]
			break;
 8001c72:	e019      	b.n	8001ca8 <main+0x9e0>
			if (activate3 == 0) {
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <main+0xafc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d114      	bne.n	8001ca6 <main+0x9de>
				zerostate = 1;
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <main+0xac4>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
				state = 0;
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <main+0xab8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
			break;
 8001c88:	e00d      	b.n	8001ca6 <main+0x9de>
			break;
 8001c8a:	bf00      	nop
 8001c8c:	e00c      	b.n	8001ca8 <main+0x9e0>
			break;
 8001c8e:	bf00      	nop
 8001c90:	e00a      	b.n	8001ca8 <main+0x9e0>
			break;
 8001c92:	bf00      	nop
 8001c94:	e008      	b.n	8001ca8 <main+0x9e0>
			break;
 8001c96:	bf00      	nop
 8001c98:	e006      	b.n	8001ca8 <main+0x9e0>
			break;
 8001c9a:	bf00      	nop
 8001c9c:	e004      	b.n	8001ca8 <main+0x9e0>
			break;
 8001c9e:	bf00      	nop
 8001ca0:	e002      	b.n	8001ca8 <main+0x9e0>
			break;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <main+0x9e0>
			break;
 8001ca6:	bf00      	nop
		}
		if (emergency == 1) {
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <main+0xb00>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <main+0x9f4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	4845      	ldr	r0, [pc, #276]	; (8001dcc <main+0xb04>)
 8001cb6:	f003 fd6d 	bl	8005794 <HAL_GPIO_WritePin>
 8001cba:	e004      	b.n	8001cc6 <main+0x9fe>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4842      	ldr	r0, [pc, #264]	; (8001dcc <main+0xb04>)
 8001cc2:	f003 fd67 	bl	8005794 <HAL_GPIO_WritePin>
		}
//	  Limit switch
		limitswitchlowpass();
 8001cc6:	f001 ffdb 	bl	8003c80 <limitswitchlowpass>
//	  set zero
		setzero();
 8001cca:	f002 fd15 	bl	80046f8 <setzero>
//	  Distance measurement
		distancemeasurement();
 8001cce:	f002 f88b 	bl	8003de8 <distancemeasurement>
//	  velocity measurement
		if (micros() - Timestamp_Encoder >= 100) {
 8001cd2:	f001 f9cb 	bl	800306c <micros>
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <main+0xb08>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	ebb0 0a02 	subs.w	sl, r0, r2
 8001ce0:	eb61 0b03 	sbc.w	fp, r1, r3
 8001ce4:	f1bb 0f00 	cmp.w	fp, #0
 8001ce8:	bf08      	it	eq
 8001cea:	f1ba 0f64 	cmpeq.w	sl, #100	; 0x64
 8001cee:	d301      	bcc.n	8001cf4 <main+0xa2c>
			velocitymeasurement();
 8001cf0:	f002 fa6a 	bl	80041c8 <velocitymeasurement>
		}
//	  go to position
		if (activate1 == 1 && zerostate == 0) {
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <main+0xad8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <main+0xa44>
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <main+0xac4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <main+0xa44>
			gotoposition(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f002 fb9b 	bl	8004440 <gotoposition>
 8001d0a:	e00b      	b.n	8001d24 <main+0xa5c>
		} else if (activate1 == 1 && zerostate == 0) {
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <main+0xad8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <main+0xa5c>
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <main+0xac4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <main+0xa5c>
			require1 = 0;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <main+0xb0c>)
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
		}
		if (activate2 == 1 && zerostate == 0) {
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <main+0xaa4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <main+0xa74>
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <main+0xac4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <main+0xa74>
			gotoposition(2);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f002 fb83 	bl	8004440 <gotoposition>
 8001d3a:	e00b      	b.n	8001d54 <main+0xa8c>
		} else if (activate2 == 1 && zerostate == 0) {
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <main+0xaa4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <main+0xa8c>
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <main+0xac4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d103      	bne.n	8001d54 <main+0xa8c>
			require2 = 0;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <main+0xb10>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
		}
		if (activate3 == 1 && zerostate == 0) {
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <main+0xafc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d13f      	bne.n	8001ddc <main+0xb14>
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <main+0xac4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d13b      	bne.n	8001ddc <main+0xb14>
			gotoposition(3);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f002 fb6b 	bl	8004440 <gotoposition>
 8001d6a:	e043      	b.n	8001df4 <main+0xb2c>
 8001d6c:	200001dc 	.word	0x200001dc
 8001d70:	20000514 	.word	0x20000514
 8001d74:	43340000 	.word	0x43340000
 8001d78:	2000048c 	.word	0x2000048c
 8001d7c:	43480000 	.word	0x43480000
 8001d80:	200001f8 	.word	0x200001f8
 8001d84:	20000200 	.word	0x20000200
 8001d88:	002dc6bf 	.word	0x002dc6bf
 8001d8c:	200001d0 	.word	0x200001d0
 8001d90:	200001e8 	.word	0x200001e8
 8001d94:	442a0000 	.word	0x442a0000
 8001d98:	200001e4 	.word	0x200001e4
 8001d9c:	4423c000 	.word	0x4423c000
 8001da0:	200001d8 	.word	0x200001d8
 8001da4:	20000184 	.word	0x20000184
 8001da8:	43fa0000 	.word	0x43fa0000
 8001dac:	20000188 	.word	0x20000188
 8001db0:	437a0000 	.word	0x437a0000
 8001db4:	200001ec 	.word	0x200001ec
 8001db8:	441ec000 	.word	0x441ec000
 8001dbc:	2000009c 	.word	0x2000009c
 8001dc0:	200000a0 	.word	0x200000a0
 8001dc4:	200001e0 	.word	0x200001e0
 8001dc8:	200001fc 	.word	0x200001fc
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	200001f0 	.word	0x200001f0
 8001dd4:	20000138 	.word	0x20000138
 8001dd8:	20000150 	.word	0x20000150
		} else if (activate3 == 1 && zerostate == 0) {
 8001ddc:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <main+0xcbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <main+0xb2c>
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <main+0xcc0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <main+0xb2c>
			require3 = 0;
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <main+0xcc4>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
		}

//	  PWM drive
		pwmdrive();
 8001df4:	f002 fd94 	bl	8004920 <pwmdrive>
		//	  Load cell
		if (micros() - hx_711timestamp >= 500000) {
 8001df8:	f001 f938 	bl	800306c <micros>
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <main+0xcc8>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	1a86      	subs	r6, r0, r2
 8001e04:	603e      	str	r6, [r7, #0]
 8001e06:	eb61 0303 	sbc.w	r3, r1, r3
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	4a61      	ldr	r2, [pc, #388]	; (8001f94 <main+0xccc>)
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e16:	428b      	cmp	r3, r1
 8001e18:	bf08      	it	eq
 8001e1a:	4282      	cmpeq	r2, r0
 8001e1c:	d22e      	bcs.n	8001e7c <main+0xbb4>
			if (loadcellc1 == 10 && loadcellc2 == 10 && loadcellc3 == 10
 8001e1e:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <main+0xcd0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d12a      	bne.n	8001e7c <main+0xbb4>
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <main+0xcd4>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d126      	bne.n	8001e7c <main+0xbb4>
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <main+0xcd8>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	d122      	bne.n	8001e7c <main+0xbb4>
					&& loadcellc4 == 10) {
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <main+0xcdc>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d11e      	bne.n	8001e7c <main+0xbb4>
				hx_711timestamp = micros();
 8001e3e:	f001 f915 	bl	800306c <micros>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4952      	ldr	r1, [pc, #328]	; (8001f90 <main+0xcc8>)
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
				loadcellc1 = 4;
 8001e4c:	4b52      	ldr	r3, [pc, #328]	; (8001f98 <main+0xcd0>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	701a      	strb	r2, [r3, #0]
				loadcellc2 = 4;
 8001e52:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <main+0xcd4>)
 8001e54:	2204      	movs	r2, #4
 8001e56:	701a      	strb	r2, [r3, #0]
				loadcellc3 = 4;
 8001e58:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <main+0xcd8>)
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	701a      	strb	r2, [r3, #0]
				loadcellc4 = 4;
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <main+0xcdc>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	701a      	strb	r2, [r3, #0]
				ave1 = 0;
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <main+0xce0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
				ave2 = 0;
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <main+0xce4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
				ave3 = 0;
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <main+0xce8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
				ave4 = 0;
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <main+0xcec>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
			}
		}
		hx711_weight(&loadcell, 4, 1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2104      	movs	r1, #4
 8001e80:	484d      	ldr	r0, [pc, #308]	; (8001fb8 <main+0xcf0>)
 8001e82:	f001 fb0b 	bl	800349c <hx711_weight>
		hx711_weight(&loadcell2, 4, 2);
 8001e86:	2202      	movs	r2, #2
 8001e88:	2104      	movs	r1, #4
 8001e8a:	484c      	ldr	r0, [pc, #304]	; (8001fbc <main+0xcf4>)
 8001e8c:	f001 fb06 	bl	800349c <hx711_weight>
		sclk[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e94:	484a      	ldr	r0, [pc, #296]	; (8001fc0 <main+0xcf8>)
 8001e96:	f003 fc65 	bl	8005764 <HAL_GPIO_ReadPin>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <main+0xcfc>)
 8001ea0:	601a      	str	r2, [r3, #0]
		if (sclk[0] == 0 && sclk[1] == 1) {
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <main+0xcfc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d112      	bne.n	8001ed0 <main+0xc08>
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <main+0xcfc>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10e      	bne.n	8001ed0 <main+0xc08>
			hx711_tare(&loadcell, 4, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4840      	ldr	r0, [pc, #256]	; (8001fb8 <main+0xcf0>)
 8001eb8:	f001 fa08 	bl	80032cc <hx711_tare>
			hx711_tare(&loadcell2, 4, 2);
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	483e      	ldr	r0, [pc, #248]	; (8001fbc <main+0xcf4>)
 8001ec2:	f001 fa03 	bl	80032cc <hx711_tare>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2120      	movs	r1, #32
 8001eca:	483f      	ldr	r0, [pc, #252]	; (8001fc8 <main+0xd00>)
 8001ecc:	f003 fc62 	bl	8005794 <HAL_GPIO_WritePin>
		}
		sclk[1] = sclk[0];
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <main+0xcfc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <main+0xcfc>)
 8001ed6:	6053      	str	r3, [r2, #4]
		if (cal == 1) {
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <main+0xd04>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <main+0xc2a>
			hx711_calibration(&loadcell, 1, 270);
 8001ee0:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001fd0 <main+0xd08>
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <main+0xcf0>)
 8001ee8:	f001 fabe 	bl	8003468 <hx711_calibration>
			cal = 0;
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <main+0xd04>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
		}
		if (cal == 2) {
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <main+0xd04>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d108      	bne.n	8001f0c <main+0xc44>
			hx711_calibration(&loadcell, 2, 270);
 8001efa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001fd0 <main+0xd08>
 8001efe:	2102      	movs	r1, #2
 8001f00:	482d      	ldr	r0, [pc, #180]	; (8001fb8 <main+0xcf0>)
 8001f02:	f001 fab1 	bl	8003468 <hx711_calibration>
			cal = 0;
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <main+0xd04>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
		}
		if (cal == 3) {
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <main+0xd04>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d108      	bne.n	8001f26 <main+0xc5e>
			hx711_calibration(&loadcell2, 1, 270);
 8001f14:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001fd0 <main+0xd08>
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4828      	ldr	r0, [pc, #160]	; (8001fbc <main+0xcf4>)
 8001f1c:	f001 faa4 	bl	8003468 <hx711_calibration>
			cal = 0;
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <main+0xd04>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
		}
		if (cal == 4) {
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <main+0xd04>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d108      	bne.n	8001f40 <main+0xc78>
			hx711_calibration(&loadcell2, 2, 270);
 8001f2e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001fd0 <main+0xd08>
 8001f32:	2102      	movs	r1, #2
 8001f34:	4821      	ldr	r0, [pc, #132]	; (8001fbc <main+0xcf4>)
 8001f36:	f001 fa97 	bl	8003468 <hx711_calibration>
			cal = 0;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <main+0xd04>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
//	 thePower_mA = AutoFox_INA226_GetPower_uW(&ina226);
//	 HAL_Delay (100);

		//laser sensor
//
		tcaselect(0);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f001 fd8b 	bl	8003a5c <tcaselect>
		HAL_Delay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f003 f8c0 	bl	80050cc <HAL_Delay>
//		lux1 = VL6180X_readLux(VL6180X_ALS_GAIN_5);
		range1 = VL6180X_readRange();
 8001f4c:	f7ff f93f 	bl	80011ce <VL6180X_readRange>
 8001f50:	4603      	mov	r3, r0
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <main+0xd0c>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
		tcaselect(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f001 fd7b 	bl	8003a5c <tcaselect>
		HAL_Delay(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f003 f8b0 	bl	80050cc <HAL_Delay>
//		lux2 = VL6180X_readLux(VL6180X_ALS_GAIN_5);
		range2 = VL6180X_readRange();
 8001f6c:	f7ff f92f 	bl	80011ce <VL6180X_readRange>
 8001f70:	4603      	mov	r3, r0
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <main+0xd10>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
		switch (state) {
 8001f80:	e481      	b.n	8001886 <main+0x5be>
 8001f82:	bf00      	nop
 8001f84:	200001e0 	.word	0x200001e0
 8001f88:	200001d0 	.word	0x200001d0
 8001f8c:	20000168 	.word	0x20000168
 8001f90:	200000a8 	.word	0x200000a8
 8001f94:	0007a11f 	.word	0x0007a11f
 8001f98:	200000b8 	.word	0x200000b8
 8001f9c:	200000b9 	.word	0x200000b9
 8001fa0:	200000ba 	.word	0x200000ba
 8001fa4:	200000bb 	.word	0x200000bb
 8001fa8:	2000010c 	.word	0x2000010c
 8001fac:	20000110 	.word	0x20000110
 8001fb0:	20000114 	.word	0x20000114
 8001fb4:	20000118 	.word	0x20000118
 8001fb8:	20000310 	.word	0x20000310
 8001fbc:	200005c0 	.word	0x200005c0
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	2000007c 	.word	0x2000007c
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	20000120 	.word	0x20000120
 8001fd0:	43870000 	.word	0x43870000
 8001fd4:	20000514 	.word	0x20000514
 8001fd8:	2000048c 	.word	0x2000048c

08001fdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b094      	sub	sp, #80	; 0x50
 8001fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	2230      	movs	r2, #48	; 0x30
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f006 ff92 	bl	8008f14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <SystemClock_Config+0xc8>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <SystemClock_Config+0xc8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <SystemClock_Config+0xc8>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <SystemClock_Config+0xcc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <SystemClock_Config+0xcc>)
 8002026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <SystemClock_Config+0xcc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002038:	2302      	movs	r3, #2
 800203a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800203c:	2301      	movs	r3, #1
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002040:	2310      	movs	r3, #16
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002044:	2302      	movs	r3, #2
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800204c:	2308      	movs	r3, #8
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002050:	2364      	movs	r3, #100	; 0x64
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002054:	2302      	movs	r3, #2
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002058:	2304      	movs	r3, #4
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fb5f 	bl	8006724 <HAL_RCC_OscConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0x94>
		Error_Handler();
 800206c:	f002 fcb6 	bl	80049dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002070:	230f      	movs	r3, #15
 8002072:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002080:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2103      	movs	r1, #3
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fdc1 	bl	8006c14 <HAL_RCC_ClockConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0xc0>
		Error_Handler();
 8002098:	f002 fca0 	bl	80049dc <Error_Handler>
	}
}
 800209c:	bf00      	nop
 800209e:	3750      	adds	r7, #80	; 0x50
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000

080020ac <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <MX_I2C2_Init+0x50>)
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <MX_I2C2_Init+0x54>)
 80020b4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_I2C2_Init+0x50>)
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <MX_I2C2_Init+0x58>)
 80020ba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_I2C2_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_I2C2_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_I2C2_Init+0x50>)
 80020ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ce:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_I2C2_Init+0x50>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_I2C2_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <MX_I2C2_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_I2C2_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_I2C2_Init+0x50>)
 80020ea:	f003 fb85 	bl	80057f8 <HAL_I2C_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80020f4:	f002 fc72 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200002bc 	.word	0x200002bc
 8002100:	40005800 	.word	0x40005800
 8002104:	000186a0 	.word	0x000186a0

08002108 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f006 fefc 	bl	8008f14 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <MX_TIM1_Init+0xac>)
 8002128:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <MX_TIM1_Init+0xa8>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <MX_TIM1_Init+0xa8>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002150:	2303      	movs	r3, #3
 8002152:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002158:	2301      	movs	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	480d      	ldr	r0, [pc, #52]	; (80021b0 <MX_TIM1_Init+0xa8>)
 800217c:	f005 f902 	bl	8007384 <HAL_TIM_Encoder_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0x82>
		Error_Handler();
 8002186:	f002 fc29 	bl	80049dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4806      	ldr	r0, [pc, #24]	; (80021b0 <MX_TIM1_Init+0xa8>)
 8002198:	f005 ffae 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80021a2:	f002 fc1b 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	; 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200004bc 	.word	0x200004bc
 80021b4:	40010000 	.word	0x40010000

080021b8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 fea4 	bl	8008f14 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_TIM2_Init+0xa4>)
 80021d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021da:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <MX_TIM2_Init+0xa4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <MX_TIM2_Init+0xa4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_TIM2_Init+0xa4>)
 80021ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ee:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_TIM2_Init+0xa4>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <MX_TIM2_Init+0xa4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021fc:	2303      	movs	r3, #3
 80021fe:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002204:	2301      	movs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4619      	mov	r1, r3
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <MX_TIM2_Init+0xa4>)
 8002228:	f005 f8ac 	bl	8007384 <HAL_TIM_Encoder_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002232:	f002 fbd3 	bl	80049dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <MX_TIM2_Init+0xa4>)
 8002244:	f005 ff58 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800224e:	f002 fbc5 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	3730      	adds	r7, #48	; 0x30
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000055c 	.word	0x2000055c

08002260 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f006 fe50 	bl	8008f14 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <MX_TIM3_Init+0xa0>)
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <MX_TIM3_Init+0xa4>)
 8002280:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <MX_TIM3_Init+0xa0>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <MX_TIM3_Init+0xa0>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <MX_TIM3_Init+0xa0>)
 8002290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002294:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <MX_TIM3_Init+0xa0>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_TIM3_Init+0xa0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022a2:	2303      	movs	r3, #3
 80022a4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022aa:	2301      	movs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <MX_TIM3_Init+0xa0>)
 80022ce:	f005 f859 	bl	8007384 <HAL_TIM_Encoder_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM3_Init+0x7c>
		Error_Handler();
 80022d8:	f002 fb80 	bl	80049dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_TIM3_Init+0xa0>)
 80022ea:	f005 ff05 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80022f4:	f002 fb72 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	3730      	adds	r7, #48	; 0x30
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000398 	.word	0x20000398
 8002304:	40000400 	.word	0x40000400

08002308 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	; 0x38
 800230c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800230e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	615a      	str	r2, [r3, #20]
 8002336:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002338:	4b37      	ldr	r3, [pc, #220]	; (8002418 <MX_TIM4_Init+0x110>)
 800233a:	4a38      	ldr	r2, [pc, #224]	; (800241c <MX_TIM4_Init+0x114>)
 800233c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <MX_TIM4_Init+0x110>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_TIM4_Init+0x110>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 5000;
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <MX_TIM4_Init+0x110>)
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <MX_TIM4_Init+0x110>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <MX_TIM4_Init+0x110>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800235e:	482e      	ldr	r0, [pc, #184]	; (8002418 <MX_TIM4_Init+0x110>)
 8002360:	f004 fe54 	bl	800700c <HAL_TIM_Base_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM4_Init+0x66>
		Error_Handler();
 800236a:	f002 fb37 	bl	80049dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002378:	4619      	mov	r1, r3
 800237a:	4827      	ldr	r0, [pc, #156]	; (8002418 <MX_TIM4_Init+0x110>)
 800237c:	f005 fb00 	bl	8007980 <HAL_TIM_ConfigClockSource>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM4_Init+0x82>
		Error_Handler();
 8002386:	f002 fb29 	bl	80049dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800238a:	4823      	ldr	r0, [pc, #140]	; (8002418 <MX_TIM4_Init+0x110>)
 800238c:	f004 fef0 	bl	8007170 <HAL_TIM_PWM_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM4_Init+0x92>
		Error_Handler();
 8002396:	f002 fb21 	bl	80049dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	4619      	mov	r1, r3
 80023a8:	481b      	ldr	r0, [pc, #108]	; (8002418 <MX_TIM4_Init+0x110>)
 80023aa:	f005 fea5 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80023b4:	f002 fb12 	bl	80049dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b8:	2360      	movs	r3, #96	; 0x60
 80023ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4812      	ldr	r0, [pc, #72]	; (8002418 <MX_TIM4_Init+0x110>)
 80023d0:	f005 fa14 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80023da:	f002 faff 	bl	80049dc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2204      	movs	r2, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_TIM4_Init+0x110>)
 80023e6:	f005 fa09 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80023f0:	f002 faf4 	bl	80049dc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2208      	movs	r2, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_TIM4_Init+0x110>)
 80023fc:	f005 f9fe 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM4_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8002406:	f002 fae9 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <MX_TIM4_Init+0x110>)
 800240c:	f002 fc7a 	bl	8004d04 <HAL_TIM_MspPostInit>

}
 8002410:	bf00      	nop
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000270 	.word	0x20000270
 800241c:	40000800 	.word	0x40000800

08002420 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002434:	463b      	mov	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <MX_TIM5_Init+0x94>)
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <MX_TIM5_Init+0x98>)
 8002440:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 99;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_TIM5_Init+0x94>)
 8002444:	2263      	movs	r2, #99	; 0x63
 8002446:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_TIM5_Init+0x94>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_TIM5_Init+0x94>)
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_TIM5_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_TIM5_Init+0x94>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002462:	4814      	ldr	r0, [pc, #80]	; (80024b4 <MX_TIM5_Init+0x94>)
 8002464:	f004 fdd2 	bl	800700c <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM5_Init+0x52>
		Error_Handler();
 800246e:	f002 fab5 	bl	80049dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	4619      	mov	r1, r3
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_TIM5_Init+0x94>)
 8002480:	f005 fa7e 	bl	8007980 <HAL_TIM_ConfigClockSource>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM5_Init+0x6e>
		Error_Handler();
 800248a:	f002 faa7 	bl	80049dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002496:	463b      	mov	r3, r7
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM5_Init+0x94>)
 800249c:	f005 fe2c 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80024a6:	f002 fa99 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000350 	.word	0x20000350
 80024b8:	40000c00 	.word	0x40000c00

080024bc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <MX_USART1_UART_Init+0x50>)
 80024c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_USART1_UART_Init+0x4c>)
 80024f4:	f005 fe82 	bl	80081fc <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80024fe:	f002 fa6d 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000430 	.word	0x20000430
 800250c:	40011000 	.word	0x40011000

08002510 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART6_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002548:	f005 fe58 	bl	80081fc <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002552:	f002 fa43 	bl	80049dc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000518 	.word	0x20000518
 8002560:	40011400 	.word	0x40011400

08002564 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <MX_GPIO_Init+0x1b0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a64      	ldr	r2, [pc, #400]	; (8002714 <MX_GPIO_Init+0x1b0>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <MX_GPIO_Init+0x1b0>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <MX_GPIO_Init+0x1b0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b57      	ldr	r3, [pc, #348]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b50      	ldr	r3, [pc, #320]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <MX_GPIO_Init+0x1b0>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80025ea:	2200      	movs	r2, #0
 80025ec:	f641 4105 	movw	r1, #7173	; 0x1c05
 80025f0:	4849      	ldr	r0, [pc, #292]	; (8002718 <MX_GPIO_Init+0x1b4>)
 80025f2:	f003 f8cf 	bl	8005794 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | LD2_Pin, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	4848      	ldr	r0, [pc, #288]	; (800271c <MX_GPIO_Init+0x1b8>)
 80025fc:	f003 f8ca 	bl	8005794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002600:	2200      	movs	r2, #0
 8002602:	f248 013f 	movw	r1, #32831	; 0x803f
 8002606:	4846      	ldr	r0, [pc, #280]	; (8002720 <MX_GPIO_Init+0x1bc>)
 8002608:	f003 f8c4 	bl	8005794 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_15 | GPIO_PIN_3
					| GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800260c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002616:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	483d      	ldr	r0, [pc, #244]	; (8002718 <MX_GPIO_Init+0x1b4>)
 8002624:	f002 ff1a 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC10 PC11
	 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11
 8002628:	f641 4305 	movw	r3, #7173	; 0x1c05
 800262c:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	4835      	ldr	r0, [pc, #212]	; (8002718 <MX_GPIO_Init+0x1b4>)
 8002642:	f002 ff0b 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC1 PC3 PC7 PC8
	 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8
 8002646:	f240 338a 	movw	r3, #906	; 0x38a
 800264a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	482f      	ldr	r0, [pc, #188]	; (8002718 <MX_GPIO_Init+0x1b4>)
 800265c:	f002 fefe 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | LD2_Pin;
 8002660:	232c      	movs	r3, #44	; 0x2c
 8002662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <MX_GPIO_Init+0x1b8>)
 8002678:	f002 fef0 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB15
	 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_15
 800267c:	f248 0327 	movw	r3, #32807	; 0x8027
 8002680:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4822      	ldr	r0, [pc, #136]	; (8002720 <MX_GPIO_Init+0x1bc>)
 8002696:	f002 fee1 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800269a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800269e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	481c      	ldr	r0, [pc, #112]	; (8002720 <MX_GPIO_Init+0x1bc>)
 80026b0:	f002 fed4 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80026bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <MX_GPIO_Init+0x1b4>)
 80026ca:	f002 fec7 	bl	800545c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 80026ce:	2318      	movs	r3, #24
 80026d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	480e      	ldr	r0, [pc, #56]	; (8002720 <MX_GPIO_Init+0x1bc>)
 80026e6:	f002 feb9 	bl	800545c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2017      	movs	r0, #23
 80026f0:	f002 fdeb 	bl	80052ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026f4:	2017      	movs	r0, #23
 80026f6:	f002 fe04 	bl	8005302 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2028      	movs	r0, #40	; 0x28
 8002700:	f002 fde3 	bl	80052ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002704:	2028      	movs	r0, #40	; 0x28
 8002706:	f002 fdfc 	bl	8005302 <HAL_NVIC_EnableIRQ>

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40020800 	.word	0x40020800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400

08002724 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	inputchar = *RX_BUFFER;
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d10d      	bne.n	8002750 <HAL_GPIO_EXTI_Callback+0x2c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == 1) {
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4808      	ldr	r0, [pc, #32]	; (8002758 <HAL_GPIO_EXTI_Callback+0x34>)
 8002738:	f003 f814 	bl	8005764 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d103      	bne.n	800274a <HAL_GPIO_EXTI_Callback+0x26>
			emergency = 1;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_GPIO_EXTI_Callback+0x38>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]
		} else {
			emergency = 0;
		}
	}
}
 8002748:	e002      	b.n	8002750 <HAL_GPIO_EXTI_Callback+0x2c>
			emergency = 0;
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_GPIO_EXTI_Callback+0x38>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40020800 	.word	0x40020800
 800275c:	200001fc 	.word	0x200001fc

08002760 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d109      	bne.n	8002784 <HAL_TIM_PeriodElapsedCallback+0x24>
		_micros += 4294967295;
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f112 34ff 	adds.w	r4, r2, #4294967295
 800277a:	f143 0500 	adc.w	r5, r3, #0
 800277e:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002780:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d114      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x56>
		if ((TIM2->CNT) <= 32000) {
 800278c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002796:	d807      	bhi.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x48>
			distancestamp2 += 65535;
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80027a0:	33ff      	adds	r3, #255	; 0xff
 80027a2:	4a48      	ldr	r2, [pc, #288]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e006      	b.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x56>
		} else {
			distancestamp2 -= 65535;
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80027b0:	3bff      	subs	r3, #255	; 0xff
 80027b2:	4a44      	ldr	r2, [pc, #272]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80027b4:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim3) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		if ((TIM3->CNT) <= 32000) {
 80027be:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80027c6:	d807      	bhi.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x78>
			distancestamp3 += 65535;
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80027d0:	33ff      	adds	r3, #255	; 0xff
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e006      	b.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		} else {
			distancestamp3 -= 65535;
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80027e0:	3bff      	subs	r3, #255	; 0xff
 80027e2:	4a3b      	ldr	r2, [pc, #236]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027e4:	6013      	str	r3, [r2, #0]
		}
	}
	if (htim == &htim4) {
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 8414 	bne.w	8003018 <HAL_TIM_PeriodElapsedCallback+0x8b8>
		if (require1 == 0) {
 80027f0:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d104      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0xaa>
			errorpid1[0] = 0;
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e0cf      	b.n	80029aa <HAL_TIM_PeriodElapsedCallback+0x24a>
		} else if (require1 <= 0) {
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	d870      	bhi.n	80028fc <HAL_TIM_PeriodElapsedCallback+0x19c>
			errorpid1[0] = velocitypulse1
					- require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe3e 	bl	80004a0 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe37 	bl	80004a0 <__aeabi_f2d>
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002838:	f7fd fe8a 	bl	8000550 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800284a:	f7fd fe81 	bl	8000550 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800285c:	f7fd fe78 	bl	8000550 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800286e:	f7fd fe6f 	bl	8000550 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002880:	f7fd ff90 	bl	80007a4 <__aeabi_ddiv>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002892:	f7fd ff87 	bl	80007a4 <__aeabi_ddiv>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fc9f 	bl	80001e0 <__aeabi_dsub>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f8eb 	bl	8000a84 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
			errorpid1[0] = velocitypulse1
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e079      	b.n	80029aa <HAL_TIM_PeriodElapsedCallback+0x24a>
 80028b6:	bf00      	nop
 80028b8:	20000350 	.word	0x20000350
 80028bc:	20000000 	.word	0x20000000
 80028c0:	2000055c 	.word	0x2000055c
 80028c4:	20000044 	.word	0x20000044
 80028c8:	20000398 	.word	0x20000398
 80028cc:	40000400 	.word	0x40000400
 80028d0:	20000048 	.word	0x20000048
 80028d4:	20000270 	.word	0x20000270
 80028d8:	20000138 	.word	0x20000138
 80028dc:	20000130 	.word	0x20000130
 80028e0:	200001a8 	.word	0x200001a8
 80028e4:	40280000 	.word	0x40280000
 80028e8:	40500000 	.word	0x40500000
 80028ec:	40100000 	.word	0x40100000
 80028f0:	40340000 	.word	0x40340000
 80028f4:	402e0000 	.word	0x402e0000
 80028f8:	40200000 	.word	0x40200000
		} else if (require1 > 0) {
 80028fc:	4b97      	ldr	r3, [pc, #604]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	dd4e      	ble.n	80029aa <HAL_TIM_PeriodElapsedCallback+0x24a>
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 800290c:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fdc5 	bl	80004a0 <__aeabi_f2d>
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800291c:	f7fd fe18 	bl	8000550 <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b8d      	ldr	r3, [pc, #564]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800292e:	f7fd fe0f 	bl	8000550 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002940:	f7fd fe06 	bl	8000550 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002952:	f7fd fdfd 	bl	8000550 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002964:	f7fd ff1e 	bl	80007a4 <__aeabi_ddiv>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002976:	f7fd ff15 	bl	80007a4 <__aeabi_ddiv>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4614      	mov	r4, r2
 8002980:	461d      	mov	r5, r3
					- velocitypulse1;
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd8a 	bl	80004a0 <__aeabi_f2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fc24 	bl	80001e0 <__aeabi_dsub>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7fe f870 	bl	8000a84 <__aeabi_d2f>
 80029a4:	4603      	mov	r3, r0
			errorpid1[0] = require1 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80029a8:	6013      	str	r3, [r2, #0]
		}
		sumpid1 = sumpid1 + errorpid1[0];
 80029aa:	4b74      	ldr	r3, [pc, #464]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80029bc:	edc3 7a00 	vstr	s15, [r3]
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 80029c0:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d0:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80029d2:	edd3 6a00 	vldr	s13, [r3]
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd1 * (errorpid1[0] - errorpid1[1]));
 80029e4:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80029e6:	edd3 6a00 	vldr	s13, [r3]
 80029ea:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80029ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80029f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029f4:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm1 = (Kp1 * errorpid1[0] + Ki1 * sumpid1
 8002a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a06:	ee17 2a90 	vmov	r2, s15
 8002a0a:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a0c:	601a      	str	r2, [r3, #0]
		errorpid1[1] = errorpid1[0];
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002a14:	6053      	str	r3, [r2, #4]
		if (pwm1 < 0) {
 8002a16:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da18      	bge.n	8002a50 <HAL_TIM_PeriodElapsedCallback+0x2f0>
			pwm1 = -pwm1;
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	425b      	negs	r3, r3
 8002a24:	4a5a      	ldr	r2, [pc, #360]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a26:	6013      	str	r3, [r2, #0]
			in1 = !in1;
 8002a28:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002a3a:	601a      	str	r2, [r3, #0]
			in2 = !in2;
 8002a3c:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002a4e:	601a      	str	r2, [r3, #0]
		}
		if (pwm1 > 5000)
 8002a50:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	dd03      	ble.n	8002a64 <HAL_TIM_PeriodElapsedCallback+0x304>
			pwm1 = 5000;
 8002a5c:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	601a      	str	r2, [r3, #0]
		if ((limitswitch1 == 1 && in1 == 0 && in2 == 1) || emergency == 1) {
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_PeriodElapsedCallback+0x31c>
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <HAL_TIM_PeriodElapsedCallback+0x31c>
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d003      	beq.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x324>
 8002a7c:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d108      	bne.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x336>
			pwm1 = 0;
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
			in1 = 0;
 8002a8a:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
			in2 = 0;
 8002a90:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
		}
		if (require2 == 0) {
 8002a96:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d104      	bne.n	8002ab0 <HAL_TIM_PeriodElapsedCallback+0x350>
			errorpid2[0] = 0;
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e0d6      	b.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x4fe>
		} else if (require2 <= 0) {
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d877      	bhi.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x450>
			errorpid2[0] = velocitypulse2
					- require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0;
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fceb 	bl	80004a0 <__aeabi_f2d>
 8002aca:	4604      	mov	r4, r0
 8002acc:	460d      	mov	r5, r1
 8002ace:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fce4 	bl	80004a0 <__aeabi_f2d>
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002ade:	f7fd fd37 	bl	8000550 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002af0:	f7fd fd2e 	bl	8000550 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002b02:	f7fd fd25 	bl	8000550 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002b14:	f7fd fd1c 	bl	8000550 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002b26:	f7fd fe3d 	bl	80007a4 <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002b38:	f7fd fe34 	bl	80007a4 <__aeabi_ddiv>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fb4c 	bl	80001e0 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7fd ff98 	bl	8000a84 <__aeabi_d2f>
 8002b54:	4603      	mov	r3, r0
			errorpid2[0] = velocitypulse2
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e080      	b.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x4fe>
 8002b5c:	20000138 	.word	0x20000138
 8002b60:	40280000 	.word	0x40280000
 8002b64:	40500000 	.word	0x40500000
 8002b68:	40100000 	.word	0x40100000
 8002b6c:	40340000 	.word	0x40340000
 8002b70:	402e0000 	.word	0x402e0000
 8002b74:	40200000 	.word	0x40200000
 8002b78:	200001a8 	.word	0x200001a8
 8002b7c:	20000130 	.word	0x20000130
 8002b80:	2000012c 	.word	0x2000012c
 8002b84:	20000038 	.word	0x20000038
 8002b88:	20000128 	.word	0x20000128
 8002b8c:	20000124 	.word	0x20000124
 8002b90:	2000008c 	.word	0x2000008c
 8002b94:	20000084 	.word	0x20000084
 8002b98:	20000088 	.word	0x20000088
 8002b9c:	2000016c 	.word	0x2000016c
 8002ba0:	200001fc 	.word	0x200001fc
 8002ba4:	20000150 	.word	0x20000150
 8002ba8:	20000148 	.word	0x20000148
 8002bac:	200001ac 	.word	0x200001ac
		} else if (require2 > 0) {
 8002bb0:	4b9b      	ldr	r3, [pc, #620]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	dd4e      	ble.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x4fe>
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002bc0:	4b97      	ldr	r3, [pc, #604]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc6b 	bl	80004a0 <__aeabi_f2d>
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b95      	ldr	r3, [pc, #596]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002bd0:	f7fd fcbe 	bl	8000550 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b8e      	ldr	r3, [pc, #568]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8002bf4:	f7fd fcac 	bl	8000550 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8002c06:	f7fd fca3 	bl	8000550 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8002c18:	f7fd fdc4 	bl	80007a4 <__aeabi_ddiv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8002c2a:	f7fd fdbb 	bl	80007a4 <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
					- velocitypulse2;
 8002c36:	4b81      	ldr	r3, [pc, #516]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fc30 	bl	80004a0 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4620      	mov	r0, r4
 8002c46:	4629      	mov	r1, r5
 8002c48:	f7fd faca 	bl	80001e0 <__aeabi_dsub>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ff16 	bl	8000a84 <__aeabi_d2f>
 8002c58:	4603      	mov	r3, r0
			errorpid2[0] = require2 * 12.0 * 64.0 * 4.0 * 20.0 / 15.0 / 8.0
 8002c5a:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002c5c:	6013      	str	r3, [r2, #0]
		}
		sumpid2 = sumpid2 + errorpid2[0];
 8002c5e:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	4b75      	ldr	r3, [pc, #468]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002c70:	edc3 7a00 	vstr	s15, [r3]
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 8002c74:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002c76:	ed93 7a00 	vldr	s14, [r3]
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8002c86:	edd3 6a00 	vldr	s13, [r3]
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd2 * (errorpid2[0] - errorpid2[1]));
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002c9a:	edd3 6a00 	vldr	s13, [r3]
 8002c9e:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm2 = (Kp2 * errorpid2[0] + Ki2 * sumpid2
 8002cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cba:	ee17 2a90 	vmov	r2, s15
 8002cbe:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002cc0:	601a      	str	r2, [r3, #0]
		errorpid2[1] = errorpid2[0];
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5e      	ldr	r2, [pc, #376]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002cc8:	6053      	str	r3, [r2, #4]
		if (pwm2 < 0) {
 8002cca:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da18      	bge.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x5a4>
			pwm2 = -pwm2;
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	425b      	negs	r3, r3
 8002cd8:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002cda:	6013      	str	r3, [r2, #0]
			in3 = !in3;
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b5a      	ldr	r3, [pc, #360]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002cee:	601a      	str	r2, [r3, #0]
			in4 = !in4;
 8002cf0:	4b5a      	ldr	r3, [pc, #360]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002d02:	601a      	str	r2, [r3, #0]
		}
		if (pwm2 > 5000)
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	dd03      	ble.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x5b8>
			pwm2 = 5000;
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	601a      	str	r2, [r3, #0]
		if ((limitswitch2 == 1 && in3 == 0 && in4 == 1) || emergency == 1) {
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8002d20:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d003      	beq.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x5d8>
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x5de>
			pwm2 = 0;
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
		}
		if (require3 == 0) {
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	d104      	bne.n	8002d58 <HAL_TIM_PeriodElapsedCallback+0x5f8>
			errorpid3[0] = 0;
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e0ef      	b.n	8002f38 <HAL_TIM_PeriodElapsedCallback+0x7d8>
		} else if (require3 <= 0) {
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	f200 8087 	bhi.w	8002e78 <HAL_TIM_PeriodElapsedCallback+0x718>
			errorpid3[0] = velocitypulse3
					- require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0 / 5.08;
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb96 	bl	80004a0 <__aeabi_f2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fb8f 	bl	80004a0 <__aeabi_f2d>
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002d88:	f7fd fbe2 	bl	8000550 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8002d9a:	f7fd fbd9 	bl	8000550 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8002dac:	f7fd fbd0 	bl	8000550 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8002dbe:	f7fd fbc7 	bl	8000550 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8002dd0:	f7fd fce8 	bl	80007a4 <__aeabi_ddiv>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002de2:	f7fd fcdf 	bl	80007a4 <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	a30a      	add	r3, pc, #40	; (adr r3, 8002e18 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fcd6 	bl	80007a4 <__aeabi_ddiv>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd f9ee 	bl	80001e0 <__aeabi_dsub>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe3a 	bl	8000a84 <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
			errorpid3[0] = velocitypulse3
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e08f      	b.n	8002f38 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8002e18:	851eb852 	.word	0x851eb852
 8002e1c:	401451eb 	.word	0x401451eb
 8002e20:	20000150 	.word	0x20000150
 8002e24:	40280000 	.word	0x40280000
 8002e28:	40500000 	.word	0x40500000
 8002e2c:	40100000 	.word	0x40100000
 8002e30:	40340000 	.word	0x40340000
 8002e34:	402e0000 	.word	0x402e0000
 8002e38:	40200000 	.word	0x40200000
 8002e3c:	200001ac 	.word	0x200001ac
 8002e40:	20000148 	.word	0x20000148
 8002e44:	20000144 	.word	0x20000144
 8002e48:	2000003c 	.word	0x2000003c
 8002e4c:	20000140 	.word	0x20000140
 8002e50:	2000013c 	.word	0x2000013c
 8002e54:	20000098 	.word	0x20000098
 8002e58:	20000090 	.word	0x20000090
 8002e5c:	20000094 	.word	0x20000094
 8002e60:	20000170 	.word	0x20000170
 8002e64:	200001fc 	.word	0x200001fc
 8002e68:	20000168 	.word	0x20000168
 8002e6c:	20000160 	.word	0x20000160
 8002e70:	200001b0 	.word	0x200001b0
 8002e74:	40240000 	.word	0x40240000
		} else if (require3 > 0) {
 8002e78:	4b6b      	ldr	r3, [pc, #428]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	dd57      	ble.n	8002f38 <HAL_TIM_PeriodElapsedCallback+0x7d8>
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0/5.08
 8002e88:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb07 	bl	80004a0 <__aeabi_f2d>
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002e98:	f7fd fb5a 	bl	8000550 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8002eaa:	f7fd fb51 	bl	8000550 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8002ebc:	f7fd fb48 	bl	8000550 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002ece:	f7fd fb3f 	bl	8000550 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002ee0:	f7fd fc60 	bl	80007a4 <__aeabi_ddiv>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002ef2:	f7fd fc57 	bl	80007a4 <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	a348      	add	r3, pc, #288	; (adr r3, 8003020 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fc4e 	bl	80007a4 <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	461d      	mov	r5, r3
					- velocitypulse3;
 8002f10:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fac3 	bl	80004a0 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd f95d 	bl	80001e0 <__aeabi_dsub>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fd fda9 	bl	8000a84 <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
			errorpid3[0] = require3 * 12.0 * 64.0 * 4.0 * 15.0 / 10.0 / 12.0/5.08
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f36:	6013      	str	r3, [r2, #0]
		}
		sumpid3 = sumpid3 + errorpid3[0];
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f3a:	ed93 7a00 	vldr	s14, [r3]
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002f4a:	edc3 7a00 	vstr	s15, [r3]
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f5e:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8002f60:	edd3 6a00 	vldr	s13, [r3]
 8002f64:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Kd3 * (errorpid3[0] - errorpid3[1]));
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f74:	edd3 6a00 	vldr	s13, [r3]
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		pwm3 = (Kp3 * errorpid3[0] + Ki3 * sumpid3
 8002f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f94:	ee17 2a90 	vmov	r2, s15
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002f9a:	601a      	str	r2, [r3, #0]
		errorpid3[1] = errorpid3[0];
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002fa2:	6053      	str	r3, [r2, #4]
		if (pwm3 < 0) {
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da18      	bge.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x87e>
							pwm3 = -pwm3;
 8002fac:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	4a29      	ldr	r2, [pc, #164]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002fb4:	6013      	str	r3, [r2, #0]
							in5 = !in5;
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002fc8:	601a      	str	r2, [r3, #0]
							in6 = !in6;
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002fdc:	601a      	str	r2, [r3, #0]
						}
		if (pwm3 > 2300)
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	dd03      	ble.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x892>
			pwm3 = 2300;
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002fec:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002ff0:	601a      	str	r2, [r3, #0]
		if ((limitswitch3 == 1 && in5 == 0 && in6 == 1) || emergency == 1) {
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x8aa>
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x8aa>
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d003      	beq.n	8003012 <HAL_TIM_PeriodElapsedCallback+0x8b2>
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_TIM_PeriodElapsedCallback+0x8b8>
			pwm3 = 0;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bdb0      	pop	{r4, r5, r7, pc}
 8003020:	851eb852 	.word	0x851eb852
 8003024:	401451eb 	.word	0x401451eb
 8003028:	20000168 	.word	0x20000168
 800302c:	40280000 	.word	0x40280000
 8003030:	40500000 	.word	0x40500000
 8003034:	40100000 	.word	0x40100000
 8003038:	402e0000 	.word	0x402e0000
 800303c:	40240000 	.word	0x40240000
 8003040:	200001b0 	.word	0x200001b0
 8003044:	20000160 	.word	0x20000160
 8003048:	2000015c 	.word	0x2000015c
 800304c:	20000040 	.word	0x20000040
 8003050:	20000158 	.word	0x20000158
 8003054:	20000154 	.word	0x20000154
 8003058:	200000a4 	.word	0x200000a4
 800305c:	2000009c 	.word	0x2000009c
 8003060:	200000a0 	.word	0x200000a0
 8003064:	20000174 	.word	0x20000174
 8003068:	200001fc 	.word	0x200001fc

0800306c <micros>:

uint64_t micros() {
 800306c:	b4b0      	push	{r4, r5, r7}
 800306e:	af00      	add	r7, sp, #0
	return _micros + htim5.Instance->CNT;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <micros+0x2c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	4618      	mov	r0, r3
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <micros+0x30>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	1884      	adds	r4, r0, r2
 8003084:	eb41 0503 	adc.w	r5, r1, r3
 8003088:	4622      	mov	r2, r4
 800308a:	462b      	mov	r3, r5
}
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	bcb0      	pop	{r4, r5, r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000350 	.word	0x20000350
 800309c:	20000000 	.word	0x20000000

080030a0 <hx711_delay_us>:
//#############################################################################################
void hx711_delay_us(void) {
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
	uint64_t delay = micros();
 80030a6:	f7ff ffe1 	bl	800306c <micros>
 80030aa:	e9c7 0100 	strd	r0, r1, [r7]
	while (delay - micros() <= 1)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffdc 	bl	800306c <micros>
 80030b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b8:	1a14      	subs	r4, r2, r0
 80030ba:	eb63 0501 	sbc.w	r5, r3, r1
 80030be:	2d00      	cmp	r5, #0
 80030c0:	bf08      	it	eq
 80030c2:	2c02      	cmpeq	r4, #2
 80030c4:	d3f4      	bcc.n	80030b0 <hx711_delay_us+0x10>
		;
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bdb0      	pop	{r4, r5, r7, pc}

080030d0 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711) {
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	while (hx711->lock)
 80030d8:	bf00      	nop
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7f1b      	ldrb	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1fb      	bne.n	80030da <hx711_lock+0xa>
		;
	hx711->lock = 1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	771a      	strb	r2, [r3, #28]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <hx711_init>:
void hx711_unlock(hx711_t *hx711) {
	hx711->lock = 0;
}
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin,
		GPIO_TypeDef *dat_gpio, uint16_t dat_pin) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
	hx711_lock(hx711);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ffe3 	bl	80030d0 <hx711_lock>
	hx711->clk_gpio = clk_gpio;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	601a      	str	r2, [r3, #0]
	hx711->clk_pin = clk_pin;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	811a      	strh	r2, [r3, #8]
	hx711->dat_gpio = dat_gpio;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	605a      	str	r2, [r3, #4]
	hx711->dat_pin = dat_pin;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003120:	815a      	strh	r2, [r3, #10]

	GPIO_InitTypeDef gpio = { 0 };
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800313a:	2302      	movs	r3, #2
 800313c:	623b      	str	r3, [r7, #32]
	gpio.Pin = clk_pin;
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(clk_gpio, &gpio);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	68b8      	ldr	r0, [r7, #8]
 800314a:	f002 f987 	bl	800545c <HAL_GPIO_Init>
	gpio.Mode = GPIO_MODE_INPUT;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_PULLUP;
 8003152:	2301      	movs	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8003156:	2302      	movs	r3, #2
 8003158:	623b      	str	r3, [r7, #32]
	gpio.Pin = dat_pin;
 800315a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800315c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dat_gpio, &gpio);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f002 f979 	bl	800545c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	891b      	ldrh	r3, [r3, #8]
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	f002 fb0d 	bl	8005794 <HAL_GPIO_WritePin>
	hx711_delay(10);
 800317a:	200a      	movs	r0, #10
 800317c:	f001 ffa6 	bl	80050cc <HAL_Delay>
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	891b      	ldrh	r3, [r3, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	4619      	mov	r1, r3
 800318c:	f002 fb02 	bl	8005794 <HAL_GPIO_WritePin>
	hx711_delay(10);
 8003190:	200a      	movs	r0, #10
 8003192:	f001 ff9b 	bl	80050cc <HAL_Delay>
}
 8003196:	bf00      	nop
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
	if (tare == 1) {
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <hx711_value+0x120>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d11a      	bne.n	80031ea <hx711_value+0x4a>
		uint32_t startTime = HAL_GetTick();
 80031b4:	f001 ff7e 	bl	80050b4 <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 80031ba:	e008      	b.n	80031ce <hx711_value+0x2e>
			if (HAL_GetTick() - startTime > 150)
 80031bc:	f001 ff7a 	bl	80050b4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b96      	cmp	r3, #150	; 0x96
 80031c8:	d901      	bls.n	80031ce <hx711_value+0x2e>
				return 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e074      	b.n	80032b8 <hx711_value+0x118>
		while (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET) {
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	895b      	ldrh	r3, [r3, #10]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f002 fac3 	bl	8005764 <HAL_GPIO_ReadPin>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d0eb      	beq.n	80031bc <hx711_value+0x1c>
		}
		tare = 0;
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <hx711_value+0x120>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	895b      	ldrh	r3, [r3, #10]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f002 fab5 	bl	8005764 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d15a      	bne.n	80032b6 <hx711_value+0x116>
		for (int8_t i = 0; i < 24; i++) {
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
 8003204:	e02a      	b.n	800325c <hx711_value+0xbc>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	891b      	ldrh	r3, [r3, #8]
 800320e:	2201      	movs	r2, #1
 8003210:	4619      	mov	r1, r3
 8003212:	f002 fabf 	bl	8005794 <HAL_GPIO_WritePin>
			hx711_delay_us();
 8003216:	f7ff ff43 	bl	80030a0 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	891b      	ldrh	r3, [r3, #8]
 8003222:	2200      	movs	r2, #0
 8003224:	4619      	mov	r1, r3
 8003226:	f002 fab5 	bl	8005794 <HAL_GPIO_WritePin>
			hx711_delay_us();
 800322a:	f7ff ff39 	bl	80030a0 <hx711_delay_us>
			data = data << 1;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	617b      	str	r3, [r7, #20]
			if (HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	895b      	ldrh	r3, [r3, #10]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f002 fa90 	bl	8005764 <HAL_GPIO_ReadPin>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <hx711_value+0xb0>
					== GPIO_PIN_SET)
				data++;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
		for (int8_t i = 0; i < 24; i++) {
 8003250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	74fb      	strb	r3, [r7, #19]
 800325c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003260:	2b17      	cmp	r3, #23
 8003262:	ddd0      	ble.n	8003206 <hx711_value+0x66>
		}
		for (int8_t i = 0; i < hx711_channel; i++) {
 8003264:	2300      	movs	r3, #0
 8003266:	74bb      	strb	r3, [r7, #18]
 8003268:	e019      	b.n	800329e <hx711_value+0xfe>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	891b      	ldrh	r3, [r3, #8]
 8003272:	2201      	movs	r2, #1
 8003274:	4619      	mov	r1, r3
 8003276:	f002 fa8d 	bl	8005794 <HAL_GPIO_WritePin>
			hx711_delay_us();
 800327a:	f7ff ff11 	bl	80030a0 <hx711_delay_us>
			HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	891b      	ldrh	r3, [r3, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	4619      	mov	r1, r3
 800328a:	f002 fa83 	bl	8005794 <HAL_GPIO_WritePin>
			hx711_delay_us();
 800328e:	f7ff ff07 	bl	80030a0 <hx711_delay_us>
		for (int8_t i = 0; i < hx711_channel; i++) {
 8003292:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	74bb      	strb	r3, [r7, #18]
 800329e:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <hx711_value+0x124>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dbdf      	blt.n	800326a <hx711_value+0xca>
		}
		data = data ^ 0x800000;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80032b0:	617b      	str	r3, [r7, #20]
		return data;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	e000      	b.n	80032b8 <hx711_value+0x118>
	} else {
		return 100000;
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <hx711_value+0x128>)
	}
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	2000011c 	.word	0x2000011c
 80032c4:	20000008 	.word	0x20000008
 80032c8:	000186a0 	.word	0x000186a0

080032cc <hx711_tare>:
	int32_t answer = (int32_t) (ave / sample);
	hx711_unlock(hx711);
	return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample, int unit) {
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	460b      	mov	r3, r1
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	817b      	strh	r3, [r7, #10]
	if (unit == 1) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d158      	bne.n	8003392 <hx711_tare+0xc6>
		float w1 = 0;
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
		float w2 = 0;
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
		for (int i = 1; i < 5; i++) {
 80032ec:	2301      	movs	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e01a      	b.n	8003328 <hx711_tare+0x5c>
			w1 += tareweight1[i];
 80032f2:	4a59      	ldr	r2, [pc, #356]	; (8003458 <hx711_tare+0x18c>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			w2 += tareweight2[i];
 800330a:	4a54      	ldr	r2, [pc, #336]	; (800345c <hx711_tare+0x190>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	ed97 7a08 	vldr	s14, [r7, #32]
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	edc7 7a08 	vstr	s15, [r7, #32]
		for (int i = 1; i < 5; i++) {
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3301      	adds	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b04      	cmp	r3, #4
 800332c:	dde1      	ble.n	80032f2 <hx711_tare+0x26>
		}
		hx711->offsetA = (w1 * (hx711->coefA)) / 4 + (hx711->offsetA);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	ed93 7a04 	vldr	s14, [r3, #16]
 8003334:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003340:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003358:	ee17 2a90 	vmov	r2, s15
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w2 * (hx711->coefB)) / 4 + (hx711->offsetB);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	ed93 7a06 	vldr	s14, [r3, #24]
 8003366:	edd7 7a08 	vldr	s15, [r7, #32]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003372:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338a:	ee17 2a90 	vmov	r2, s15
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	615a      	str	r2, [r3, #20]
	}
	if (unit == 2) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d158      	bne.n	800344a <hx711_tare+0x17e>
		float w3 = 0;
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
		float w4 = 0;
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
		for (int i = 1; i < 5; i++) {
 80033a4:	2301      	movs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e01a      	b.n	80033e0 <hx711_tare+0x114>
			w3 += tareweight3[i];
 80033aa:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <hx711_tare+0x194>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80033ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033be:	edc7 7a06 	vstr	s15, [r7, #24]
			w4 += tareweight4[i];
 80033c2:	4a28      	ldr	r2, [pc, #160]	; (8003464 <hx711_tare+0x198>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 1; i < 5; i++) {
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	3301      	adds	r3, #1
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	dde1      	ble.n	80033aa <hx711_tare+0xde>
		}
		hx711->offsetA = (w3 * (hx711->coefA)) / 4 + (hx711->offsetA);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80033ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80033f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80033f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 2a90 	vmov	r2, s15
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	60da      	str	r2, [r3, #12]
		hx711->offsetB = (w4 * (hx711->coefB)) / 4 + (hx711->offsetB);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	ed93 7a06 	vldr	s14, [r3, #24]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800342a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	615a      	str	r2, [r3, #20]
	}

}
 800344a:	bf00      	nop
 800344c:	372c      	adds	r7, #44	; 0x2c
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	200000bc 	.word	0x200000bc
 800345c:	200000d0 	.word	0x200000d0
 8003460:	200000e4 	.word	0x200000e4
 8003464:	200000f8 	.word	0x200000f8

08003468 <hx711_calibration>:
//#############################################################################################
void hx711_calibration(hx711_t *hx711, int32_t channel, float scale) {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	ed87 0a01 	vstr	s0, [r7, #4]

	if (channel == 1) {
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <hx711_calibration+0x1a>
		hx711->coefA = scale;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]
	}
	if (channel == 2) {
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d102      	bne.n	800348e <hx711_calibration+0x26>
		hx711->coefB = scale;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	619a      	str	r2, [r3, #24]
	}

}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <hx711_weight>:
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample, uint8_t num) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
	if (hx_711readtimestamp[1] == 1 && num == 1) {
 80034ac:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <hx711_weight+0x228>)
 80034ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf08      	it	eq
 80034b6:	2a01      	cmpeq	r2, #1
 80034b8:	d143      	bne.n	8003542 <hx711_weight+0xa6>
 80034ba:	787b      	ldrb	r3, [r7, #1]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d140      	bne.n	8003542 <hx711_weight+0xa6>
		if (loadcellc1 > 0 && loadcellc1 < 10) {
 80034c0:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <hx711_weight+0x22c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03c      	beq.n	8003542 <hx711_weight+0xa6>
 80034c8:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <hx711_weight+0x22c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d838      	bhi.n	8003542 <hx711_weight+0xa6>
			hx711_channel = 1;
 80034d0:	4b7e      	ldr	r3, [pc, #504]	; (80036cc <hx711_weight+0x230>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
			int value = hx711_value(hx711);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fe62 	bl	80031a0 <hx711_value>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24
			if (value != 100000) {
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	4a7b      	ldr	r2, [pc, #492]	; (80036d0 <hx711_weight+0x234>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02d      	beq.n	8003542 <hx711_weight+0xa6>
				if (start == 1)
 80034e6:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <hx711_weight+0x238>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d103      	bne.n	80034f6 <hx711_weight+0x5a>
					start = 0;
 80034ee:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <hx711_weight+0x238>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e025      	b.n	8003542 <hx711_weight+0xa6>
				else {
					loadcellc1 -= 1;
 80034f6:	4b74      	ldr	r3, [pc, #464]	; (80036c8 <hx711_weight+0x22c>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <hx711_weight+0x22c>)
 8003500:	701a      	strb	r2, [r3, #0]
					timecheck[1] += 1;
 8003502:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <hx711_weight+0x23c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	3301      	adds	r3, #1
 8003508:	4a73      	ldr	r2, [pc, #460]	; (80036d8 <hx711_weight+0x23c>)
 800350a:	6053      	str	r3, [r2, #4]
					ave1 += value;
 800350c:	4b73      	ldr	r3, [pc, #460]	; (80036dc <hx711_weight+0x240>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	4413      	add	r3, r2
 8003514:	4a71      	ldr	r2, [pc, #452]	; (80036dc <hx711_weight+0x240>)
 8003516:	6013      	str	r3, [r2, #0]
					if (loadcellc1 == 0) {
 8003518:	4b6b      	ldr	r3, [pc, #428]	; (80036c8 <hx711_weight+0x22c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d110      	bne.n	8003542 <hx711_weight+0xa6>
						hx_711readtimestamp[1] = 2;
 8003520:	4968      	ldr	r1, [pc, #416]	; (80036c4 <hx711_weight+0x228>)
 8003522:	f04f 0202 	mov.w	r2, #2
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 800352e:	f7ff fd9d 	bl	800306c <micros>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4963      	ldr	r1, [pc, #396]	; (80036c4 <hx711_weight+0x228>)
 8003538:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <hx711_weight+0x238>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp[1] == 2 && num == 1) {
 8003542:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <hx711_weight+0x228>)
 8003544:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf08      	it	eq
 800354c:	2a02      	cmpeq	r2, #2
 800354e:	d14e      	bne.n	80035ee <hx711_weight+0x152>
 8003550:	787b      	ldrb	r3, [r7, #1]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d14b      	bne.n	80035ee <hx711_weight+0x152>
		if (loadcellc2 > 0 && loadcellc2 < 10) {
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <hx711_weight+0x244>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d047      	beq.n	80035ee <hx711_weight+0x152>
 800355e:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <hx711_weight+0x244>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b09      	cmp	r3, #9
 8003564:	d843      	bhi.n	80035ee <hx711_weight+0x152>
			hx711_channel = 2;
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <hx711_weight+0x230>)
 8003568:	2202      	movs	r2, #2
 800356a:	601a      	str	r2, [r3, #0]
			int value2 = hx711_value(hx711);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fe17 	bl	80031a0 <hx711_value>
 8003572:	6238      	str	r0, [r7, #32]
			if (value2 != 100000) {
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <hx711_weight+0x234>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d038      	beq.n	80035ee <hx711_weight+0x152>
				if (start == 1) {
 800357c:	4b55      	ldr	r3, [pc, #340]	; (80036d4 <hx711_weight+0x238>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d109      	bne.n	8003598 <hx711_weight+0xfc>
					start = 0;
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <hx711_weight+0x238>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
					timecheck[0] = micros();
 800358a:	f7ff fd6f 	bl	800306c <micros>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <hx711_weight+0x23c>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e02a      	b.n	80035ee <hx711_weight+0x152>
				} else {
					timecheck[1] = micros() - timecheck[0];
 8003598:	f7ff fd68 	bl	800306c <micros>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <hx711_weight+0x23c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <hx711_weight+0x23c>)
 80035aa:	605a      	str	r2, [r3, #4]
					loadcellc2 -= 1;
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <hx711_weight+0x244>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <hx711_weight+0x244>)
 80035b6:	701a      	strb	r2, [r3, #0]
					ave2 += value2;
 80035b8:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <hx711_weight+0x248>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4413      	add	r3, r2
 80035c0:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <hx711_weight+0x248>)
 80035c2:	6013      	str	r3, [r2, #0]
					if (loadcellc2 == 0) {
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <hx711_weight+0x244>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d110      	bne.n	80035ee <hx711_weight+0x152>
						hx_711readtimestamp[1] = 1;
 80035cc:	493d      	ldr	r1, [pc, #244]	; (80036c4 <hx711_weight+0x228>)
 80035ce:	f04f 0201 	mov.w	r2, #1
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp[0] = micros();
 80035da:	f7ff fd47 	bl	800306c <micros>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4938      	ldr	r1, [pc, #224]	; (80036c4 <hx711_weight+0x228>)
 80035e4:	e9c1 2300 	strd	r2, r3, [r1]
						start = 1;
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <hx711_weight+0x238>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 1 && num == 2) {
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <hx711_weight+0x24c>)
 80035f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf08      	it	eq
 80035f8:	2a01      	cmpeq	r2, #1
 80035fa:	d13e      	bne.n	800367a <hx711_weight+0x1de>
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d13b      	bne.n	800367a <hx711_weight+0x1de>
		if (loadcellc3 > 0 && loadcellc3 < 10) {
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <hx711_weight+0x250>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d037      	beq.n	800367a <hx711_weight+0x1de>
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <hx711_weight+0x250>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b09      	cmp	r3, #9
 8003610:	d833      	bhi.n	800367a <hx711_weight+0x1de>
			hx711_channel = 1;
 8003612:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <hx711_weight+0x230>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]
			int value3 = hx711_value(hx711);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fdc1 	bl	80031a0 <hx711_value>
 800361e:	61f8      	str	r0, [r7, #28]
			if (value3 != 100000) {
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <hx711_weight+0x234>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d028      	beq.n	800367a <hx711_weight+0x1de>
				if (start2 == 1)
 8003628:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <hx711_weight+0x254>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d103      	bne.n	8003638 <hx711_weight+0x19c>
					start2 = 0;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <hx711_weight+0x254>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e020      	b.n	800367a <hx711_weight+0x1de>
				else {
					loadcellc3 -= 1;
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <hx711_weight+0x250>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3b01      	subs	r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <hx711_weight+0x250>)
 8003642:	701a      	strb	r2, [r3, #0]
					ave3 += value3;
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <hx711_weight+0x258>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <hx711_weight+0x258>)
 800364e:	6013      	str	r3, [r2, #0]
					if (loadcellc3 == 0) {
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <hx711_weight+0x250>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d110      	bne.n	800367a <hx711_weight+0x1de>
						hx_711readtimestamp2[1] = 2;
 8003658:	4923      	ldr	r1, [pc, #140]	; (80036e8 <hx711_weight+0x24c>)
 800365a:	f04f 0202 	mov.w	r2, #2
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 8003666:	f7ff fd01 	bl	800306c <micros>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	491e      	ldr	r1, [pc, #120]	; (80036e8 <hx711_weight+0x24c>)
 8003670:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <hx711_weight+0x254>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if (hx_711readtimestamp2[1] == 2 && num == 2) {
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <hx711_weight+0x24c>)
 800367c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf08      	it	eq
 8003684:	2a02      	cmpeq	r2, #2
 8003686:	d15a      	bne.n	800373e <hx711_weight+0x2a2>
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d157      	bne.n	800373e <hx711_weight+0x2a2>
		if (loadcellc4 > 0 && loadcellc4 < 10) {
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <hx711_weight+0x25c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d053      	beq.n	800373e <hx711_weight+0x2a2>
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <hx711_weight+0x25c>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b09      	cmp	r3, #9
 800369c:	d84f      	bhi.n	800373e <hx711_weight+0x2a2>
			hx711_channel = 2;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <hx711_weight+0x230>)
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
			int value4 = hx711_value(hx711);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fd7b 	bl	80031a0 <hx711_value>
 80036aa:	61b8      	str	r0, [r7, #24]
			if (value4 != 100000) {
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <hx711_weight+0x234>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d044      	beq.n	800373e <hx711_weight+0x2a2>
				if (start2 == 1)
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <hx711_weight+0x254>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d11f      	bne.n	80036fc <hx711_weight+0x260>
					start2 = 0;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <hx711_weight+0x254>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e03c      	b.n	800373e <hx711_weight+0x2a2>
 80036c4:	20000010 	.word	0x20000010
 80036c8:	200000b8 	.word	0x200000b8
 80036cc:	20000008 	.word	0x20000008
 80036d0:	000186a0 	.word	0x000186a0
 80036d4:	20000030 	.word	0x20000030
 80036d8:	200000b0 	.word	0x200000b0
 80036dc:	2000010c 	.word	0x2000010c
 80036e0:	200000b9 	.word	0x200000b9
 80036e4:	20000110 	.word	0x20000110
 80036e8:	20000020 	.word	0x20000020
 80036ec:	200000ba 	.word	0x200000ba
 80036f0:	20000034 	.word	0x20000034
 80036f4:	20000114 	.word	0x20000114
 80036f8:	200000bb 	.word	0x200000bb
				else {
					loadcellc4 -= 1;
 80036fc:	4bb9      	ldr	r3, [pc, #740]	; (80039e4 <hx711_weight+0x548>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4bb7      	ldr	r3, [pc, #732]	; (80039e4 <hx711_weight+0x548>)
 8003706:	701a      	strb	r2, [r3, #0]
					ave4 += value4;
 8003708:	4bb7      	ldr	r3, [pc, #732]	; (80039e8 <hx711_weight+0x54c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	4ab5      	ldr	r2, [pc, #724]	; (80039e8 <hx711_weight+0x54c>)
 8003712:	6013      	str	r3, [r2, #0]
					if (loadcellc4 == 0) {
 8003714:	4bb3      	ldr	r3, [pc, #716]	; (80039e4 <hx711_weight+0x548>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d110      	bne.n	800373e <hx711_weight+0x2a2>
						hx_711readtimestamp2[1] = 1;
 800371c:	49b3      	ldr	r1, [pc, #716]	; (80039ec <hx711_weight+0x550>)
 800371e:	f04f 0201 	mov.w	r2, #1
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c1 2302 	strd	r2, r3, [r1, #8]
						hx_711readtimestamp2[0] = micros();
 800372a:	f7ff fc9f 	bl	800306c <micros>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	49ae      	ldr	r1, [pc, #696]	; (80039ec <hx711_weight+0x550>)
 8003734:	e9c1 2300 	strd	r2, r3, [r1]
						start2 = 1;
 8003738:	4bad      	ldr	r3, [pc, #692]	; (80039f0 <hx711_weight+0x554>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	if ((loadcellc1 <= 0 || loadcellc1 >= 5) && loadcellc1 != 10 && num == 1) {
 800373e:	4bad      	ldr	r3, [pc, #692]	; (80039f4 <hx711_weight+0x558>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <hx711_weight+0x2b2>
 8003746:	4bab      	ldr	r3, [pc, #684]	; (80039f4 <hx711_weight+0x558>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d94c      	bls.n	80037e8 <hx711_weight+0x34c>
 800374e:	4ba9      	ldr	r3, [pc, #676]	; (80039f4 <hx711_weight+0x558>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d048      	beq.n	80037e8 <hx711_weight+0x34c>
 8003756:	787b      	ldrb	r3, [r7, #1]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d145      	bne.n	80037e8 <hx711_weight+0x34c>
		int32_t data = (int32_t) (ave1 / sample);
 800375c:	4ba6      	ldr	r3, [pc, #664]	; (80039f8 <hx711_weight+0x55c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	fb92 f3f3 	sdiv	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	ed93 7a04 	vldr	s14, [r3, #16]
 800377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc1 = 10;
 8003788:	4b9a      	ldr	r3, [pc, #616]	; (80039f4 <hx711_weight+0x558>)
 800378a:	220a      	movs	r2, #10
 800378c:	701a      	strb	r2, [r3, #0]
		tareweight1[(int) tareweight1[0] + 1] = hx711->weightA;
 800378e:	4b9b      	ldr	r3, [pc, #620]	; (80039fc <hx711_weight+0x560>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003798:	ee17 3a90 	vmov	r3, s15
 800379c:	3301      	adds	r3, #1
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a12      	ldr	r2, [r2, #32]
 80037a2:	4996      	ldr	r1, [pc, #600]	; (80039fc <hx711_weight+0x560>)
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	601a      	str	r2, [r3, #0]
		tareweight1[0] = fabs(((int) tareweight1[0] + 1) % 4);
 80037aa:	4b94      	ldr	r3, [pc, #592]	; (80039fc <hx711_weight+0x560>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037b4:	ee17 3a90 	vmov	r3, s15
 80037b8:	3301      	adds	r3, #1
 80037ba:	425a      	negs	r2, r3
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	f002 0203 	and.w	r2, r2, #3
 80037c4:	bf58      	it	pl
 80037c6:	4253      	negpl	r3, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fe57 	bl	800047c <__aeabi_i2d>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7fd f955 	bl	8000a84 <__aeabi_d2f>
 80037da:	ee07 0a90 	vmov	s15, r0
 80037de:	eef0 7ae7 	vabs.f32	s15, s15
 80037e2:	4b86      	ldr	r3, [pc, #536]	; (80039fc <hx711_weight+0x560>)
 80037e4:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc2 <= 0 || loadcellc2 >= 5) && loadcellc2 != 10 && num == 1) {
 80037e8:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <hx711_weight+0x564>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <hx711_weight+0x35c>
 80037f0:	4b83      	ldr	r3, [pc, #524]	; (8003a00 <hx711_weight+0x564>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d94c      	bls.n	8003892 <hx711_weight+0x3f6>
 80037f8:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <hx711_weight+0x564>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b0a      	cmp	r3, #10
 80037fe:	d048      	beq.n	8003892 <hx711_weight+0x3f6>
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d145      	bne.n	8003892 <hx711_weight+0x3f6>
		int32_t data = (int32_t) (ave2 / sample);
 8003806:	4b7f      	ldr	r3, [pc, #508]	; (8003a04 <hx711_weight+0x568>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	ed93 7a06 	vldr	s14, [r3, #24]
 8003828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc2 = 10;
 8003832:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <hx711_weight+0x564>)
 8003834:	220a      	movs	r2, #10
 8003836:	701a      	strb	r2, [r3, #0]
		tareweight2[(int) tareweight2[0] + 1] = hx711->weightB;
 8003838:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <hx711_weight+0x56c>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003842:	ee17 3a90 	vmov	r3, s15
 8003846:	3301      	adds	r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384c:	496e      	ldr	r1, [pc, #440]	; (8003a08 <hx711_weight+0x56c>)
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	601a      	str	r2, [r3, #0]
		tareweight2[0] = fabs(((int) tareweight2[0] + 1) % 4);
 8003854:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <hx711_weight+0x56c>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385e:	ee17 3a90 	vmov	r3, s15
 8003862:	3301      	adds	r3, #1
 8003864:	425a      	negs	r2, r3
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	bf58      	it	pl
 8003870:	4253      	negpl	r3, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7fc fe02 	bl	800047c <__aeabi_i2d>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f7fd f900 	bl	8000a84 <__aeabi_d2f>
 8003884:	ee07 0a90 	vmov	s15, r0
 8003888:	eef0 7ae7 	vabs.f32	s15, s15
 800388c:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <hx711_weight+0x56c>)
 800388e:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc3 <= 0 || loadcellc3 >= 5) && loadcellc3 != 10 && num == 2) {
 8003892:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <hx711_weight+0x570>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <hx711_weight+0x406>
 800389a:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <hx711_weight+0x570>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d94c      	bls.n	800393c <hx711_weight+0x4a0>
 80038a2:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <hx711_weight+0x570>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d048      	beq.n	800393c <hx711_weight+0x4a0>
 80038aa:	787b      	ldrb	r3, [r7, #1]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d145      	bne.n	800393c <hx711_weight+0x4a0>
		int32_t data = (int32_t) (ave3 / sample);
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <hx711_weight+0x574>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80038ba:	60fb      	str	r3, [r7, #12]
		hx711->weightA = (data - hx711->offsetA) / hx711->coefA;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80038d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edc3 7a08 	vstr	s15, [r3, #32]
		loadcellc3 = 10;
 80038dc:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <hx711_weight+0x570>)
 80038de:	220a      	movs	r2, #10
 80038e0:	701a      	strb	r2, [r3, #0]
		tareweight3[(int) tareweight3[0] + 1] = hx711->weightA;
 80038e2:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <hx711_weight+0x578>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	3301      	adds	r3, #1
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a12      	ldr	r2, [r2, #32]
 80038f6:	4947      	ldr	r1, [pc, #284]	; (8003a14 <hx711_weight+0x578>)
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	601a      	str	r2, [r3, #0]
		tareweight3[0] = fabs(((int) tareweight3[0] + 1) % 4);
 80038fe:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <hx711_weight+0x578>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003908:	ee17 3a90 	vmov	r3, s15
 800390c:	3301      	adds	r3, #1
 800390e:	425a      	negs	r2, r3
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	f002 0203 	and.w	r2, r2, #3
 8003918:	bf58      	it	pl
 800391a:	4253      	negpl	r3, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fdad 	bl	800047c <__aeabi_i2d>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f7fd f8ab 	bl	8000a84 <__aeabi_d2f>
 800392e:	ee07 0a90 	vmov	s15, r0
 8003932:	eef0 7ae7 	vabs.f32	s15, s15
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <hx711_weight+0x578>)
 8003938:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((loadcellc4 <= 0 || loadcellc4 >= 5) && loadcellc4 != 10 && num == 2) {
 800393c:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <hx711_weight+0x548>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <hx711_weight+0x4b0>
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <hx711_weight+0x548>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d96a      	bls.n	8003a22 <hx711_weight+0x586>
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <hx711_weight+0x548>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b0a      	cmp	r3, #10
 8003952:	d066      	beq.n	8003a22 <hx711_weight+0x586>
 8003954:	787b      	ldrb	r3, [r7, #1]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d163      	bne.n	8003a22 <hx711_weight+0x586>
		int32_t data = (int32_t) (ave4 / sample);
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <hx711_weight+0x54c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	fb92 f3f3 	sdiv	r3, r2, r3
 8003964:	60bb      	str	r3, [r7, #8]
		hx711->weightB = (data - hx711->offsetB) / hx711->coefB;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	ed93 7a06 	vldr	s14, [r3, #24]
 800397c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		loadcellc4 = 10;
 8003986:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <hx711_weight+0x548>)
 8003988:	220a      	movs	r2, #10
 800398a:	701a      	strb	r2, [r3, #0]
		tareweight4[(int) tareweight4[0] + 1] = hx711->weightB;
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <hx711_weight+0x57c>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003996:	ee17 3a90 	vmov	r3, s15
 800399a:	3301      	adds	r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a0:	491d      	ldr	r1, [pc, #116]	; (8003a18 <hx711_weight+0x57c>)
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	601a      	str	r2, [r3, #0]
		tareweight4[0] = fabs(((int) tareweight4[0] + 1) % 4);
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <hx711_weight+0x57c>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b2:	ee17 3a90 	vmov	r3, s15
 80039b6:	3301      	adds	r3, #1
 80039b8:	425a      	negs	r2, r3
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	f002 0203 	and.w	r2, r2, #3
 80039c2:	bf58      	it	pl
 80039c4:	4253      	negpl	r3, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fd58 	bl	800047c <__aeabi_i2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fd f856 	bl	8000a84 <__aeabi_d2f>
 80039d8:	ee07 0a90 	vmov	s15, r0
 80039dc:	eef0 7ae7 	vabs.f32	s15, s15
 80039e0:	e01c      	b.n	8003a1c <hx711_weight+0x580>
 80039e2:	bf00      	nop
 80039e4:	200000bb 	.word	0x200000bb
 80039e8:	20000118 	.word	0x20000118
 80039ec:	20000020 	.word	0x20000020
 80039f0:	20000034 	.word	0x20000034
 80039f4:	200000b8 	.word	0x200000b8
 80039f8:	2000010c 	.word	0x2000010c
 80039fc:	200000bc 	.word	0x200000bc
 8003a00:	200000b9 	.word	0x200000b9
 8003a04:	20000110 	.word	0x20000110
 8003a08:	200000d0 	.word	0x200000d0
 8003a0c:	200000ba 	.word	0x200000ba
 8003a10:	20000114 	.word	0x20000114
 8003a14:	200000e4 	.word	0x200000e4
 8003a18:	200000f8 	.word	0x200000f8
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <hx711_weight+0x594>)
 8003a1e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8003a22:	bf00      	nop
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	3728      	adds	r7, #40	; 0x28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200000f8 	.word	0x200000f8

08003a34 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coefA, float coefB) {
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a40:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->coefA = coefA;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	611a      	str	r2, [r3, #16]
	hx711->coefB = coefB;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <tcaselect>:
//#############################################################################################
void hx711_power_up(hx711_t *hx711) {
	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
}
//#############################################################################################
void tcaselect(uint8_t i) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
	if (i > 7)
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d80f      	bhi.n	8003a8c <tcaselect+0x30>
		return;
	uint8_t pData[1] = { 1 << i };
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, TCAADDR, pData, 1, 10);
 8003a78:	f107 020c 	add.w	r2, r7, #12
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2301      	movs	r3, #1
 8003a82:	21e0      	movs	r1, #224	; 0xe0
 8003a84:	4803      	ldr	r0, [pc, #12]	; (8003a94 <tcaselect+0x38>)
 8003a86:	f001 fffb 	bl	8005a80 <HAL_I2C_Master_Transmit>
 8003a8a:	e000      	b.n	8003a8e <tcaselect+0x32>
		return;
 8003a8c:	bf00      	nop
}
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200002bc 	.word	0x200002bc

08003a98 <EncoderVelocity_Update>:
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
}

float EncoderVelocity_Update(int unit) {
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	ed2d 8b02 	vpush	{d8}
 8003aa0:	b08e      	sub	sp, #56	; 0x38
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
	static uint32_t EncoderLastPosition2 = 0;
	static uint64_t EncoderLastTimestamp2 = 0;
	static uint32_t EncoderLastPosition3 = 0;
	static uint64_t EncoderLastTimestamp3 = 0;
	//read data
	if (unit == 1) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d13e      	bne.n	8003b2a <EncoderVelocity_Update+0x92>
		uint32_t EncoderNowPosition1 = distancepulse1;
 8003aac:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <EncoderVelocity_Update+0x1a8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	617b      	str	r3, [r7, #20]
		uint64_t EncoderNowTimestamp1 = micros() / 10;
 8003ab2:	f7ff fadb 	bl	800306c <micros>
 8003ab6:	f04f 020a 	mov.w	r2, #10
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f7fd f93f 	bl	8000d40 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		EncoderTimeDiff1 = EncoderNowTimestamp1 - EncoderLastTimestamp1;
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <EncoderVelocity_Update+0x1ac>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ad4:	ebb0 0a02 	subs.w	sl, r0, r2
 8003ad8:	eb61 0b03 	sbc.w	fp, r1, r3
 8003adc:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <EncoderVelocity_Update+0x1b0>)
 8003ade:	e9c3 ab00 	strd	sl, fp, [r3]
		EncoderPositionDiff1 = EncoderNowPosition1 - EncoderLastPosition1;
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <EncoderVelocity_Update+0x1b4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b58      	ldr	r3, [pc, #352]	; (8003c50 <EncoderVelocity_Update+0x1b8>)
 8003aee:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition1 = EncoderNowPosition1;
 8003af0:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <EncoderVelocity_Update+0x1b4>)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp1 = EncoderNowTimestamp1;
 8003af6:	4953      	ldr	r1, [pc, #332]	; (8003c44 <EncoderVelocity_Update+0x1ac>)
 8003af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003afc:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff1 * 100000) / (float) EncoderTimeDiff1;
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <EncoderVelocity_Update+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a53      	ldr	r2, [pc, #332]	; (8003c54 <EncoderVelocity_Update+0x1bc>)
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003b12:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <EncoderVelocity_Update+0x1b0>)
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fd f8ca 	bl	8000cb4 <__aeabi_ul2f>
 8003b20:	ee07 0a10 	vmov	s14, r0
 8003b24:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003b28:	e082      	b.n	8003c30 <EncoderVelocity_Update+0x198>
	}
	if (unit == 2) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d13e      	bne.n	8003bae <EncoderVelocity_Update+0x116>
		uint32_t EncoderNowPosition2 = distancepulse2;
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <EncoderVelocity_Update+0x1c0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
		uint64_t EncoderNowTimestamp2 = micros() / 10;
 8003b36:	f7ff fa99 	bl	800306c <micros>
 8003b3a:	f04f 020a 	mov.w	r2, #10
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f7fd f8fd 	bl	8000d40 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		EncoderTimeDiff2 = EncoderNowTimestamp2 - EncoderLastTimestamp2;
 8003b4e:	4b43      	ldr	r3, [pc, #268]	; (8003c5c <EncoderVelocity_Update+0x1c4>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b58:	ebb0 0802 	subs.w	r8, r0, r2
 8003b5c:	eb61 0903 	sbc.w	r9, r1, r3
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <EncoderVelocity_Update+0x1c8>)
 8003b62:	e9c3 8900 	strd	r8, r9, [r3]
		EncoderPositionDiff2 = EncoderNowPosition2 - EncoderLastPosition2;
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <EncoderVelocity_Update+0x1cc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <EncoderVelocity_Update+0x1d0>)
 8003b72:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition2 = EncoderNowPosition2;
 8003b74:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <EncoderVelocity_Update+0x1cc>)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp2 = EncoderNowTimestamp2;
 8003b7a:	4938      	ldr	r1, [pc, #224]	; (8003c5c <EncoderVelocity_Update+0x1c4>)
 8003b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b80:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff2 * 100000) / (float) EncoderTimeDiff2;
 8003b84:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <EncoderVelocity_Update+0x1d0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a32      	ldr	r2, [pc, #200]	; (8003c54 <EncoderVelocity_Update+0x1bc>)
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003b96:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <EncoderVelocity_Update+0x1c8>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fd f888 	bl	8000cb4 <__aeabi_ul2f>
 8003ba4:	ee07 0a10 	vmov	s14, r0
 8003ba8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003bac:	e040      	b.n	8003c30 <EncoderVelocity_Update+0x198>
	}
	if (unit == 3) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d13d      	bne.n	8003c30 <EncoderVelocity_Update+0x198>
		uint32_t EncoderNowPosition3 = distancepulse3;
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <EncoderVelocity_Update+0x1d4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
		uint64_t EncoderNowTimestamp3 = micros() / 10;
 8003bba:	f7ff fa57 	bl	800306c <micros>
 8003bbe:	f04f 020a 	mov.w	r2, #10
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	f7fd f8bb 	bl	8000d40 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		EncoderTimeDiff3 = EncoderNowTimestamp3 - EncoderLastTimestamp3;
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <EncoderVelocity_Update+0x1d8>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bdc:	1a84      	subs	r4, r0, r2
 8003bde:	eb61 0503 	sbc.w	r5, r1, r3
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <EncoderVelocity_Update+0x1dc>)
 8003be4:	e9c3 4500 	strd	r4, r5, [r3]
		EncoderPositionDiff3 = EncoderNowPosition3 - EncoderLastPosition3;
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <EncoderVelocity_Update+0x1e0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <EncoderVelocity_Update+0x1e4>)
 8003bf4:	601a      	str	r2, [r3, #0]
		//Update Position and time
		EncoderLastPosition3 = EncoderNowPosition3;
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <EncoderVelocity_Update+0x1e0>)
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	6013      	str	r3, [r2, #0]
		EncoderLastTimestamp3 = EncoderNowTimestamp3;
 8003bfc:	491c      	ldr	r1, [pc, #112]	; (8003c70 <EncoderVelocity_Update+0x1d8>)
 8003bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c02:	e9c1 2300 	strd	r2, r3, [r1]
		return (EncoderPositionDiff3 * 100000) / (float) EncoderTimeDiff3;
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <EncoderVelocity_Update+0x1e4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <EncoderVelocity_Update+0x1bc>)
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <EncoderVelocity_Update+0x1dc>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fd f847 	bl	8000cb4 <__aeabi_ul2f>
 8003c26:	ee07 0a10 	vmov	s14, r0
 8003c2a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003c2e:	e7ff      	b.n	8003c30 <EncoderVelocity_Update+0x198>
	}
}
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	3738      	adds	r7, #56	; 0x38
 8003c36:	46bd      	mov	sp, r7
 8003c38:	ecbd 8b02 	vpop	{d8}
 8003c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c40:	2000019c 	.word	0x2000019c
 8003c44:	20000210 	.word	0x20000210
 8003c48:	20000410 	.word	0x20000410
 8003c4c:	20000218 	.word	0x20000218
 8003c50:	200005ec 	.word	0x200005ec
 8003c54:	000186a0 	.word	0x000186a0
 8003c58:	200001a0 	.word	0x200001a0
 8003c5c:	20000220 	.word	0x20000220
 8003c60:	200005b8 	.word	0x200005b8
 8003c64:	20000228 	.word	0x20000228
 8003c68:	200005e8 	.word	0x200005e8
 8003c6c:	200001a4 	.word	0x200001a4
 8003c70:	20000230 	.word	0x20000230
 8003c74:	20000338 	.word	0x20000338
 8003c78:	20000238 	.word	0x20000238
 8003c7c:	200004a8 	.word	0x200004a8

08003c80 <limitswitchlowpass>:
void limitswitchlowpass() {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
	if (limitswitch1 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0) {
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <limitswitchlowpass+0x148>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10d      	bne.n	8003ca8 <limitswitchlowpass+0x28>
 8003c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c90:	484e      	ldr	r0, [pc, #312]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003c92:	f001 fd67 	bl	8005764 <HAL_GPIO_ReadPin>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <limitswitchlowpass+0x28>
		limitswitchc1 += 1;
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e014      	b.n	8003cd2 <limitswitchlowpass+0x52>
	} else if (limitswitch1 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1) {
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <limitswitchlowpass+0x148>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <limitswitchlowpass+0x4c>
 8003cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cb4:	4845      	ldr	r0, [pc, #276]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003cb6:	f001 fd55 	bl	8005764 <HAL_GPIO_ReadPin>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <limitswitchlowpass+0x4c>
		limitswitchc1 -= 1;
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	4a42      	ldr	r2, [pc, #264]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e002      	b.n	8003cd2 <limitswitchlowpass+0x52>
	} else {
		limitswitchc1 = 0;
 8003ccc:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc1 >= 10)
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	dd02      	ble.n	8003ce0 <limitswitchlowpass+0x60>
		limitswitch1 = 0;
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <limitswitchlowpass+0x148>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
	if (limitswitchc1 <= -10)
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <limitswitchlowpass+0x150>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f113 0f09 	cmn.w	r3, #9
 8003ce8:	da02      	bge.n	8003cf0 <limitswitchlowpass+0x70>
		limitswitch1 = 1;
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <limitswitchlowpass+0x148>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

	if (limitswitch2 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) {
 8003cf0:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <limitswitchlowpass+0x154>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10d      	bne.n	8003d14 <limitswitchlowpass+0x94>
 8003cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cfc:	4833      	ldr	r0, [pc, #204]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003cfe:	f001 fd31 	bl	8005764 <HAL_GPIO_ReadPin>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <limitswitchlowpass+0x94>
		limitswitchc2 += 1;
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	4a32      	ldr	r2, [pc, #200]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e014      	b.n	8003d3e <limitswitchlowpass+0xbe>
	} else if (limitswitch2 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <limitswitchlowpass+0x154>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10d      	bne.n	8003d38 <limitswitchlowpass+0xb8>
 8003d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d20:	482a      	ldr	r0, [pc, #168]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003d22:	f001 fd1f 	bl	8005764 <HAL_GPIO_ReadPin>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <limitswitchlowpass+0xb8>
		limitswitchc2 -= 1;
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e002      	b.n	8003d3e <limitswitchlowpass+0xbe>
	} else {
		limitswitchc2 = 0;
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc2 >= 10)
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b09      	cmp	r3, #9
 8003d44:	dd02      	ble.n	8003d4c <limitswitchlowpass+0xcc>
		limitswitch2 = 0;
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <limitswitchlowpass+0x154>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
	if (limitswitchc2 <= -10)
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <limitswitchlowpass+0x158>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f113 0f09 	cmn.w	r3, #9
 8003d54:	da02      	bge.n	8003d5c <limitswitchlowpass+0xdc>
		limitswitch2 = 1;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <limitswitchlowpass+0x154>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

	if (limitswitch3 == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0) {
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <limitswitchlowpass+0x15c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <limitswitchlowpass+0xfe>
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	4819      	ldr	r0, [pc, #100]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003d68:	f001 fcfc 	bl	8005764 <HAL_GPIO_ReadPin>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <limitswitchlowpass+0xfe>
		limitswitchc3 += 1;
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <limitswitchlowpass+0x160>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <limitswitchlowpass+0x160>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e013      	b.n	8003da6 <limitswitchlowpass+0x126>
	} else if (limitswitch3 == 0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) {
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <limitswitchlowpass+0x15c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10c      	bne.n	8003da0 <limitswitchlowpass+0x120>
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	4810      	ldr	r0, [pc, #64]	; (8003dcc <limitswitchlowpass+0x14c>)
 8003d8a:	f001 fceb 	bl	8005764 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <limitswitchlowpass+0x120>
		limitswitchc3 -= 1;
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <limitswitchlowpass+0x160>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <limitswitchlowpass+0x160>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e002      	b.n	8003da6 <limitswitchlowpass+0x126>
	} else {
		limitswitchc3 = 0;
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <limitswitchlowpass+0x160>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	}
	if (limitswitchc3 >= 10)
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <limitswitchlowpass+0x160>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	dd02      	ble.n	8003db4 <limitswitchlowpass+0x134>
		limitswitch3 = 0;
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <limitswitchlowpass+0x15c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
	if (limitswitchc3 <= -10)
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <limitswitchlowpass+0x160>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f113 0f09 	cmn.w	r3, #9
 8003dbc:	da02      	bge.n	8003dc4 <limitswitchlowpass+0x144>
		limitswitch3 = 1;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <limitswitchlowpass+0x15c>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	2000016c 	.word	0x2000016c
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	20000178 	.word	0x20000178
 8003dd4:	20000170 	.word	0x20000170
 8003dd8:	2000017c 	.word	0x2000017c
 8003ddc:	20000174 	.word	0x20000174
 8003de0:	20000180 	.word	0x20000180
 8003de4:	00000000 	.word	0x00000000

08003de8 <distancemeasurement>:
void distancemeasurement() {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	distancepulse1 = TIM1->CNT - error1 + distancestamp1;
 8003dec:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <distancemeasurement+0x188>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	4a60      	ldr	r2, [pc, #384]	; (8003f74 <distancemeasurement+0x18c>)
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	4a60      	ldr	r2, [pc, #384]	; (8003f78 <distancemeasurement+0x190>)
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <distancemeasurement+0x194>)
 8003e00:	601a      	str	r2, [r3, #0]
	if (olddistance1 - distancepulse1 >= 32500) {
 8003e02:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <distancemeasurement+0x198>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <distancemeasurement+0x194>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8003e10:	4293      	cmp	r3, r2
 8003e12:	dd51      	ble.n	8003eb8 <distancemeasurement+0xd0>
		distancestamp1 += 65535;
 8003e14:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <distancemeasurement+0x190>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e1c:	33ff      	adds	r3, #255	; 0xff
 8003e1e:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <distancemeasurement+0x190>)
 8003e20:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 + 65535;
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <distancemeasurement+0x194>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e2a:	33ff      	adds	r3, #255	; 0xff
 8003e2c:	4a54      	ldr	r2, [pc, #336]	; (8003f80 <distancemeasurement+0x198>)
 8003e2e:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8003e30:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <distancemeasurement+0x194>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e38:	33ff      	adds	r3, #255	; 0xff
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fb1e 	bl	800047c <__aeabi_i2d>
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <distancemeasurement+0x19c>)
 8003e46:	f7fc fcad 	bl	80007a4 <__aeabi_ddiv>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <distancemeasurement+0x1a0>)
 8003e58:	f7fc fca4 	bl	80007a4 <__aeabi_ddiv>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <distancemeasurement+0x1a4>)
 8003e6a:	f7fc fc9b 	bl	80007a4 <__aeabi_ddiv>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <distancemeasurement+0x1a8>)
 8003e7c:	f7fc fc92 	bl	80007a4 <__aeabi_ddiv>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <distancemeasurement+0x1ac>)
 8003e8e:	f7fc fb5f 	bl	8000550 <__aeabi_dmul>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <distancemeasurement+0x1b0>)
 8003ea0:	f7fc fb56 	bl	8000550 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc fdea 	bl	8000a84 <__aeabi_d2f>
 8003eb0:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 + 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <distancemeasurement+0x1b4>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e0b7      	b.n	8004028 <distancemeasurement+0x240>
	} else if (distancepulse1 - olddistance1 >= 32500) {
 8003eb8:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <distancemeasurement+0x194>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <distancemeasurement+0x198>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	dd6a      	ble.n	8003fa0 <distancemeasurement+0x1b8>
		distancestamp1 -= 65535;
 8003eca:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <distancemeasurement+0x190>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003ed2:	3bff      	subs	r3, #255	; 0xff
 8003ed4:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <distancemeasurement+0x190>)
 8003ed6:	6013      	str	r3, [r2, #0]
		olddistance1 = distancepulse1 - 65535;
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <distancemeasurement+0x194>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003ee0:	3bff      	subs	r3, #255	; 0xff
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <distancemeasurement+0x198>)
 8003ee4:	6013      	str	r3, [r2, #0]
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8003ee6:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <distancemeasurement+0x194>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003eee:	3bff      	subs	r3, #255	; 0xff
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fac3 	bl	800047c <__aeabi_i2d>
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <distancemeasurement+0x19c>)
 8003efc:	f7fc fc52 	bl	80007a4 <__aeabi_ddiv>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <distancemeasurement+0x1a0>)
 8003f0e:	f7fc fc49 	bl	80007a4 <__aeabi_ddiv>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <distancemeasurement+0x1a4>)
 8003f20:	f7fc fc40 	bl	80007a4 <__aeabi_ddiv>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <distancemeasurement+0x1a8>)
 8003f32:	f7fc fc37 	bl	80007a4 <__aeabi_ddiv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
				* 15.0 * 8.0;
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <distancemeasurement+0x1ac>)
 8003f44:	f7fc fb04 	bl	8000550 <__aeabi_dmul>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <distancemeasurement+0x1b0>)
 8003f56:	f7fc fafb 	bl	8000550 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fd8f 	bl	8000a84 <__aeabi_d2f>
 8003f66:	4603      	mov	r3, r0
		distancemetre1 = (distancepulse1 - 65535) / 10.0 / 64.0 / 4.0 / 20.0
 8003f68:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <distancemeasurement+0x1b4>)
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	e05c      	b.n	8004028 <distancemeasurement+0x240>
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	200001c4 	.word	0x200001c4
 8003f78:	200001b4 	.word	0x200001b4
 8003f7c:	2000019c 	.word	0x2000019c
 8003f80:	200001b8 	.word	0x200001b8
 8003f84:	40240000 	.word	0x40240000
 8003f88:	40500000 	.word	0x40500000
 8003f8c:	40100000 	.word	0x40100000
 8003f90:	40340000 	.word	0x40340000
 8003f94:	402e0000 	.word	0x402e0000
 8003f98:	40200000 	.word	0x40200000
 8003f9c:	20000184 	.word	0x20000184
	} else {
		olddistance1 = distancepulse1;
 8003fa0:	4b75      	ldr	r3, [pc, #468]	; (8004178 <distancemeasurement+0x390>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a75      	ldr	r2, [pc, #468]	; (800417c <distancemeasurement+0x394>)
 8003fa6:	6013      	str	r3, [r2, #0]
		distancemetre1 = distancepulse1 / 10.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8003fa8:	4b73      	ldr	r3, [pc, #460]	; (8004178 <distancemeasurement+0x390>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fa65 	bl	800047c <__aeabi_i2d>
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <distancemeasurement+0x398>)
 8003fb8:	f7fc fbf4 	bl	80007a4 <__aeabi_ddiv>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	4b6e      	ldr	r3, [pc, #440]	; (8004184 <distancemeasurement+0x39c>)
 8003fca:	f7fc fbeb 	bl	80007a4 <__aeabi_ddiv>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	4b6b      	ldr	r3, [pc, #428]	; (8004188 <distancemeasurement+0x3a0>)
 8003fdc:	f7fc fbe2 	bl	80007a4 <__aeabi_ddiv>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	4b67      	ldr	r3, [pc, #412]	; (800418c <distancemeasurement+0x3a4>)
 8003fee:	f7fc fbd9 	bl	80007a4 <__aeabi_ddiv>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	4b64      	ldr	r3, [pc, #400]	; (8004190 <distancemeasurement+0x3a8>)
 8004000:	f7fc faa6 	bl	8000550 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	4b60      	ldr	r3, [pc, #384]	; (8004194 <distancemeasurement+0x3ac>)
 8004012:	f7fc fa9d 	bl	8000550 <__aeabi_dmul>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	f7fc fd31 	bl	8000a84 <__aeabi_d2f>
 8004022:	4603      	mov	r3, r0
 8004024:	4a5c      	ldr	r2, [pc, #368]	; (8004198 <distancemeasurement+0x3b0>)
 8004026:	6013      	str	r3, [r2, #0]
	}
	distancepulse2 = TIM2->CNT - error2 + distancestamp2;
 8004028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	4a5b      	ldr	r2, [pc, #364]	; (800419c <distancemeasurement+0x3b4>)
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	4a5a      	ldr	r2, [pc, #360]	; (80041a0 <distancemeasurement+0x3b8>)
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4413      	add	r3, r2
 800403a:	461a      	mov	r2, r3
 800403c:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <distancemeasurement+0x3bc>)
 800403e:	601a      	str	r2, [r3, #0]
	distancemetre2 = distancepulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 8004040:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <distancemeasurement+0x3bc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fa19 	bl	800047c <__aeabi_i2d>
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <distancemeasurement+0x3c0>)
 8004050:	f7fc fba8 	bl	80007a4 <__aeabi_ddiv>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	4b48      	ldr	r3, [pc, #288]	; (8004184 <distancemeasurement+0x39c>)
 8004062:	f7fc fb9f 	bl	80007a4 <__aeabi_ddiv>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	4b45      	ldr	r3, [pc, #276]	; (8004188 <distancemeasurement+0x3a0>)
 8004074:	f7fc fb96 	bl	80007a4 <__aeabi_ddiv>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <distancemeasurement+0x3a4>)
 8004086:	f7fc fb8d 	bl	80007a4 <__aeabi_ddiv>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <distancemeasurement+0x3a8>)
 8004098:	f7fc fa5a 	bl	8000550 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <distancemeasurement+0x3ac>)
 80040aa:	f7fc fa51 	bl	8000550 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	f7fc fce5 	bl	8000a84 <__aeabi_d2f>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <distancemeasurement+0x3c4>)
 80040be:	6013      	str	r3, [r2, #0]
	distancepulse3 = TIM3->CNT - error3 + distancestamp3;
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <distancemeasurement+0x3c8>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <distancemeasurement+0x3cc>)
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <distancemeasurement+0x3d0>)
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <distancemeasurement+0x3d4>)
 80040d4:	601a      	str	r2, [r3, #0]
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <distancemeasurement+0x3d4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc f9ce 	bl	800047c <__aeabi_i2d>
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <distancemeasurement+0x3c0>)
 80040e6:	f7fc fb5d 	bl	80007a4 <__aeabi_ddiv>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <distancemeasurement+0x39c>)
 80040f8:	f7fc fb54 	bl	80007a4 <__aeabi_ddiv>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <distancemeasurement+0x3a0>)
 800410a:	f7fc fb4b 	bl	80007a4 <__aeabi_ddiv>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <distancemeasurement+0x3a8>)
 800411c:	f7fc fb42 	bl	80007a4 <__aeabi_ddiv>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <distancemeasurement+0x398>)
 800412e:	f7fc fa0f 	bl	8000550 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <distancemeasurement+0x3c0>)
 8004140:	f7fc fa06 	bl	8000550 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
			* 5.08;
 800414c:	a308      	add	r3, pc, #32	; (adr r3, 8004170 <distancemeasurement+0x388>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc f9fd 	bl	8000550 <__aeabi_dmul>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f7fc fc91 	bl	8000a84 <__aeabi_d2f>
 8004162:	4603      	mov	r3, r0
	distancemetre3 = distancepulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <distancemeasurement+0x3d8>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	f3af 8000 	nop.w
 8004170:	851eb852 	.word	0x851eb852
 8004174:	401451eb 	.word	0x401451eb
 8004178:	2000019c 	.word	0x2000019c
 800417c:	200001b8 	.word	0x200001b8
 8004180:	40240000 	.word	0x40240000
 8004184:	40500000 	.word	0x40500000
 8004188:	40100000 	.word	0x40100000
 800418c:	40340000 	.word	0x40340000
 8004190:	402e0000 	.word	0x402e0000
 8004194:	40200000 	.word	0x40200000
 8004198:	20000184 	.word	0x20000184
 800419c:	200001c8 	.word	0x200001c8
 80041a0:	20000044 	.word	0x20000044
 80041a4:	200001a0 	.word	0x200001a0
 80041a8:	40280000 	.word	0x40280000
 80041ac:	20000188 	.word	0x20000188
 80041b0:	40000400 	.word	0x40000400
 80041b4:	200001cc 	.word	0x200001cc
 80041b8:	20000048 	.word	0x20000048
 80041bc:	200001a4 	.word	0x200001a4
 80041c0:	2000018c 	.word	0x2000018c
 80041c4:	00000000 	.word	0x00000000

080041c8 <velocitymeasurement>:
void velocitymeasurement() {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	ed2d 8b02 	vpush	{d8}
 80041ce:	af00      	add	r7, sp, #0
	Timestamp_Encoder = micros();
 80041d0:	f7fe ff4c 	bl	800306c <micros>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4989      	ldr	r1, [pc, #548]	; (8004400 <velocitymeasurement+0x238>)
 80041da:	e9c1 2300 	strd	r2, r3, [r1]
	velocitypulse1 = ((99 * velocitypulse1 + EncoderVelocity_Update(1)) / 100);
 80041de:	4b89      	ldr	r3, [pc, #548]	; (8004404 <velocitymeasurement+0x23c>)
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004408 <velocitymeasurement+0x240>
 80041e8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80041ec:	2001      	movs	r0, #1
 80041ee:	f7ff fc53 	bl	8003a98 <EncoderVelocity_Update>
 80041f2:	eef0 7a40 	vmov.f32	s15, s0
 80041f6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80041fa:	eddf 6a84 	vldr	s13, [pc, #528]	; 800440c <velocitymeasurement+0x244>
 80041fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004202:	4b80      	ldr	r3, [pc, #512]	; (8004404 <velocitymeasurement+0x23c>)
 8004204:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse2 = ((99 * velocitypulse2 + EncoderVelocity_Update(2)) / 100);
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <velocitymeasurement+0x248>)
 800420a:	edd3 7a00 	vldr	s15, [r3]
 800420e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004408 <velocitymeasurement+0x240>
 8004212:	ee27 8a87 	vmul.f32	s16, s15, s14
 8004216:	2002      	movs	r0, #2
 8004218:	f7ff fc3e 	bl	8003a98 <EncoderVelocity_Update>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004224:	eddf 6a79 	vldr	s13, [pc, #484]	; 800440c <velocitymeasurement+0x244>
 8004228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800422c:	4b78      	ldr	r3, [pc, #480]	; (8004410 <velocitymeasurement+0x248>)
 800422e:	edc3 7a00 	vstr	s15, [r3]
	velocitypulse3 = ((9 * velocitypulse3 + EncoderVelocity_Update(3)) / 10);
 8004232:	4b78      	ldr	r3, [pc, #480]	; (8004414 <velocitymeasurement+0x24c>)
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800423c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8004240:	2003      	movs	r0, #3
 8004242:	f7ff fc29 	bl	8003a98 <EncoderVelocity_Update>
 8004246:	eef0 7a40 	vmov.f32	s15, s0
 800424a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800424e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004256:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <velocitymeasurement+0x24c>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
	velocitymetre1 = velocitypulse1 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 800425c:	4b69      	ldr	r3, [pc, #420]	; (8004404 <velocitymeasurement+0x23c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc f91d 	bl	80004a0 <__aeabi_f2d>
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <velocitymeasurement+0x250>)
 800426c:	f7fc fa9a 	bl	80007a4 <__aeabi_ddiv>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	4b67      	ldr	r3, [pc, #412]	; (800441c <velocitymeasurement+0x254>)
 800427e:	f7fc fa91 	bl	80007a4 <__aeabi_ddiv>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	4b64      	ldr	r3, [pc, #400]	; (8004420 <velocitymeasurement+0x258>)
 8004290:	f7fc fa88 	bl	80007a4 <__aeabi_ddiv>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	4b60      	ldr	r3, [pc, #384]	; (8004424 <velocitymeasurement+0x25c>)
 80042a2:	f7fc fa7f 	bl	80007a4 <__aeabi_ddiv>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	4b5d      	ldr	r3, [pc, #372]	; (8004428 <velocitymeasurement+0x260>)
 80042b4:	f7fc f94c 	bl	8000550 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <velocitymeasurement+0x264>)
 80042c6:	f7fc f943 	bl	8000550 <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7fc fbd7 	bl	8000a84 <__aeabi_d2f>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4a55      	ldr	r2, [pc, #340]	; (8004430 <velocitymeasurement+0x268>)
 80042da:	6013      	str	r3, [r2, #0]
	velocitymetre2 = velocitypulse2 / 12.0 / 64.0 / 4.0 / 20.0 * 15.0 * 8.0;
 80042dc:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <velocitymeasurement+0x248>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f8dd 	bl	80004a0 <__aeabi_f2d>
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <velocitymeasurement+0x250>)
 80042ec:	f7fc fa5a 	bl	80007a4 <__aeabi_ddiv>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	4b47      	ldr	r3, [pc, #284]	; (800441c <velocitymeasurement+0x254>)
 80042fe:	f7fc fa51 	bl	80007a4 <__aeabi_ddiv>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	4b44      	ldr	r3, [pc, #272]	; (8004420 <velocitymeasurement+0x258>)
 8004310:	f7fc fa48 	bl	80007a4 <__aeabi_ddiv>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	4b40      	ldr	r3, [pc, #256]	; (8004424 <velocitymeasurement+0x25c>)
 8004322:	f7fc fa3f 	bl	80007a4 <__aeabi_ddiv>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <velocitymeasurement+0x260>)
 8004334:	f7fc f90c 	bl	8000550 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	4b39      	ldr	r3, [pc, #228]	; (800442c <velocitymeasurement+0x264>)
 8004346:	f7fc f903 	bl	8000550 <__aeabi_dmul>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f7fc fb97 	bl	8000a84 <__aeabi_d2f>
 8004356:	4603      	mov	r3, r0
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <velocitymeasurement+0x26c>)
 800435a:	6013      	str	r3, [r2, #0]
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <velocitymeasurement+0x24c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc f89d 	bl	80004a0 <__aeabi_f2d>
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <velocitymeasurement+0x250>)
 800436c:	f7fc fa1a 	bl	80007a4 <__aeabi_ddiv>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <velocitymeasurement+0x254>)
 800437e:	f7fc fa11 	bl	80007a4 <__aeabi_ddiv>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <velocitymeasurement+0x258>)
 8004390:	f7fc fa08 	bl	80007a4 <__aeabi_ddiv>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <velocitymeasurement+0x260>)
 80043a2:	f7fc f9ff 	bl	80007a4 <__aeabi_ddiv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <velocitymeasurement+0x270>)
 80043b4:	f7fc f8cc 	bl	8000550 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <velocitymeasurement+0x250>)
 80043c6:	f7fc f8c3 	bl	8000550 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
			* 5.08;
 80043d2:	a309      	add	r3, pc, #36	; (adr r3, 80043f8 <velocitymeasurement+0x230>)
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fc f8ba 	bl	8000550 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7fc fb4e 	bl	8000a84 <__aeabi_d2f>
 80043e8:	4603      	mov	r3, r0
	velocitymetre3 = velocitypulse3 / 12.0 / 64.0 / 4.0 / 15.0 * 10.0 * 12.0
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <velocitymeasurement+0x274>)
 80043ec:	6013      	str	r3, [r2, #0]
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	ecbd 8b02 	vpop	{d8}
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	851eb852 	.word	0x851eb852
 80043fc:	401451eb 	.word	0x401451eb
 8004400:	200001f0 	.word	0x200001f0
 8004404:	200001a8 	.word	0x200001a8
 8004408:	42c60000 	.word	0x42c60000
 800440c:	42c80000 	.word	0x42c80000
 8004410:	200001ac 	.word	0x200001ac
 8004414:	200001b0 	.word	0x200001b0
 8004418:	40280000 	.word	0x40280000
 800441c:	40500000 	.word	0x40500000
 8004420:	40100000 	.word	0x40100000
 8004424:	40340000 	.word	0x40340000
 8004428:	402e0000 	.word	0x402e0000
 800442c:	40200000 	.word	0x40200000
 8004430:	20000190 	.word	0x20000190
 8004434:	20000194 	.word	0x20000194
 8004438:	40240000 	.word	0x40240000
 800443c:	20000198 	.word	0x20000198

08004440 <gotoposition>:
void gotoposition(int unit) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	if (unit == 1) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d15e      	bne.n	800450c <gotoposition+0xcc>
		if (ptg1 - distancemetre1 <= 0.1 && ptg1 - distancemetre1 >= -0.3) {
 800444e:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <gotoposition+0x260>)
 8004450:	ed93 7a00 	vldr	s14, [r3]
 8004454:	4b93      	ldr	r3, [pc, #588]	; (80046a4 <gotoposition+0x264>)
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445e:	ee17 0a90 	vmov	r0, s15
 8004462:	f7fc f81d 	bl	80004a0 <__aeabi_f2d>
 8004466:	a38a      	add	r3, pc, #552	; (adr r3, 8004690 <gotoposition+0x250>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc faec 	bl	8000a48 <__aeabi_dcmple>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01d      	beq.n	80044b2 <gotoposition+0x72>
 8004476:	4b8a      	ldr	r3, [pc, #552]	; (80046a0 <gotoposition+0x260>)
 8004478:	ed93 7a00 	vldr	s14, [r3]
 800447c:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <gotoposition+0x264>)
 800447e:	edd3 7a00 	vldr	s15, [r3]
 8004482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004486:	ee17 0a90 	vmov	r0, s15
 800448a:	f7fc f809 	bl	80004a0 <__aeabi_f2d>
 800448e:	a382      	add	r3, pc, #520	; (adr r3, 8004698 <gotoposition+0x258>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f7fc fae2 	bl	8000a5c <__aeabi_dcmpge>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <gotoposition+0x72>
			activate1 = 0;
 800449e:	4b82      	ldr	r3, [pc, #520]	; (80046a8 <gotoposition+0x268>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
			in1 = 0;
 80044a4:	4b81      	ldr	r3, [pc, #516]	; (80046ac <gotoposition+0x26c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
			in2 = 0;
 80044aa:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <gotoposition+0x270>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e02c      	b.n	800450c <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 >= 0) {
 80044b2:	4b7b      	ldr	r3, [pc, #492]	; (80046a0 <gotoposition+0x260>)
 80044b4:	ed93 7a00 	vldr	s14, [r3]
 80044b8:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <gotoposition+0x264>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ca:	db09      	blt.n	80044e0 <gotoposition+0xa0>
			in1 = 1;
 80044cc:	4b77      	ldr	r3, [pc, #476]	; (80046ac <gotoposition+0x26c>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
			in2 = 0;
 80044d2:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <gotoposition+0x270>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
			require1 = 10;
 80044d8:	4b76      	ldr	r3, [pc, #472]	; (80046b4 <gotoposition+0x274>)
 80044da:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <gotoposition+0x278>)
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e015      	b.n	800450c <gotoposition+0xcc>
		} else if (ptg1 - distancemetre1 <= 0) {
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <gotoposition+0x260>)
 80044e2:	ed93 7a00 	vldr	s14, [r3]
 80044e6:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <gotoposition+0x264>)
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f8:	d808      	bhi.n	800450c <gotoposition+0xcc>
			in1 = 0;
 80044fa:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <gotoposition+0x26c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
			in2 = 1;
 8004500:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <gotoposition+0x270>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
			require1 = -10;
 8004506:	4b6b      	ldr	r3, [pc, #428]	; (80046b4 <gotoposition+0x274>)
 8004508:	4a6c      	ldr	r2, [pc, #432]	; (80046bc <gotoposition+0x27c>)
 800450a:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 2) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d15e      	bne.n	80045d0 <gotoposition+0x190>
		if (ptg2 - distancemetre2 <= 0.1 && ptg2 - distancemetre2 >= -0.3) {
 8004512:	4b6b      	ldr	r3, [pc, #428]	; (80046c0 <gotoposition+0x280>)
 8004514:	ed93 7a00 	vldr	s14, [r3]
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <gotoposition+0x284>)
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004522:	ee17 0a90 	vmov	r0, s15
 8004526:	f7fb ffbb 	bl	80004a0 <__aeabi_f2d>
 800452a:	a359      	add	r3, pc, #356	; (adr r3, 8004690 <gotoposition+0x250>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fc fa8a 	bl	8000a48 <__aeabi_dcmple>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01d      	beq.n	8004576 <gotoposition+0x136>
 800453a:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <gotoposition+0x280>)
 800453c:	ed93 7a00 	vldr	s14, [r3]
 8004540:	4b60      	ldr	r3, [pc, #384]	; (80046c4 <gotoposition+0x284>)
 8004542:	edd3 7a00 	vldr	s15, [r3]
 8004546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800454a:	ee17 0a90 	vmov	r0, s15
 800454e:	f7fb ffa7 	bl	80004a0 <__aeabi_f2d>
 8004552:	a351      	add	r3, pc, #324	; (adr r3, 8004698 <gotoposition+0x258>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fc fa80 	bl	8000a5c <__aeabi_dcmpge>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <gotoposition+0x136>
			activate2 = 0;
 8004562:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <gotoposition+0x288>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
			in3 = 0;
 8004568:	4b58      	ldr	r3, [pc, #352]	; (80046cc <gotoposition+0x28c>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
			in4 = 0;
 800456e:	4b58      	ldr	r3, [pc, #352]	; (80046d0 <gotoposition+0x290>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e02c      	b.n	80045d0 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 >= 0) {
 8004576:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <gotoposition+0x280>)
 8004578:	ed93 7a00 	vldr	s14, [r3]
 800457c:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <gotoposition+0x284>)
 800457e:	edd3 7a00 	vldr	s15, [r3]
 8004582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	db09      	blt.n	80045a4 <gotoposition+0x164>
			in3 = 1;
 8004590:	4b4e      	ldr	r3, [pc, #312]	; (80046cc <gotoposition+0x28c>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
			in4 = 0;
 8004596:	4b4e      	ldr	r3, [pc, #312]	; (80046d0 <gotoposition+0x290>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
			require2 = 10;
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <gotoposition+0x294>)
 800459e:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <gotoposition+0x278>)
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <gotoposition+0x190>
		} else if (ptg2 - distancemetre2 <= 0) {
 80045a4:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <gotoposition+0x280>)
 80045a6:	ed93 7a00 	vldr	s14, [r3]
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <gotoposition+0x284>)
 80045ac:	edd3 7a00 	vldr	s15, [r3]
 80045b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	d808      	bhi.n	80045d0 <gotoposition+0x190>
			in3 = 0;
 80045be:	4b43      	ldr	r3, [pc, #268]	; (80046cc <gotoposition+0x28c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
			in4 = 1;
 80045c4:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <gotoposition+0x290>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
			require2 = -10;
 80045ca:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <gotoposition+0x294>)
 80045cc:	4a3b      	ldr	r2, [pc, #236]	; (80046bc <gotoposition+0x27c>)
 80045ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (unit == 3) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d155      	bne.n	8004682 <gotoposition+0x242>
		if (ptg3 - distancemetre3 <= 1.5 && ptg3 - distancemetre3 >= -1.5) {
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <gotoposition+0x298>)
 80045d8:	ed93 7a00 	vldr	s14, [r3]
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <gotoposition+0x29c>)
 80045de:	edd3 7a00 	vldr	s15, [r3]
 80045e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80045ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	d818      	bhi.n	8004626 <gotoposition+0x1e6>
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <gotoposition+0x298>)
 80045f6:	ed93 7a00 	vldr	s14, [r3]
 80045fa:	4b38      	ldr	r3, [pc, #224]	; (80046dc <gotoposition+0x29c>)
 80045fc:	edd3 7a00 	vldr	s15, [r3]
 8004600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004604:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8004608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	db09      	blt.n	8004626 <gotoposition+0x1e6>
			activate3 = 0;
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <gotoposition+0x2a0>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
			in5 = 0;
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <gotoposition+0x2a4>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
			in6 = 0;
 800461e:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <gotoposition+0x2a8>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
			in5 = 0;
			in6 = 1;
			require3 = -40;
		}
	}
}
 8004624:	e02d      	b.n	8004682 <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 >= 0) {
 8004626:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <gotoposition+0x298>)
 8004628:	ed93 7a00 	vldr	s14, [r3]
 800462c:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <gotoposition+0x29c>)
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	db09      	blt.n	8004654 <gotoposition+0x214>
			in5 = 1;
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <gotoposition+0x2a4>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
			in6 = 0;
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <gotoposition+0x2a8>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
			require3 = 40;
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <gotoposition+0x2ac>)
 800464e:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <gotoposition+0x2b0>)
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	e016      	b.n	8004682 <gotoposition+0x242>
		} else if (ptg3 - distancemetre3 <= 0) {
 8004654:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <gotoposition+0x298>)
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <gotoposition+0x29c>)
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	d900      	bls.n	8004670 <gotoposition+0x230>
}
 800466e:	e008      	b.n	8004682 <gotoposition+0x242>
			in5 = 0;
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <gotoposition+0x2a4>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
			in6 = 1;
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <gotoposition+0x2a8>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
			require3 = -40;
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <gotoposition+0x2ac>)
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <gotoposition+0x2b4>)
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w
 8004690:	9999999a 	.word	0x9999999a
 8004694:	3fb99999 	.word	0x3fb99999
 8004698:	33333333 	.word	0x33333333
 800469c:	bfd33333 	.word	0xbfd33333
 80046a0:	200001e4 	.word	0x200001e4
 80046a4:	20000184 	.word	0x20000184
 80046a8:	200001d8 	.word	0x200001d8
 80046ac:	20000084 	.word	0x20000084
 80046b0:	20000088 	.word	0x20000088
 80046b4:	20000138 	.word	0x20000138
 80046b8:	41200000 	.word	0x41200000
 80046bc:	c1200000 	.word	0xc1200000
 80046c0:	200001e8 	.word	0x200001e8
 80046c4:	20000188 	.word	0x20000188
 80046c8:	200001dc 	.word	0x200001dc
 80046cc:	20000090 	.word	0x20000090
 80046d0:	20000094 	.word	0x20000094
 80046d4:	20000150 	.word	0x20000150
 80046d8:	200001ec 	.word	0x200001ec
 80046dc:	2000018c 	.word	0x2000018c
 80046e0:	200001e0 	.word	0x200001e0
 80046e4:	2000009c 	.word	0x2000009c
 80046e8:	200000a0 	.word	0x200000a0
 80046ec:	20000168 	.word	0x20000168
 80046f0:	42200000 	.word	0x42200000
 80046f4:	c2200000 	.word	0xc2200000

080046f8 <setzero>:
void setzero() {
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
	if (zerostate == 1) {
 80046fc:	4b64      	ldr	r3, [pc, #400]	; (8004890 <setzero+0x198>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80bb 	bne.w	800487c <setzero+0x184>
		if (oldzerostate == 0 && zerostate == 1) {
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <setzero+0x19c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d115      	bne.n	800473a <setzero+0x42>
 800470e:	4b60      	ldr	r3, [pc, #384]	; (8004890 <setzero+0x198>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d111      	bne.n	800473a <setzero+0x42>
			distance1tozero = distancemetre1;
 8004716:	4b60      	ldr	r3, [pc, #384]	; (8004898 <setzero+0x1a0>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004720:	ee17 2a90 	vmov	r2, s15
 8004724:	4b5d      	ldr	r3, [pc, #372]	; (800489c <setzero+0x1a4>)
 8004726:	601a      	str	r2, [r3, #0]
			distance3tozero = distancemetre3;
 8004728:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <setzero+0x1a8>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	4b5b      	ldr	r3, [pc, #364]	; (80048a4 <setzero+0x1ac>)
 8004738:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre3 - distance3tozero <= -300 || limitswitch3 == 1) {
 800473a:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <setzero+0x1a8>)
 800473c:	ed93 7a00 	vldr	s14, [r3]
 8004740:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <setzero+0x1ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800474c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004750:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80048a8 <setzero+0x1b0>
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	d903      	bls.n	8004766 <setzero+0x6e>
 800475e:	4b53      	ldr	r3, [pc, #332]	; (80048ac <setzero+0x1b4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d108      	bne.n	8004778 <setzero+0x80>
			in1 = 0;
 8004766:	4b52      	ldr	r3, [pc, #328]	; (80048b0 <setzero+0x1b8>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
			in2 = 1;
 800476c:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <setzero+0x1bc>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
			require1 = -10;
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <setzero+0x1c0>)
 8004774:	4a51      	ldr	r2, [pc, #324]	; (80048bc <setzero+0x1c4>)
 8004776:	601a      	str	r2, [r3, #0]
		}
		if (distancemetre1 - distance1tozero <= -100 || limitswitch1 == 1) {
 8004778:	4b47      	ldr	r3, [pc, #284]	; (8004898 <setzero+0x1a0>)
 800477a:	ed93 7a00 	vldr	s14, [r3]
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <setzero+0x1a4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800478e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80048c0 <setzero+0x1c8>
 8004792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	d903      	bls.n	80047a4 <setzero+0xac>
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <setzero+0x1cc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <setzero+0xbe>
			in3 = 0;
 80047a4:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <setzero+0x1d0>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
			in4 = 1;
 80047aa:	4b48      	ldr	r3, [pc, #288]	; (80048cc <setzero+0x1d4>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
			require2 = -10;
 80047b0:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <setzero+0x1d8>)
 80047b2:	4a42      	ldr	r2, [pc, #264]	; (80048bc <setzero+0x1c4>)
 80047b4:	601a      	str	r2, [r3, #0]
		}
		in5 = 0;
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <setzero+0x1dc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
		in6 = 1;
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <setzero+0x1e0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
		if (distancemetre3 <= 100){
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <setzero+0x1a8>)
 80047c4:	edd3 7a00 	vldr	s15, [r3]
 80047c8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80048dc <setzero+0x1e4>
 80047cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	d803      	bhi.n	80047de <setzero+0xe6>
			require3 = -20;
 80047d6:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <setzero+0x1e8>)
 80047d8:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <setzero+0x1ec>)
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e002      	b.n	80047e4 <setzero+0xec>
		}
		else require3 = -40;
 80047de:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <setzero+0x1e8>)
 80047e0:	4a41      	ldr	r2, [pc, #260]	; (80048e8 <setzero+0x1f0>)
 80047e2:	601a      	str	r2, [r3, #0]

		if (limitswitch1 == 1) {
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <setzero+0x1cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10d      	bne.n	8004808 <setzero+0x110>
			error1 = TIM1->CNT;
 80047ec:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <setzero+0x1f4>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <setzero+0x1f8>)
 80047f4:	601a      	str	r2, [r3, #0]
			distancestamp1 = 0;
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <setzero+0x1fc>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
			olddistance1 = 0;
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <setzero+0x200>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
			activate1 = 0;
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <setzero+0x204>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch2 == 1) {
 8004808:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <setzero+0x208>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10b      	bne.n	8004828 <setzero+0x130>
			error2 = TIM2->CNT;
 8004810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	461a      	mov	r2, r3
 8004818:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <setzero+0x20c>)
 800481a:	601a      	str	r2, [r3, #0]
			distancestamp2 = 0;
 800481c:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <setzero+0x210>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
			activate2 = 0;
 8004822:	4b3a      	ldr	r3, [pc, #232]	; (800490c <setzero+0x214>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch3 == 1) {
 8004828:	4b20      	ldr	r3, [pc, #128]	; (80048ac <setzero+0x1b4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10a      	bne.n	8004846 <setzero+0x14e>
			error3 = TIM3->CNT;
 8004830:	4b37      	ldr	r3, [pc, #220]	; (8004910 <setzero+0x218>)
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	461a      	mov	r2, r3
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <setzero+0x21c>)
 8004838:	601a      	str	r2, [r3, #0]
			distancestamp3 = 0;
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <setzero+0x220>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
			activate3 = 0;
 8004840:	4b36      	ldr	r3, [pc, #216]	; (800491c <setzero+0x224>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
		}
		if (limitswitch1 == 1 && limitswitch2 == 1 && limitswitch3 == 1) {
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <setzero+0x1cc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d116      	bne.n	800487c <setzero+0x184>
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <setzero+0x208>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d112      	bne.n	800487c <setzero+0x184>
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <setzero+0x1b4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <setzero+0x184>
			zerostate = 0;
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <setzero+0x198>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
			require1 = 0;
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <setzero+0x1c0>)
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
			require2 = 0;
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <setzero+0x1d8>)
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
			require3 = 0;
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <setzero+0x1e8>)
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
		}
	}
	oldzerostate = zerostate;
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <setzero+0x198>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <setzero+0x19c>)
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	200001d0 	.word	0x200001d0
 8004894:	200001d4 	.word	0x200001d4
 8004898:	20000184 	.word	0x20000184
 800489c:	200001bc 	.word	0x200001bc
 80048a0:	2000018c 	.word	0x2000018c
 80048a4:	200001c0 	.word	0x200001c0
 80048a8:	c3960000 	.word	0xc3960000
 80048ac:	20000174 	.word	0x20000174
 80048b0:	20000084 	.word	0x20000084
 80048b4:	20000088 	.word	0x20000088
 80048b8:	20000138 	.word	0x20000138
 80048bc:	c1200000 	.word	0xc1200000
 80048c0:	c2c80000 	.word	0xc2c80000
 80048c4:	2000016c 	.word	0x2000016c
 80048c8:	20000090 	.word	0x20000090
 80048cc:	20000094 	.word	0x20000094
 80048d0:	20000150 	.word	0x20000150
 80048d4:	2000009c 	.word	0x2000009c
 80048d8:	200000a0 	.word	0x200000a0
 80048dc:	42c80000 	.word	0x42c80000
 80048e0:	20000168 	.word	0x20000168
 80048e4:	c1a00000 	.word	0xc1a00000
 80048e8:	c2200000 	.word	0xc2200000
 80048ec:	40010000 	.word	0x40010000
 80048f0:	200001c4 	.word	0x200001c4
 80048f4:	200001b4 	.word	0x200001b4
 80048f8:	200001b8 	.word	0x200001b8
 80048fc:	200001d8 	.word	0x200001d8
 8004900:	20000170 	.word	0x20000170
 8004904:	200001c8 	.word	0x200001c8
 8004908:	20000044 	.word	0x20000044
 800490c:	200001dc 	.word	0x200001dc
 8004910:	40000400 	.word	0x40000400
 8004914:	200001cc 	.word	0x200001cc
 8004918:	20000048 	.word	0x20000048
 800491c:	200001e0 	.word	0x200001e0

08004920 <pwmdrive>:
void pwmdrive() {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, in1);
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <pwmdrive+0x8c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	2101      	movs	r1, #1
 800492e:	4820      	ldr	r0, [pc, #128]	; (80049b0 <pwmdrive+0x90>)
 8004930:	f000 ff30 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, in2);
 8004934:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <pwmdrive+0x94>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	2110      	movs	r1, #16
 800493e:	481c      	ldr	r0, [pc, #112]	; (80049b0 <pwmdrive+0x90>)
 8004940:	f000 ff28 	bl	8005794 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm1);
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <pwmdrive+0x98>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <pwmdrive+0x9c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, in3);
 800494e:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <pwmdrive+0xa0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	2120      	movs	r1, #32
 8004958:	4815      	ldr	r0, [pc, #84]	; (80049b0 <pwmdrive+0x90>)
 800495a:	f000 ff1b 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, in4);
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <pwmdrive+0xa4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	2108      	movs	r1, #8
 8004968:	4811      	ldr	r0, [pc, #68]	; (80049b0 <pwmdrive+0x90>)
 800496a:	f000 ff13 	bl	8005794 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm2);
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <pwmdrive+0xa8>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <pwmdrive+0x9c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, in5);
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <pwmdrive+0xac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004984:	4812      	ldr	r0, [pc, #72]	; (80049d0 <pwmdrive+0xb0>)
 8004986:	f000 ff05 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, in6);
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <pwmdrive+0xb4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004996:	480e      	ldr	r0, [pc, #56]	; (80049d0 <pwmdrive+0xb0>)
 8004998:	f000 fefc 	bl	8005794 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm3);
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <pwmdrive+0xb8>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <pwmdrive+0x9c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000084 	.word	0x20000084
 80049b0:	40020400 	.word	0x40020400
 80049b4:	20000088 	.word	0x20000088
 80049b8:	2000008c 	.word	0x2000008c
 80049bc:	20000270 	.word	0x20000270
 80049c0:	20000090 	.word	0x20000090
 80049c4:	20000094 	.word	0x20000094
 80049c8:	20000098 	.word	0x20000098
 80049cc:	2000009c 	.word	0x2000009c
 80049d0:	40020800 	.word	0x40020800
 80049d4:	200000a0 	.word	0x200000a0
 80049d8:	200000a4 	.word	0x200000a4

080049dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049e0:	b672      	cpsid	i
}
 80049e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80049e4:	e7fe      	b.n	80049e4 <Error_Handler+0x8>
	...

080049e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_MspInit+0x4c>)
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	4a0f      	ldr	r2, [pc, #60]	; (8004a34 <HAL_MspInit+0x4c>)
 80049f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049fc:	6453      	str	r3, [r2, #68]	; 0x44
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_MspInit+0x4c>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_MspInit+0x4c>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_MspInit+0x4c>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_MspInit+0x4c>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004a26:	2007      	movs	r0, #7
 8004a28:	f000 fc44 	bl	80052b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_I2C_MspInit+0xa8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d13d      	bne.n	8004ad6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004a64:	f043 0302 	orr.w	r3, r3, #2
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a7c:	2312      	movs	r3, #18
 8004a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a88:	2304      	movs	r3, #4
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4619      	mov	r1, r3
 8004a92:	4815      	ldr	r0, [pc, #84]	; (8004ae8 <HAL_I2C_MspInit+0xb0>)
 8004a94:	f000 fce2 	bl	800545c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9e:	2312      	movs	r3, #18
 8004aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004aaa:	2309      	movs	r3, #9
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aae:	f107 0314 	add.w	r3, r7, #20
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	480c      	ldr	r0, [pc, #48]	; (8004ae8 <HAL_I2C_MspInit+0xb0>)
 8004ab6:	f000 fcd1 	bl	800545c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_I2C_MspInit+0xac>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ad6:	bf00      	nop
 8004ad8:	3728      	adds	r7, #40	; 0x28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40005800 	.word	0x40005800
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40020400 	.word	0x40020400

08004aec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a57      	ldr	r2, [pc, #348]	; (8004c68 <HAL_TIM_Encoder_MspInit+0x17c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d135      	bne.n	8004b7a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	4a55      	ldr	r2, [pc, #340]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1e:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	4b4f      	ldr	r3, [pc, #316]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	4a4e      	ldr	r2, [pc, #312]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	2300      	movs	r3, #0
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b60:	4619      	mov	r1, r3
 8004b62:	4843      	ldr	r0, [pc, #268]	; (8004c70 <HAL_TIM_Encoder_MspInit+0x184>)
 8004b64:	f000 fc7a 	bl	800545c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	201b      	movs	r0, #27
 8004b6e:	f000 fbac 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004b72:	201b      	movs	r0, #27
 8004b74:	f000 fbc5 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b78:	e072      	b.n	8004c60 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d134      	bne.n	8004bee <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	4a37      	ldr	r2, [pc, #220]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6413      	str	r3, [r2, #64]	; 0x40
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4826      	ldr	r0, [pc, #152]	; (8004c70 <HAL_TIM_Encoder_MspInit+0x184>)
 8004bd8:	f000 fc40 	bl	800545c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2100      	movs	r1, #0
 8004be0:	201c      	movs	r0, #28
 8004be2:	f000 fb72 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004be6:	201c      	movs	r0, #28
 8004be8:	f000 fb8b 	bl	8005302 <HAL_NVIC_EnableIRQ>
}
 8004bec:	e038      	b.n	8004c60 <HAL_TIM_Encoder_MspInit+0x174>
  else if(htim_encoder->Instance==TIM3)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a20      	ldr	r2, [pc, #128]	; (8004c74 <HAL_TIM_Encoder_MspInit+0x188>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d133      	bne.n	8004c60 <HAL_TIM_Encoder_MspInit+0x174>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	4a1a      	ldr	r2, [pc, #104]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004c02:	f043 0302 	orr.w	r3, r3, #2
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6313      	str	r3, [r2, #48]	; 0x30
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_TIM_Encoder_MspInit+0x180>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c30:	23c0      	movs	r3, #192	; 0xc0
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c40:	2302      	movs	r3, #2
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4809      	ldr	r0, [pc, #36]	; (8004c70 <HAL_TIM_Encoder_MspInit+0x184>)
 8004c4c:	f000 fc06 	bl	800545c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	201d      	movs	r0, #29
 8004c56:	f000 fb38 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c5a:	201d      	movs	r0, #29
 8004c5c:	f000 fb51 	bl	8005302 <HAL_NVIC_EnableIRQ>
}
 8004c60:	bf00      	nop
 8004c62:	3738      	adds	r7, #56	; 0x38
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020000 	.word	0x40020000
 8004c74:	40000400 	.word	0x40000400

08004c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_Base_MspInit+0x80>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d116      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	201e      	movs	r0, #30
 8004cac:	f000 fb0d 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cb0:	201e      	movs	r0, #30
 8004cb2:	f000 fb26 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004cb6:	e01a      	b.n	8004cee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <HAL_TIM_Base_MspInit+0x88>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d115      	bne.n	8004cee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_TIM_Base_MspInit+0x84>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	2032      	movs	r0, #50	; 0x32
 8004ce4:	f000 faf1 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ce8:	2032      	movs	r0, #50	; 0x32
 8004cea:	f000 fb0a 	bl	8005302 <HAL_NVIC_EnableIRQ>
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40000c00 	.word	0x40000c00

08004d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <HAL_TIM_MspPostInit+0x68>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d11e      	bne.n	8004d64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_TIM_MspPostInit+0x6c>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <HAL_TIM_MspPostInit+0x6c>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_TIM_MspPostInit+0x6c>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8004d42:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d54:	2302      	movs	r3, #2
 8004d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4805      	ldr	r0, [pc, #20]	; (8004d74 <HAL_TIM_MspPostInit+0x70>)
 8004d60:	f000 fb7c 	bl	800545c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40020400 	.word	0x40020400

08004d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <HAL_UART_MspInit+0xfc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d135      	bne.n	8004e06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a35      	ldr	r2, [pc, #212]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004da4:	f043 0310 	orr.w	r3, r3, #16
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8004dd2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8004dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de0:	2303      	movs	r3, #3
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004de4:	2307      	movs	r3, #7
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	4619      	mov	r1, r3
 8004dee:	4823      	ldr	r0, [pc, #140]	; (8004e7c <HAL_UART_MspInit+0x104>)
 8004df0:	f000 fb34 	bl	800545c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	2025      	movs	r0, #37	; 0x25
 8004dfa:	f000 fa66 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dfe:	2025      	movs	r0, #37	; 0x25
 8004e00:	f000 fa7f 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004e04:	e031      	b.n	8004e6a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_UART_MspInit+0x108>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d12c      	bne.n	8004e6a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e1a:	f043 0320 	orr.w	r3, r3, #32
 8004e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_UART_MspInit+0x100>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e56:	2303      	movs	r3, #3
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5e:	f107 031c 	add.w	r3, r7, #28
 8004e62:	4619      	mov	r1, r3
 8004e64:	4805      	ldr	r0, [pc, #20]	; (8004e7c <HAL_UART_MspInit+0x104>)
 8004e66:	f000 faf9 	bl	800545c <HAL_GPIO_Init>
}
 8004e6a:	bf00      	nop
 8004e6c:	3730      	adds	r7, #48	; 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40011000 	.word	0x40011000
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	40011400 	.word	0x40011400

08004e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e88:	e7fe      	b.n	8004e88 <NMI_Handler+0x4>

08004e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8e:	e7fe      	b.n	8004e8e <HardFault_Handler+0x4>

08004e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <MemManage_Handler+0x4>

08004e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e9a:	e7fe      	b.n	8004e9a <BusFault_Handler+0x4>

08004e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea0:	e7fe      	b.n	8004ea0 <UsageFault_Handler+0x4>

08004ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ed0:	f000 f8dc 	bl	800508c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004edc:	2040      	movs	r0, #64	; 0x40
 8004ede:	f000 fc73 	bl	80057c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eec:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <TIM1_CC_IRQHandler+0x10>)
 8004eee:	f002 fb7d 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200004bc 	.word	0x200004bc

08004efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <TIM2_IRQHandler+0x10>)
 8004f02:	f002 fb73 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2000055c 	.word	0x2000055c

08004f10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <TIM3_IRQHandler+0x10>)
 8004f16:	f002 fb69 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000398 	.word	0x20000398

08004f24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <TIM4_IRQHandler+0x10>)
 8004f2a:	f002 fb5f 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000270 	.word	0x20000270

08004f38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <USART1_IRQHandler+0x10>)
 8004f3e:	f003 f9ab 	bl	8008298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000430 	.word	0x20000430

08004f4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004f50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f54:	f000 fc38 	bl	80057c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <TIM5_IRQHandler+0x10>)
 8004f62:	f002 fb43 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000350 	.word	0x20000350

08004f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)


	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <SystemInit+0x20>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	4a05      	ldr	r2, [pc, #20]	; (8004f90 <SystemInit+0x20>)
 8004f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8004f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f9a:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f9c:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fa0:	e002      	b.n	8004fa8 <LoopCopyDataInit>

08004fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fa6:	3304      	adds	r3, #4

08004fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fac:	d3f9      	bcc.n	8004fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fae:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fb0:	4c0b      	ldr	r4, [pc, #44]	; (8004fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fb4:	e001      	b.n	8004fba <LoopFillZerobss>

08004fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fb8:	3204      	adds	r2, #4

08004fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fbc:	d3fb      	bcc.n	8004fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fbe:	f7ff ffd7 	bl	8004f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fc2:	f003 ff83 	bl	8008ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fc6:	f7fc f97f 	bl	80012c8 <main>
  bx  lr    
 8004fca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fd4:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8004fd8:	08008f64 	.word	0x08008f64
  ldr r2, =_sbss
 8004fdc:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8004fe0:	200005f8 	.word	0x200005f8

08004fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fe4:	e7fe      	b.n	8004fe4 <ADC_IRQHandler>
	...

08004fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_Init+0x40>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_Init+0x40>)
 8004ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_Init+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <HAL_Init+0x40>)
 8004ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_Init+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <HAL_Init+0x40>)
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005010:	2003      	movs	r0, #3
 8005012:	f000 f94f 	bl	80052b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005016:	2000      	movs	r0, #0
 8005018:	f000 f808 	bl	800502c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800501c:	f7ff fce4 	bl	80049e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <HAL_InitTick+0x54>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <HAL_InitTick+0x58>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005042:	fbb3 f3f1 	udiv	r3, r3, r1
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f967 	bl	800531e <HAL_SYSTICK_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00e      	b.n	8005078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b0f      	cmp	r3, #15
 800505e:	d80a      	bhi.n	8005076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005060:	2200      	movs	r2, #0
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	f000 f92f 	bl	80052ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800506c:	4a06      	ldr	r2, [pc, #24]	; (8005088 <HAL_InitTick+0x5c>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	2000004c 	.word	0x2000004c
 8005084:	20000054 	.word	0x20000054
 8005088:	20000050 	.word	0x20000050

0800508c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_IncTick+0x20>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_IncTick+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4413      	add	r3, r2
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_IncTick+0x24>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000054 	.word	0x20000054
 80050b0:	200005f4 	.word	0x200005f4

080050b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return uwTick;
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <HAL_GetTick+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	200005f4 	.word	0x200005f4

080050cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7ff ffee 	bl	80050b4 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d005      	beq.n	80050f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_Delay+0x44>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050f2:	bf00      	nop
 80050f4:	f7ff ffde 	bl	80050b4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d8f7      	bhi.n	80050f4 <HAL_Delay+0x28>
  {
  }
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000054 	.word	0x20000054

08005114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800513c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	60d3      	str	r3, [r2, #12]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <__NVIC_GetPriorityGrouping+0x18>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 0307 	and.w	r3, r3, #7
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	2b00      	cmp	r3, #0
 8005188:	db0b      	blt.n	80051a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	f003 021f 	and.w	r2, r3, #31
 8005190:	4907      	ldr	r1, [pc, #28]	; (80051b0 <__NVIC_EnableIRQ+0x38>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2001      	movs	r0, #1
 800519a:	fa00 f202 	lsl.w	r2, r0, r2
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e100 	.word	0xe000e100

080051b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	db0a      	blt.n	80051de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	490c      	ldr	r1, [pc, #48]	; (8005200 <__NVIC_SetPriority+0x4c>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	440b      	add	r3, r1
 80051d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051dc:	e00a      	b.n	80051f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4908      	ldr	r1, [pc, #32]	; (8005204 <__NVIC_SetPriority+0x50>)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	3b04      	subs	r3, #4
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	440b      	add	r3, r1
 80051f2:	761a      	strb	r2, [r3, #24]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000e100 	.word	0xe000e100
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	; 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf28      	it	cs
 8005226:	2304      	movcs	r3, #4
 8005228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3304      	adds	r3, #4
 800522e:	2b06      	cmp	r3, #6
 8005230:	d902      	bls.n	8005238 <NVIC_EncodePriority+0x30>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3b03      	subs	r3, #3
 8005236:	e000      	b.n	800523a <NVIC_EncodePriority+0x32>
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	401a      	ands	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005250:	f04f 31ff 	mov.w	r1, #4294967295
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	43d9      	mvns	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	4313      	orrs	r3, r2
         );
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	; 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005280:	d301      	bcc.n	8005286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005282:	2301      	movs	r3, #1
 8005284:	e00f      	b.n	80052a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <SysTick_Config+0x40>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3b01      	subs	r3, #1
 800528c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528e:	210f      	movs	r1, #15
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	f7ff ff8e 	bl	80051b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <SysTick_Config+0x40>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <SysTick_Config+0x40>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000e010 	.word	0xe000e010

080052b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff29 	bl	8005114 <__NVIC_SetPriorityGrouping>
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	4603      	mov	r3, r0
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052dc:	f7ff ff3e 	bl	800515c <__NVIC_GetPriorityGrouping>
 80052e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	f7ff ff8e 	bl	8005208 <NVIC_EncodePriority>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ff5d 	bl	80051b4 <__NVIC_SetPriority>
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	4603      	mov	r3, r0
 800530a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800530c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff31 	bl	8005178 <__NVIC_EnableIRQ>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ffa2 	bl	8005270 <SysTick_Config>
 800532c:	4603      	mov	r3, r0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005344:	f7ff feb6 	bl	80050b4 <HAL_GetTick>
 8005348:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d008      	beq.n	8005368 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2280      	movs	r2, #128	; 0x80
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e052      	b.n	800540e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0216 	bic.w	r2, r2, #22
 8005376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005386:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_DMA_Abort+0x62>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0208 	bic.w	r2, r2, #8
 80053a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053b8:	e013      	b.n	80053e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ba:	f7ff fe7b 	bl	80050b4 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d90c      	bls.n	80053e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e015      	b.n	800540e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e4      	bne.n	80053ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	223f      	movs	r2, #63	; 0x3f
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e00c      	b.n	800544e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2205      	movs	r2, #5
 8005438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800545c:	b480      	push	{r7}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	e159      	b.n	800572c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005478:	2201      	movs	r2, #1
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4013      	ands	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	429a      	cmp	r2, r3
 8005492:	f040 8148 	bne.w	8005726 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d005      	beq.n	80054ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d130      	bne.n	8005510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2203      	movs	r2, #3
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054e4:	2201      	movs	r2, #1
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 0201 	and.w	r2, r3, #1
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4313      	orrs	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d017      	beq.n	800554c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	2203      	movs	r2, #3
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d123      	bne.n	80055a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	08da      	lsrs	r2, r3, #3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3208      	adds	r2, #8
 8005560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	220f      	movs	r2, #15
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	08da      	lsrs	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3208      	adds	r2, #8
 800559a:	69b9      	ldr	r1, [r7, #24]
 800559c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	2203      	movs	r2, #3
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0203 	and.w	r2, r3, #3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a2 	beq.w	8005726 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	4b57      	ldr	r3, [pc, #348]	; (8005744 <HAL_GPIO_Init+0x2e8>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	4a56      	ldr	r2, [pc, #344]	; (8005744 <HAL_GPIO_Init+0x2e8>)
 80055ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055f0:	6453      	str	r3, [r2, #68]	; 0x44
 80055f2:	4b54      	ldr	r3, [pc, #336]	; (8005744 <HAL_GPIO_Init+0x2e8>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055fe:	4a52      	ldr	r2, [pc, #328]	; (8005748 <HAL_GPIO_Init+0x2ec>)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	3302      	adds	r3, #2
 8005606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	220f      	movs	r2, #15
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a49      	ldr	r2, [pc, #292]	; (800574c <HAL_GPIO_Init+0x2f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d019      	beq.n	800565e <HAL_GPIO_Init+0x202>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a48      	ldr	r2, [pc, #288]	; (8005750 <HAL_GPIO_Init+0x2f4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_GPIO_Init+0x1fe>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a47      	ldr	r2, [pc, #284]	; (8005754 <HAL_GPIO_Init+0x2f8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00d      	beq.n	8005656 <HAL_GPIO_Init+0x1fa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a46      	ldr	r2, [pc, #280]	; (8005758 <HAL_GPIO_Init+0x2fc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <HAL_GPIO_Init+0x1f6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a45      	ldr	r2, [pc, #276]	; (800575c <HAL_GPIO_Init+0x300>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_GPIO_Init+0x1f2>
 800564a:	2304      	movs	r3, #4
 800564c:	e008      	b.n	8005660 <HAL_GPIO_Init+0x204>
 800564e:	2307      	movs	r3, #7
 8005650:	e006      	b.n	8005660 <HAL_GPIO_Init+0x204>
 8005652:	2303      	movs	r3, #3
 8005654:	e004      	b.n	8005660 <HAL_GPIO_Init+0x204>
 8005656:	2302      	movs	r3, #2
 8005658:	e002      	b.n	8005660 <HAL_GPIO_Init+0x204>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <HAL_GPIO_Init+0x204>
 800565e:	2300      	movs	r3, #0
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f002 0203 	and.w	r2, r2, #3
 8005666:	0092      	lsls	r2, r2, #2
 8005668:	4093      	lsls	r3, r2
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005670:	4935      	ldr	r1, [pc, #212]	; (8005748 <HAL_GPIO_Init+0x2ec>)
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	3302      	adds	r3, #2
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567e:	4b38      	ldr	r3, [pc, #224]	; (8005760 <HAL_GPIO_Init+0x304>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056a2:	4a2f      	ldr	r2, [pc, #188]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056a8:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056cc:	4a24      	ldr	r2, [pc, #144]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056fc:	4b18      	ldr	r3, [pc, #96]	; (8005760 <HAL_GPIO_Init+0x304>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005720:	4a0f      	ldr	r2, [pc, #60]	; (8005760 <HAL_GPIO_Init+0x304>)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	f67f aea2 	bls.w	8005478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	3724      	adds	r7, #36	; 0x24
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	40013800 	.word	0x40013800
 800574c:	40020000 	.word	0x40020000
 8005750:	40020400 	.word	0x40020400
 8005754:	40020800 	.word	0x40020800
 8005758:	40020c00 	.word	0x40020c00
 800575c:	40021000 	.word	0x40021000
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e001      	b.n	8005786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057b0:	e003      	b.n	80057ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d006      	beq.n	80057ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc ff9c 	bl	8002724 <HAL_GPIO_EXTI_Callback>
  }
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40013c00 	.word	0x40013c00

080057f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e12b      	b.n	8005a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f90a 	bl	8004a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800584a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800585a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800585c:	f001 fbae 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a81      	ldr	r2, [pc, #516]	; (8005a6c <HAL_I2C_Init+0x274>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d807      	bhi.n	800587c <HAL_I2C_Init+0x84>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a80      	ldr	r2, [pc, #512]	; (8005a70 <HAL_I2C_Init+0x278>)
 8005870:	4293      	cmp	r3, r2
 8005872:	bf94      	ite	ls
 8005874:	2301      	movls	r3, #1
 8005876:	2300      	movhi	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e006      	b.n	800588a <HAL_I2C_Init+0x92>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a7d      	ldr	r2, [pc, #500]	; (8005a74 <HAL_I2C_Init+0x27c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	bf94      	ite	ls
 8005884:	2301      	movls	r3, #1
 8005886:	2300      	movhi	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0e7      	b.n	8005a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a78      	ldr	r2, [pc, #480]	; (8005a78 <HAL_I2C_Init+0x280>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	0c9b      	lsrs	r3, r3, #18
 800589c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_I2C_Init+0x274>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d802      	bhi.n	80058cc <HAL_I2C_Init+0xd4>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	3301      	adds	r3, #1
 80058ca:	e009      	b.n	80058e0 <HAL_I2C_Init+0xe8>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	4a69      	ldr	r2, [pc, #420]	; (8005a7c <HAL_I2C_Init+0x284>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	099b      	lsrs	r3, r3, #6
 80058de:	3301      	adds	r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	495c      	ldr	r1, [pc, #368]	; (8005a6c <HAL_I2C_Init+0x274>)
 80058fc:	428b      	cmp	r3, r1
 80058fe:	d819      	bhi.n	8005934 <HAL_I2C_Init+0x13c>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1e59      	subs	r1, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fbb1 f3f3 	udiv	r3, r1, r3
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005914:	400b      	ands	r3, r1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_I2C_Init+0x138>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1e59      	subs	r1, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	fbb1 f3f3 	udiv	r3, r1, r3
 8005928:	3301      	adds	r3, #1
 800592a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592e:	e051      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 8005930:	2304      	movs	r3, #4
 8005932:	e04f      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d111      	bne.n	8005960 <HAL_I2C_Init+0x168>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1e58      	subs	r0, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	440b      	add	r3, r1
 800594a:	fbb0 f3f3 	udiv	r3, r0, r3
 800594e:	3301      	adds	r3, #1
 8005950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e012      	b.n	8005986 <HAL_I2C_Init+0x18e>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e58      	subs	r0, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	0099      	lsls	r1, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	fbb0 f3f3 	udiv	r3, r0, r3
 8005976:	3301      	adds	r3, #1
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_I2C_Init+0x196>
 800598a:	2301      	movs	r3, #1
 800598c:	e022      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <HAL_I2C_Init+0x1bc>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1e58      	subs	r0, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	440b      	add	r3, r1
 80059a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a8:	3301      	adds	r3, #1
 80059aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b2:	e00f      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1e58      	subs	r0, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	0099      	lsls	r1, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ca:	3301      	adds	r3, #1
 80059cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	6809      	ldr	r1, [r1, #0]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6911      	ldr	r1, [r2, #16]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68d2      	ldr	r2, [r2, #12]
 8005a0e:	4311      	orrs	r1, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	000186a0 	.word	0x000186a0
 8005a70:	001e847f 	.word	0x001e847f
 8005a74:	003d08ff 	.word	0x003d08ff
 8005a78:	431bde83 	.word	0x431bde83
 8005a7c:	10624dd3 	.word	0x10624dd3

08005a80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	817b      	strh	r3, [r7, #10]
 8005a90:	4613      	mov	r3, r2
 8005a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a94:	f7ff fb0e 	bl	80050b4 <HAL_GetTick>
 8005a98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	f040 80e0 	bne.w	8005c68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2319      	movs	r3, #25
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4970      	ldr	r1, [pc, #448]	; (8005c74 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fc58 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0d3      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_I2C_Master_Transmit+0x50>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e0cc      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d007      	beq.n	8005af6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2221      	movs	r2, #33	; 0x21
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2210      	movs	r2, #16
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	893a      	ldrh	r2, [r7, #8]
 8005b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a50      	ldr	r2, [pc, #320]	; (8005c78 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fac2 	bl	80060c8 <I2C_MasterRequestWrite>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e08d      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b64:	e066      	b.n	8005c34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6a39      	ldr	r1, [r7, #32]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fcd2 	bl	8006514 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00d      	beq.n	8005b92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d107      	bne.n	8005b8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e06b      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d11b      	bne.n	8005c08 <HAL_I2C_Master_Transmit+0x188>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d017      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6a39      	ldr	r1, [r7, #32]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fcc2 	bl	8006596 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00d      	beq.n	8005c34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d107      	bne.n	8005c30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e01a      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d194      	bne.n	8005b66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	00100002 	.word	0x00100002
 8005c78:	ffff0000 	.word	0xffff0000

08005c7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	461a      	mov	r2, r3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	817b      	strh	r3, [r7, #10]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c90:	f7ff fa10 	bl	80050b4 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	f040 820b 	bne.w	80060ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2319      	movs	r3, #25
 8005caa:	2201      	movs	r2, #1
 8005cac:	497c      	ldr	r1, [pc, #496]	; (8005ea0 <HAL_I2C_Master_Receive+0x224>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fb5a 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e1fe      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_I2C_Master_Receive+0x50>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e1f7      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d007      	beq.n	8005cf2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2222      	movs	r2, #34	; 0x22
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	893a      	ldrh	r2, [r7, #8]
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a5c      	ldr	r2, [pc, #368]	; (8005ea4 <HAL_I2C_Master_Receive+0x228>)
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d34:	8979      	ldrh	r1, [r7, #10]
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fa46 	bl	80061cc <I2C_MasterRequestRead>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e1b8      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d113      	bne.n	8005d7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d52:	2300      	movs	r3, #0
 8005d54:	623b      	str	r3, [r7, #32]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	623b      	str	r3, [r7, #32]
 8005d66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e18c      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d11b      	bne.n	8005dba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e16c      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d11b      	bne.n	8005dfa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	e14c      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e20:	e138      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	f200 80f1 	bhi.w	800600e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d123      	bne.n	8005e7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fbed 	bl	8006618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e139      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e7a:	e10b      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d14e      	bne.n	8005f22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4906      	ldr	r1, [pc, #24]	; (8005ea8 <HAL_I2C_Master_Receive+0x22c>)
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fa6a 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e10e      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
 8005e9e:	bf00      	nop
 8005ea0:	00100002 	.word	0x00100002
 8005ea4:	ffff0000 	.word	0xffff0000
 8005ea8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f20:	e0b8      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4966      	ldr	r1, [pc, #408]	; (80060c4 <HAL_I2C_Master_Receive+0x448>)
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fa1b 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0bf      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2200      	movs	r2, #0
 8005f86:	494f      	ldr	r1, [pc, #316]	; (80060c4 <HAL_I2C_Master_Receive+0x448>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f9ed 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e091      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800600c:	e042      	b.n	8006094 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fb00 	bl	8006618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e04c      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b04      	cmp	r3, #4
 8006060:	d118      	bne.n	8006094 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	f47f aec2 	bne.w	8005e22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3728      	adds	r7, #40	; 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	00010004 	.word	0x00010004

080060c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	460b      	mov	r3, r1
 80060d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d006      	beq.n	80060f2 <I2C_MasterRequestWrite+0x2a>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <I2C_MasterRequestWrite+0x2a>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f0:	d108      	bne.n	8006104 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e00b      	b.n	800611c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b12      	cmp	r3, #18
 800610a:	d107      	bne.n	800611c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f91d 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	d103      	bne.n	800614c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e035      	b.n	80061bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006158:	d108      	bne.n	800616c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006168:	611a      	str	r2, [r3, #16]
 800616a:	e01b      	b.n	80061a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800616c:	897b      	ldrh	r3, [r7, #10]
 800616e:	11db      	asrs	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0306 	and.w	r3, r3, #6
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f063 030f 	orn	r3, r3, #15
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	490e      	ldr	r1, [pc, #56]	; (80061c4 <I2C_MasterRequestWrite+0xfc>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f943 	bl	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e010      	b.n	80061bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800619a:	897b      	ldrh	r3, [r7, #10]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4907      	ldr	r1, [pc, #28]	; (80061c8 <I2C_MasterRequestWrite+0x100>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f933 	bl	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	00010008 	.word	0x00010008
 80061c8:	00010002 	.word	0x00010002

080061cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	460b      	mov	r3, r1
 80061da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d006      	beq.n	8006206 <I2C_MasterRequestRead+0x3a>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d003      	beq.n	8006206 <I2C_MasterRequestRead+0x3a>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006204:	d108      	bne.n	8006218 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e00b      	b.n	8006230 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	2b11      	cmp	r3, #17
 800621e:	d107      	bne.n	8006230 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f893 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006256:	d103      	bne.n	8006260 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e079      	b.n	8006358 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800626c:	d108      	bne.n	8006280 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800626e:	897b      	ldrh	r3, [r7, #10]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	611a      	str	r2, [r3, #16]
 800627e:	e05f      	b.n	8006340 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006280:	897b      	ldrh	r3, [r7, #10]
 8006282:	11db      	asrs	r3, r3, #7
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f003 0306 	and.w	r3, r3, #6
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f063 030f 	orn	r3, r3, #15
 8006290:	b2da      	uxtb	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4930      	ldr	r1, [pc, #192]	; (8006360 <I2C_MasterRequestRead+0x194>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f8b9 	bl	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e054      	b.n	8006358 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062ae:	897b      	ldrh	r3, [r7, #10]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4929      	ldr	r1, [pc, #164]	; (8006364 <I2C_MasterRequestRead+0x198>)
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f8a9 	bl	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e044      	b.n	8006358 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f831 	bl	8006368 <I2C_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631a:	d103      	bne.n	8006324 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e017      	b.n	8006358 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006328:	897b      	ldrh	r3, [r7, #10]
 800632a:	11db      	asrs	r3, r3, #7
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0306 	and.w	r3, r3, #6
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f063 030e 	orn	r3, r3, #14
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4907      	ldr	r1, [pc, #28]	; (8006364 <I2C_MasterRequestRead+0x198>)
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f865 	bl	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	00010008 	.word	0x00010008
 8006364:	00010002 	.word	0x00010002

08006368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006378:	e025      	b.n	80063c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d021      	beq.n	80063c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fe fe97 	bl	80050b4 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d116      	bne.n	80063c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e023      	b.n	800640e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10d      	bne.n	80063ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	43da      	mvns	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	e00c      	b.n	8006406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	43da      	mvns	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	429a      	cmp	r2, r3
 800640a:	d0b6      	beq.n	800637a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006424:	e051      	b.n	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006434:	d123      	bne.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800644e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e046      	b.n	800650c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d021      	beq.n	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006486:	f7fe fe15 	bl	80050b4 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0220 	orr.w	r2, r3, #32
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e020      	b.n	800650c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d10c      	bne.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	43da      	mvns	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e00b      	b.n	8006506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	43da      	mvns	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d18d      	bne.n	8006426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006520:	e02d      	b.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f8ce 	bl	80066c4 <I2C_IsAcknowledgeFailed>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e02d      	b.n	800658e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d021      	beq.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fe fdbb 	bl	80050b4 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d116      	bne.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e007      	b.n	800658e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b80      	cmp	r3, #128	; 0x80
 800658a:	d1ca      	bne.n	8006522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065a2:	e02d      	b.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f88d 	bl	80066c4 <I2C_IsAcknowledgeFailed>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e02d      	b.n	8006610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d021      	beq.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065bc:	f7fe fd7a 	bl	80050b4 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d116      	bne.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	f043 0220 	orr.w	r2, r3, #32
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e007      	b.n	8006610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b04      	cmp	r3, #4
 800660c:	d1ca      	bne.n	80065a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006624:	e042      	b.n	80066ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d119      	bne.n	8006668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0210 	mvn.w	r2, #16
 800663c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e029      	b.n	80066bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006668:	f7fe fd24 	bl	80050b4 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d116      	bne.n	80066ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e007      	b.n	80066bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d1b5      	bne.n	8006626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066da:	d11b      	bne.n	8006714 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	f043 0204 	orr.w	r2, r3, #4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e264      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d075      	beq.n	800682e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006742:	4ba3      	ldr	r3, [pc, #652]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b04      	cmp	r3, #4
 800674c:	d00c      	beq.n	8006768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674e:	4ba0      	ldr	r3, [pc, #640]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006756:	2b08      	cmp	r3, #8
 8006758:	d112      	bne.n	8006780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675a:	4b9d      	ldr	r3, [pc, #628]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006766:	d10b      	bne.n	8006780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	4b99      	ldr	r3, [pc, #612]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d05b      	beq.n	800682c <HAL_RCC_OscConfig+0x108>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d157      	bne.n	800682c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e23f      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d106      	bne.n	8006798 <HAL_RCC_OscConfig+0x74>
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a90      	ldr	r2, [pc, #576]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e01d      	b.n	80067d4 <HAL_RCC_OscConfig+0xb0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x98>
 80067a2:	4b8b      	ldr	r3, [pc, #556]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a8a      	ldr	r2, [pc, #552]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a87      	ldr	r2, [pc, #540]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e00b      	b.n	80067d4 <HAL_RCC_OscConfig+0xb0>
 80067bc:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a83      	ldr	r2, [pc, #524]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b81      	ldr	r3, [pc, #516]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a80      	ldr	r2, [pc, #512]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067dc:	f7fe fc6a 	bl	80050b4 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e4:	f7fe fc66 	bl	80050b4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	; 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e204      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b76      	ldr	r3, [pc, #472]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0xc0>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006804:	f7fe fc56 	bl	80050b4 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800680c:	f7fe fc52 	bl	80050b4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e1f0      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681e:	4b6c      	ldr	r3, [pc, #432]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0xe8>
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d063      	beq.n	8006902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683a:	4b65      	ldr	r3, [pc, #404]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006846:	4b62      	ldr	r3, [pc, #392]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800684e:	2b08      	cmp	r3, #8
 8006850:	d11c      	bne.n	800688c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006852:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d116      	bne.n	800688c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685e:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_RCC_OscConfig+0x152>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e1c4      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006876:	4b56      	ldr	r3, [pc, #344]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4952      	ldr	r1, [pc, #328]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	4313      	orrs	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688a:	e03a      	b.n	8006902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d020      	beq.n	80068d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006894:	4b4f      	ldr	r3, [pc, #316]	; (80069d4 <HAL_RCC_OscConfig+0x2b0>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689a:	f7fe fc0b 	bl	80050b4 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a2:	f7fe fc07 	bl	80050b4 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e1a5      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b4:	4b46      	ldr	r3, [pc, #280]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c0:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4940      	ldr	r1, [pc, #256]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	600b      	str	r3, [r1, #0]
 80068d4:	e015      	b.n	8006902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d6:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_OscConfig+0x2b0>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fe fbea 	bl	80050b4 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e4:	f7fe fbe6 	bl	80050b4 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e184      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d030      	beq.n	8006970 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <HAL_RCC_OscConfig+0x2b4>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691c:	f7fe fbca 	bl	80050b4 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006924:	f7fe fbc6 	bl	80050b4 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e164      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x200>
 8006942:	e015      	b.n	8006970 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006944:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <HAL_RCC_OscConfig+0x2b4>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694a:	f7fe fbb3 	bl	80050b4 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006952:	f7fe fbaf 	bl	80050b4 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e14d      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f0      	bne.n	8006952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80a0 	beq.w	8006abe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699c:	6413      	str	r3, [r2, #64]	; 0x40
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d121      	bne.n	80069fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ba:	4b08      	ldr	r3, [pc, #32]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a07      	ldr	r2, [pc, #28]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c6:	f7fe fb75 	bl	80050b4 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069cc:	e011      	b.n	80069f2 <HAL_RCC_OscConfig+0x2ce>
 80069ce:	bf00      	nop
 80069d0:	40023800 	.word	0x40023800
 80069d4:	42470000 	.word	0x42470000
 80069d8:	42470e80 	.word	0x42470e80
 80069dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e0:	f7fe fb68 	bl	80050b4 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e106      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f2:	4b85      	ldr	r3, [pc, #532]	; (8006c08 <HAL_RCC_OscConfig+0x4e4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d106      	bne.n	8006a14 <HAL_RCC_OscConfig+0x2f0>
 8006a06:	4b81      	ldr	r3, [pc, #516]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a80      	ldr	r2, [pc, #512]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
 8006a12:	e01c      	b.n	8006a4e <HAL_RCC_OscConfig+0x32a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	d10c      	bne.n	8006a36 <HAL_RCC_OscConfig+0x312>
 8006a1c:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a7a      	ldr	r2, [pc, #488]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a22:	f043 0304 	orr.w	r3, r3, #4
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a77      	ldr	r2, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
 8006a34:	e00b      	b.n	8006a4e <HAL_RCC_OscConfig+0x32a>
 8006a36:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	4a74      	ldr	r2, [pc, #464]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	6713      	str	r3, [r2, #112]	; 0x70
 8006a42:	4b72      	ldr	r3, [pc, #456]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	4a71      	ldr	r2, [pc, #452]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a48:	f023 0304 	bic.w	r3, r3, #4
 8006a4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d015      	beq.n	8006a82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a56:	f7fe fb2d 	bl	80050b4 <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5c:	e00a      	b.n	8006a74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5e:	f7fe fb29 	bl	80050b4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e0c5      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	4b65      	ldr	r3, [pc, #404]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0ee      	beq.n	8006a5e <HAL_RCC_OscConfig+0x33a>
 8006a80:	e014      	b.n	8006aac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a82:	f7fe fb17 	bl	80050b4 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a88:	e00a      	b.n	8006aa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a8a:	f7fe fb13 	bl	80050b4 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0af      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa0:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ee      	bne.n	8006a8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d105      	bne.n	8006abe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab2:	4b56      	ldr	r3, [pc, #344]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a55      	ldr	r2, [pc, #340]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 809b 	beq.w	8006bfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac8:	4b50      	ldr	r3, [pc, #320]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 030c 	and.w	r3, r3, #12
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d05c      	beq.n	8006b8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d141      	bne.n	8006b60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006adc:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae2:	f7fe fae7 	bl	80050b4 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aea:	f7fe fae3 	bl	80050b4 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e081      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afc:	4b43      	ldr	r3, [pc, #268]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	019b      	lsls	r3, r3, #6
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	061b      	lsls	r3, r3, #24
 8006b2c:	4937      	ldr	r1, [pc, #220]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fe fabc 	bl	80050b4 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fe fab8 	bl	80050b4 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e056      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0x41c>
 8006b5e:	e04e      	b.n	8006bfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fe faa5 	bl	80050b4 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fe faa1 	bl	80050b4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e03f      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b80:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x44a>
 8006b8c:	e037      	b.n	8006bfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e032      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b9a:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d028      	beq.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d121      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d11a      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bca:	4013      	ands	r3, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d111      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40007000 	.word	0x40007000
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	42470060 	.word	0x42470060

08006c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0cc      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c28:	4b68      	ldr	r3, [pc, #416]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d90c      	bls.n	8006c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b65      	ldr	r3, [pc, #404]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3e:	4b63      	ldr	r3, [pc, #396]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0b8      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d020      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c68:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a58      	ldr	r2, [pc, #352]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c80:	4b53      	ldr	r3, [pc, #332]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4a52      	ldr	r2, [pc, #328]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c8c:	4b50      	ldr	r3, [pc, #320]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	494d      	ldr	r1, [pc, #308]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d044      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d119      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e07f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd2:	4b3f      	ldr	r3, [pc, #252]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e06f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e067      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cf2:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f023 0203 	bic.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4934      	ldr	r1, [pc, #208]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d04:	f7fe f9d6 	bl	80050b4 <HAL_GetTick>
 8006d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d0c:	f7fe f9d2 	bl	80050b4 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e04f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d22:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 020c 	and.w	r2, r3, #12
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d1eb      	bne.n	8006d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d20c      	bcs.n	8006d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e032      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	490e      	ldr	r1, [pc, #56]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d9a:	f000 f821 	bl	8006de0 <HAL_RCC_GetSysClockFreq>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	490a      	ldr	r1, [pc, #40]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8006dac:	5ccb      	ldrb	r3, [r1, r3]
 8006dae:	fa22 f303 	lsr.w	r3, r2, r3
 8006db2:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1c8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe f936 	bl	800502c <HAL_InitTick>

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023c00 	.word	0x40023c00
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	08008f3c 	.word	0x08008f3c
 8006dd8:	2000004c 	.word	0x2000004c
 8006ddc:	20000050 	.word	0x20000050

08006de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	2300      	movs	r3, #0
 8006df2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df8:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 030c 	and.w	r3, r3, #12
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d00d      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x40>
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	f200 80bd 	bhi.w	8006f84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x34>
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d003      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e12:	e0b7      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e14:	4b61      	ldr	r3, [pc, #388]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e16:	60bb      	str	r3, [r7, #8]
       break;
 8006e18:	e0b7      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e1a:	4b61      	ldr	r3, [pc, #388]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e1c:	60bb      	str	r3, [r7, #8]
      break;
 8006e1e:	e0b4      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e20:	4b5d      	ldr	r3, [pc, #372]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2a:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d04d      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e36:	4b58      	ldr	r3, [pc, #352]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	099b      	lsrs	r3, r3, #6
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	ea02 0800 	and.w	r8, r2, r0
 8006e4e:	ea03 0901 	and.w	r9, r3, r1
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	014b      	lsls	r3, r1, #5
 8006e60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e64:	0142      	lsls	r2, r0, #5
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	ebb0 0008 	subs.w	r0, r0, r8
 8006e6e:	eb61 0109 	sbc.w	r1, r1, r9
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	018b      	lsls	r3, r1, #6
 8006e7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e80:	0182      	lsls	r2, r0, #6
 8006e82:	1a12      	subs	r2, r2, r0
 8006e84:	eb63 0301 	sbc.w	r3, r3, r1
 8006e88:	f04f 0000 	mov.w	r0, #0
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	00d9      	lsls	r1, r3, #3
 8006e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e96:	00d0      	lsls	r0, r2, #3
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	eb12 0208 	adds.w	r2, r2, r8
 8006ea0:	eb43 0309 	adc.w	r3, r3, r9
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	0259      	lsls	r1, r3, #9
 8006eae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006eb2:	0250      	lsls	r0, r2, #9
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f7f9 ff3c 	bl	8000d40 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4613      	mov	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e04a      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	ea02 0400 	and.w	r4, r2, r0
 8006eea:	ea03 0501 	and.w	r5, r3, r1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	014b      	lsls	r3, r1, #5
 8006efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f00:	0142      	lsls	r2, r0, #5
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	1b00      	subs	r0, r0, r4
 8006f08:	eb61 0105 	sbc.w	r1, r1, r5
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	018b      	lsls	r3, r1, #6
 8006f16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f1a:	0182      	lsls	r2, r0, #6
 8006f1c:	1a12      	subs	r2, r2, r0
 8006f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f04f 0100 	mov.w	r1, #0
 8006f2a:	00d9      	lsls	r1, r3, #3
 8006f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f30:	00d0      	lsls	r0, r2, #3
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	1912      	adds	r2, r2, r4
 8006f38:	eb45 0303 	adc.w	r3, r5, r3
 8006f3c:	f04f 0000 	mov.w	r0, #0
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	0299      	lsls	r1, r3, #10
 8006f46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f4a:	0290      	lsls	r0, r2, #10
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4610      	mov	r0, r2
 8006f52:	4619      	mov	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	f7f9 fef0 	bl	8000d40 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4613      	mov	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	3301      	adds	r3, #1
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	60bb      	str	r3, [r7, #8]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f86:	60bb      	str	r3, [r7, #8]
      break;
 8006f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	00f42400 	.word	0x00f42400
 8006fa0:	007a1200 	.word	0x007a1200

08006fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa8:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006faa:	681b      	ldr	r3, [r3, #0]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000004c 	.word	0x2000004c

08006fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fc0:	f7ff fff0 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	0a9b      	lsrs	r3, r3, #10
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	4903      	ldr	r1, [pc, #12]	; (8006fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fd2:	5ccb      	ldrb	r3, [r1, r3]
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	08008f4c 	.word	0x08008f4c

08006fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fe8:	f7ff ffdc 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	0b5b      	lsrs	r3, r3, #13
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	4903      	ldr	r1, [pc, #12]	; (8007008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40023800 	.word	0x40023800
 8007008:	08008f4c 	.word	0x08008f4c

0800700c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e041      	b.n	80070a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fd fe20 	bl	8004c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f000 fd88 	bl	8007b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d001      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e044      	b.n	800714e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_TIM_Base_Start_IT+0xb0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x6c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ee:	d013      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x6c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <HAL_TIM_Base_Start_IT+0xb4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x6c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_TIM_Base_Start_IT+0xb8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x6c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a17      	ldr	r2, [pc, #92]	; (8007168 <HAL_TIM_Base_Start_IT+0xbc>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x6c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a16      	ldr	r2, [pc, #88]	; (800716c <HAL_TIM_Base_Start_IT+0xc0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d111      	bne.n	800713c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b06      	cmp	r3, #6
 8007128:	d010      	beq.n	800714c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0201 	orr.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713a:	e007      	b.n	800714c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40014000 	.word	0x40014000

08007170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e041      	b.n	8007206 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f839 	bl	800720e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f000 fcd6 	bl	8007b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <HAL_TIM_PWM_Start+0x24>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e022      	b.n	800728e <HAL_TIM_PWM_Start+0x6a>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b04      	cmp	r3, #4
 800724c:	d109      	bne.n	8007262 <HAL_TIM_PWM_Start+0x3e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	bf14      	ite	ne
 800725a:	2301      	movne	r3, #1
 800725c:	2300      	moveq	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	e015      	b.n	800728e <HAL_TIM_PWM_Start+0x6a>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b08      	cmp	r3, #8
 8007266:	d109      	bne.n	800727c <HAL_TIM_PWM_Start+0x58>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b01      	cmp	r3, #1
 8007272:	bf14      	ite	ne
 8007274:	2301      	movne	r3, #1
 8007276:	2300      	moveq	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e008      	b.n	800728e <HAL_TIM_PWM_Start+0x6a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e068      	b.n	8007368 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_PWM_Start+0x82>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a4:	e013      	b.n	80072ce <HAL_TIM_PWM_Start+0xaa>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_PWM_Start+0x92>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b4:	e00b      	b.n	80072ce <HAL_TIM_PWM_Start+0xaa>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c4:	e003      	b.n	80072ce <HAL_TIM_PWM_Start+0xaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2201      	movs	r2, #1
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fee8 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <HAL_TIM_PWM_Start+0x14c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d107      	bne.n	80072f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_TIM_PWM_Start+0x14c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_TIM_PWM_Start+0x10e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d013      	beq.n	8007332 <HAL_TIM_PWM_Start+0x10e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a19      	ldr	r2, [pc, #100]	; (8007374 <HAL_TIM_PWM_Start+0x150>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIM_PWM_Start+0x10e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a17      	ldr	r2, [pc, #92]	; (8007378 <HAL_TIM_PWM_Start+0x154>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIM_PWM_Start+0x10e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a16      	ldr	r2, [pc, #88]	; (800737c <HAL_TIM_PWM_Start+0x158>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIM_PWM_Start+0x10e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a14      	ldr	r2, [pc, #80]	; (8007380 <HAL_TIM_PWM_Start+0x15c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d111      	bne.n	8007356 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b06      	cmp	r3, #6
 8007342:	d010      	beq.n	8007366 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007354:	e007      	b.n	8007366 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0201 	orr.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40010000 	.word	0x40010000
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40000c00 	.word	0x40000c00
 8007380:	40014000 	.word	0x40014000

08007384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e097      	b.n	80074c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fd fb9d 	bl	8004aec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f023 0307 	bic.w	r3, r3, #7
 80073cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 fbc1 	bl	8007b60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	4313      	orrs	r3, r2
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007424:	f023 030c 	bic.w	r3, r3, #12
 8007428:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	4313      	orrs	r3, r2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	011a      	lsls	r2, r3, #4
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	031b      	lsls	r3, r3, #12
 8007454:	4313      	orrs	r3, r2
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800746a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4313      	orrs	r3, r2
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d110      	bne.n	8007522 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d102      	bne.n	800750c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007506:	7b7b      	ldrb	r3, [r7, #13]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d001      	beq.n	8007510 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e069      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007520:	e031      	b.n	8007586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d110      	bne.n	800754a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d102      	bne.n	8007534 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800752e:	7b3b      	ldrb	r3, [r7, #12]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e055      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007548:	e01d      	b.n	8007586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d108      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d105      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007556:	7b7b      	ldrb	r3, [r7, #13]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d102      	bne.n	8007562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800755c:	7b3b      	ldrb	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d001      	beq.n	8007566 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e03e      	b.n	80075e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_TIM_Encoder_Start+0xc4>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b04      	cmp	r3, #4
 8007590:	d008      	beq.n	80075a4 <HAL_TIM_Encoder_Start+0xd4>
 8007592:	e00f      	b.n	80075b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fd85 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075a2:	e016      	b.n	80075d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2201      	movs	r2, #1
 80075aa:	2104      	movs	r1, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fd7d 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075b2:	e00e      	b.n	80075d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fd75 	bl	80080ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	2104      	movs	r1, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fd6e 	bl	80080ac <TIM_CCxChannelCmd>
      break;
 80075d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d122      	bne.n	8007648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d11b      	bne.n	8007648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0202 	mvn.w	r2, #2
 8007618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa77 	bl	8007b22 <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa69 	bl	8007b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa7a 	bl	8007b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b04      	cmp	r3, #4
 8007654:	d122      	bne.n	800769c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d11b      	bne.n	800769c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0204 	mvn.w	r2, #4
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa4d 	bl	8007b22 <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa3f 	bl	8007b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa50 	bl	8007b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d122      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d11b      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0208 	mvn.w	r2, #8
 80076c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2204      	movs	r2, #4
 80076c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa23 	bl	8007b22 <HAL_TIM_IC_CaptureCallback>
 80076dc:	e005      	b.n	80076ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa15 	bl	8007b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa26 	bl	8007b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d122      	bne.n	8007744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b10      	cmp	r3, #16
 800770a:	d11b      	bne.n	8007744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0210 	mvn.w	r2, #16
 8007714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2208      	movs	r2, #8
 800771a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9f9 	bl	8007b22 <HAL_TIM_IC_CaptureCallback>
 8007730:	e005      	b.n	800773e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9eb 	bl	8007b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f9fc 	bl	8007b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10e      	bne.n	8007770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d107      	bne.n	8007770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0201 	mvn.w	r2, #1
 8007768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fff8 	bl	8002760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d10e      	bne.n	800779c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007788:	2b80      	cmp	r3, #128	; 0x80
 800778a:	d107      	bne.n	800779c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fd26 	bl	80081e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d10e      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d107      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9c1 	bl	8007b4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d10e      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d107      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0220 	mvn.w	r2, #32
 80077ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fcf0 	bl	80081d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007816:	2302      	movs	r3, #2
 8007818:	e0ae      	b.n	8007978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b0c      	cmp	r3, #12
 8007826:	f200 809f 	bhi.w	8007968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007865 	.word	0x08007865
 8007834:	08007969 	.word	0x08007969
 8007838:	08007969 	.word	0x08007969
 800783c:	08007969 	.word	0x08007969
 8007840:	080078a5 	.word	0x080078a5
 8007844:	08007969 	.word	0x08007969
 8007848:	08007969 	.word	0x08007969
 800784c:	08007969 	.word	0x08007969
 8007850:	080078e7 	.word	0x080078e7
 8007854:	08007969 	.word	0x08007969
 8007858:	08007969 	.word	0x08007969
 800785c:	08007969 	.word	0x08007969
 8007860:	08007927 	.word	0x08007927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f9f8 	bl	8007c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0208 	orr.w	r2, r2, #8
 800787e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0204 	bic.w	r2, r2, #4
 800788e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6999      	ldr	r1, [r3, #24]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	619a      	str	r2, [r3, #24]
      break;
 80078a2:	e064      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fa3e 	bl	8007d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6999      	ldr	r1, [r3, #24]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	021a      	lsls	r2, r3, #8
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	619a      	str	r2, [r3, #24]
      break;
 80078e4:	e043      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fa89 	bl	8007e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0208 	orr.w	r2, r2, #8
 8007900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69da      	ldr	r2, [r3, #28]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0204 	bic.w	r2, r2, #4
 8007910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69d9      	ldr	r1, [r3, #28]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	61da      	str	r2, [r3, #28]
      break;
 8007924:	e023      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fad3 	bl	8007ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69d9      	ldr	r1, [r3, #28]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	021a      	lsls	r2, r3, #8
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	61da      	str	r2, [r3, #28]
      break;
 8007966:	e002      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
      break;
 800796c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_TIM_ConfigClockSource+0x1c>
 8007998:	2302      	movs	r3, #2
 800799a:	e0b4      	b.n	8007b06 <HAL_TIM_ConfigClockSource+0x186>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d4:	d03e      	beq.n	8007a54 <HAL_TIM_ConfigClockSource+0xd4>
 80079d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079da:	f200 8087 	bhi.w	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	f000 8086 	beq.w	8007af2 <HAL_TIM_ConfigClockSource+0x172>
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ea:	d87f      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 80079ec:	2b70      	cmp	r3, #112	; 0x70
 80079ee:	d01a      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0xa6>
 80079f0:	2b70      	cmp	r3, #112	; 0x70
 80079f2:	d87b      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 80079f4:	2b60      	cmp	r3, #96	; 0x60
 80079f6:	d050      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x11a>
 80079f8:	2b60      	cmp	r3, #96	; 0x60
 80079fa:	d877      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 80079fc:	2b50      	cmp	r3, #80	; 0x50
 80079fe:	d03c      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0xfa>
 8007a00:	2b50      	cmp	r3, #80	; 0x50
 8007a02:	d873      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d058      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0x13a>
 8007a08:	2b40      	cmp	r3, #64	; 0x40
 8007a0a:	d86f      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 8007a0c:	2b30      	cmp	r3, #48	; 0x30
 8007a0e:	d064      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0x15a>
 8007a10:	2b30      	cmp	r3, #48	; 0x30
 8007a12:	d86b      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d060      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0x15a>
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d867      	bhi.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d05c      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0x15a>
 8007a20:	2b10      	cmp	r3, #16
 8007a22:	d05a      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0x15a>
 8007a24:	e062      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	6899      	ldr	r1, [r3, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f000 fb19 	bl	800806c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	609a      	str	r2, [r3, #8]
      break;
 8007a52:	e04f      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	6899      	ldr	r1, [r3, #8]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f000 fb02 	bl	800806c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a76:	609a      	str	r2, [r3, #8]
      break;
 8007a78:	e03c      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6859      	ldr	r1, [r3, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f000 fa76 	bl	8007f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2150      	movs	r1, #80	; 0x50
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 facf 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007a98:	e02c      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6859      	ldr	r1, [r3, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f000 fa95 	bl	8007fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2160      	movs	r1, #96	; 0x60
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fabf 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007ab8:	e01c      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	6859      	ldr	r1, [r3, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f000 fa56 	bl	8007f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2140      	movs	r1, #64	; 0x40
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 faaf 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007ad8:	e00c      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f000 faa6 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 8007aea:	e003      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e000      	b.n	8007af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a34      	ldr	r2, [pc, #208]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7e:	d00b      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a31      	ldr	r2, [pc, #196]	; (8007c48 <TIM_Base_SetConfig+0xe8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a30      	ldr	r2, [pc, #192]	; (8007c4c <TIM_Base_SetConfig+0xec>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_Base_SetConfig+0x38>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <TIM_Base_SetConfig+0xf0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d108      	bne.n	8007baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a25      	ldr	r2, [pc, #148]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01b      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb8:	d017      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <TIM_Base_SetConfig+0xe8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d013      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <TIM_Base_SetConfig+0xec>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00f      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <TIM_Base_SetConfig+0xf0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00b      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <TIM_Base_SetConfig+0xf4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d007      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <TIM_Base_SetConfig+0xf8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d003      	beq.n	8007bea <TIM_Base_SetConfig+0x8a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <TIM_Base_SetConfig+0xfc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d108      	bne.n	8007bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a08      	ldr	r2, [pc, #32]	; (8007c44 <TIM_Base_SetConfig+0xe4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d103      	bne.n	8007c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	615a      	str	r2, [r3, #20]
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 0302 	bic.w	r3, r3, #2
 8007ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <TIM_OC1_SetConfig+0xc8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0308 	bic.w	r3, r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a13      	ldr	r2, [pc, #76]	; (8007d28 <TIM_OC1_SetConfig+0xc8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d111      	bne.n	8007d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	621a      	str	r2, [r3, #32]
}
 8007d1c:	bf00      	nop
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40010000 	.word	0x40010000

08007d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0210 	bic.w	r2, r3, #16
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0320 	bic.w	r3, r3, #32
 8007d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1e      	ldr	r2, [pc, #120]	; (8007e00 <TIM_OC2_SetConfig+0xd4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d10d      	bne.n	8007da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <TIM_OC2_SetConfig+0xd4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d113      	bne.n	8007dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40010000 	.word	0x40010000

08007e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <TIM_OC3_SetConfig+0xd0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10d      	bne.n	8007e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <TIM_OC3_SetConfig+0xd0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d113      	bne.n	8007eae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	621a      	str	r2, [r3, #32]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	40010000 	.word	0x40010000

08007ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	031b      	lsls	r3, r3, #12
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <TIM_OC4_SetConfig+0x9c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d109      	bne.n	8007f4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40010000 	.word	0x40010000

08007f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 030a 	bic.w	r3, r3, #10
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0210 	bic.w	r2, r3, #16
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	f043 0307 	orr.w	r3, r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	431a      	orrs	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2201      	movs	r2, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e050      	b.n	80081b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d018      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d013      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a18      	ldr	r2, [pc, #96]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d00e      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a16      	ldr	r2, [pc, #88]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a15      	ldr	r2, [pc, #84]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d10c      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800818c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4313      	orrs	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40000400 	.word	0x40000400
 80081c8:	40000800 	.word	0x40000800
 80081cc:	40000c00 	.word	0x40000c00
 80081d0:	40014000 	.word	0x40014000

080081d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e03f      	b.n	800828e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fc fda8 	bl	8004d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800823e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc7b 	bl	8008b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b0ba      	sub	sp, #232	; 0xe8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10f      	bne.n	80082fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_UART_IRQHandler+0x66>
 80082ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fb65 	bl	80089c6 <UART_Receive_IT>
      return;
 80082fc:	e256      	b.n	80087ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80de 	beq.w	80084c4 <HAL_UART_IRQHandler+0x22c>
 8008308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80d1 	beq.w	80084c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <HAL_UART_IRQHandler+0xae>
 800832e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f043 0201 	orr.w	r2, r3, #1
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <HAL_UART_IRQHandler+0xd2>
 8008352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f043 0202 	orr.w	r2, r3, #2
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <HAL_UART_IRQHandler+0xf6>
 8008376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f043 0204 	orr.w	r2, r3, #4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800838e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d011      	beq.n	80083be <HAL_UART_IRQHandler+0x126>
 800839a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d105      	bne.n	80083b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	f043 0208 	orr.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 81ed 	beq.w	80087a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <HAL_UART_IRQHandler+0x14e>
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 faf0 	bl	80089c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d103      	bne.n	8008412 <HAL_UART_IRQHandler+0x17a>
 800840a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04f      	beq.n	80084b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9f8 	bl	8008808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d141      	bne.n	80084aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800843c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800845e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800846a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1d9      	bne.n	8008426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d013      	beq.n	80084a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	4a7d      	ldr	r2, [pc, #500]	; (8008674 <HAL_UART_IRQHandler+0x3dc>)
 8008480:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	4618      	mov	r0, r3
 8008488:	f7fc ffc5 	bl	8005416 <HAL_DMA_Abort_IT>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a0:	e00e      	b.n	80084c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f99a 	bl	80087dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	e00a      	b.n	80084c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f996 	bl	80087dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b0:	e006      	b.n	80084c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f992 	bl	80087dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084be:	e170      	b.n	80087a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c0:	bf00      	nop
    return;
 80084c2:	e16e      	b.n	80087a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	f040 814a 	bne.w	8008762 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8143 	beq.w	8008762 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 813c 	beq.w	8008762 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084ea:	2300      	movs	r3, #0
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	f040 80b4 	bne.w	8008678 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800851c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8140 	beq.w	80087a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800852a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800852e:	429a      	cmp	r2, r3
 8008530:	f080 8139 	bcs.w	80087a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800853a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008546:	f000 8088 	beq.w	800865a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	330c      	adds	r3, #12
 8008550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	330c      	adds	r3, #12
 8008572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800857a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800858e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1d9      	bne.n	800854a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3314      	adds	r3, #20
 80085b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e1      	bne.n	8008596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3314      	adds	r3, #20
 80085f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e3      	bne.n	80085d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800862a:	f023 0310 	bic.w	r3, r3, #16
 800862e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	330c      	adds	r3, #12
 8008638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800863c:	65ba      	str	r2, [r7, #88]	; 0x58
 800863e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800864a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e3      	bne.n	8008618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	4618      	mov	r0, r3
 8008656:	f7fc fe6e 	bl	8005336 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008662:	b29b      	uxth	r3, r3
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8c0 	bl	80087f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008670:	e099      	b.n	80087a6 <HAL_UART_IRQHandler+0x50e>
 8008672:	bf00      	nop
 8008674:	080088cf 	.word	0x080088cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008680:	b29b      	uxth	r3, r3
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 808b 	beq.w	80087aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8086 	beq.w	80087aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086c2:	647a      	str	r2, [r7, #68]	; 0x44
 80086c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e3      	bne.n	800869e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3314      	adds	r3, #20
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	623b      	str	r3, [r7, #32]
   return(result);
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086fa:	633a      	str	r2, [r7, #48]	; 0x30
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e3      	bne.n	80086d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60fb      	str	r3, [r7, #12]
   return(result);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008740:	61fa      	str	r2, [r7, #28]
 8008742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e3      	bne.n	800871c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f848 	bl	80087f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008760:	e023      	b.n	80087aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <HAL_UART_IRQHandler+0x4ea>
 800876e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8bb 	bl	80088f6 <UART_Transmit_IT>
    return;
 8008780:	e014      	b.n	80087ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <HAL_UART_IRQHandler+0x514>
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8fb 	bl	8008996 <UART_EndTransmit_IT>
    return;
 80087a0:	e004      	b.n	80087ac <HAL_UART_IRQHandler+0x514>
    return;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <HAL_UART_IRQHandler+0x514>
      return;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <HAL_UART_IRQHandler+0x514>
      return;
 80087aa:	bf00      	nop
  }
}
 80087ac:	37e8      	adds	r7, #232	; 0xe8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop

080087b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b095      	sub	sp, #84	; 0x54
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008830:	643a      	str	r2, [r7, #64]	; 0x40
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	61fb      	str	r3, [r7, #28]
   return(result);
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f023 0301 	bic.w	r3, r3, #1
 800885a:	64bb      	str	r3, [r7, #72]	; 0x48
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800886a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e5      	bne.n	8008844 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	2b01      	cmp	r3, #1
 800887e:	d119      	bne.n	80088b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 0310 	bic.w	r3, r3, #16
 8008896:	647b      	str	r3, [r7, #68]	; 0x44
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088a0:	61ba      	str	r2, [r7, #24]
 80088a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	613b      	str	r3, [r7, #16]
   return(result);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088c2:	bf00      	nop
 80088c4:	3754      	adds	r7, #84	; 0x54
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff ff77 	bl	80087dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b21      	cmp	r3, #33	; 0x21
 8008908:	d13e      	bne.n	8008988 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008912:	d114      	bne.n	800893e <UART_Transmit_IT+0x48>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d110      	bne.n	800893e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008930:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	1c9a      	adds	r2, r3, #2
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	621a      	str	r2, [r3, #32]
 800893c:	e008      	b.n	8008950 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	1c59      	adds	r1, r3, #1
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6211      	str	r1, [r2, #32]
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4619      	mov	r1, r3
 800895e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10f      	bne.n	8008984 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008972:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008982:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e000      	b.n	800898a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
  }
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff fefc 	bl	80087b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b08c      	sub	sp, #48	; 0x30
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b22      	cmp	r3, #34	; 0x22
 80089d8:	f040 80ab 	bne.w	8008b32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d117      	bne.n	8008a16 <UART_Receive_IT+0x50>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d113      	bne.n	8008a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	1c9a      	adds	r2, r3, #2
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
 8008a14:	e026      	b.n	8008a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d007      	beq.n	8008a3a <UART_Receive_IT+0x74>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <UART_Receive_IT+0x82>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	e008      	b.n	8008a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4619      	mov	r1, r3
 8008a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d15a      	bne.n	8008b2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0220 	bic.w	r2, r2, #32
 8008a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d135      	bne.n	8008b24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f023 0310 	bic.w	r3, r3, #16
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ade:	623a      	str	r2, [r7, #32]
 8008ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	69f9      	ldr	r1, [r7, #28]
 8008ae4:	6a3a      	ldr	r2, [r7, #32]
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b10      	cmp	r3, #16
 8008afe:	d10a      	bne.n	8008b16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff fe67 	bl	80087f0 <HAL_UARTEx_RxEventCallback>
 8008b22:	e002      	b.n	8008b2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fe4f 	bl	80087c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e002      	b.n	8008b34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3730      	adds	r7, #48	; 0x30
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	b09f      	sub	sp, #124	; 0x7c
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	68d9      	ldr	r1, [r3, #12]
 8008b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	ea40 0301 	orr.w	r3, r0, r1
 8008b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b80:	f021 010c 	bic.w	r1, r1, #12
 8008b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	6999      	ldr	r1, [r3, #24]
 8008b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	ea40 0301 	orr.w	r3, r0, r1
 8008ba4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4bc5      	ldr	r3, [pc, #788]	; (8008ec0 <UART_SetConfig+0x384>)
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d004      	beq.n	8008bba <UART_SetConfig+0x7e>
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4bc3      	ldr	r3, [pc, #780]	; (8008ec4 <UART_SetConfig+0x388>)
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d103      	bne.n	8008bc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bba:	f7fe fa13 	bl	8006fe4 <HAL_RCC_GetPCLK2Freq>
 8008bbe:	6778      	str	r0, [r7, #116]	; 0x74
 8008bc0:	e002      	b.n	8008bc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bc2:	f7fe f9fb 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 8008bc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd0:	f040 80b6 	bne.w	8008d40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd6:	461c      	mov	r4, r3
 8008bd8:	f04f 0500 	mov.w	r5, #0
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	1891      	adds	r1, r2, r2
 8008be2:	6439      	str	r1, [r7, #64]	; 0x40
 8008be4:	415b      	adcs	r3, r3
 8008be6:	647b      	str	r3, [r7, #68]	; 0x44
 8008be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bec:	1912      	adds	r2, r2, r4
 8008bee:	eb45 0303 	adc.w	r3, r5, r3
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f04f 0100 	mov.w	r1, #0
 8008bfa:	00d9      	lsls	r1, r3, #3
 8008bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c00:	00d0      	lsls	r0, r2, #3
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	1911      	adds	r1, r2, r4
 8008c08:	6639      	str	r1, [r7, #96]	; 0x60
 8008c0a:	416b      	adcs	r3, r5
 8008c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	1891      	adds	r1, r2, r2
 8008c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c1c:	415b      	adcs	r3, r3
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c28:	f7f8 f88a 	bl	8000d40 <__aeabi_uldivmod>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4ba5      	ldr	r3, [pc, #660]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008c32:	fba3 2302 	umull	r2, r3, r3, r2
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	011e      	lsls	r6, r3, #4
 8008c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	f04f 0500 	mov.w	r5, #0
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	1891      	adds	r1, r2, r2
 8008c48:	6339      	str	r1, [r7, #48]	; 0x30
 8008c4a:	415b      	adcs	r3, r3
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c52:	1912      	adds	r2, r2, r4
 8008c54:	eb45 0303 	adc.w	r3, r5, r3
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	f04f 0100 	mov.w	r1, #0
 8008c60:	00d9      	lsls	r1, r3, #3
 8008c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c66:	00d0      	lsls	r0, r2, #3
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	1911      	adds	r1, r2, r4
 8008c6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c70:	416b      	adcs	r3, r5
 8008c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	1891      	adds	r1, r2, r2
 8008c80:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c82:	415b      	adcs	r3, r3
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c8e:	f7f8 f857 	bl	8000d40 <__aeabi_uldivmod>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4b8c      	ldr	r3, [pc, #560]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008c98:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9c:	095b      	lsrs	r3, r3, #5
 8008c9e:	2164      	movs	r1, #100	; 0x64
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	3332      	adds	r3, #50	; 0x32
 8008caa:	4a87      	ldr	r2, [pc, #540]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008cac:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb8:	441e      	add	r6, r3
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f04f 0100 	mov.w	r1, #0
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	1894      	adds	r4, r2, r2
 8008cc8:	623c      	str	r4, [r7, #32]
 8008cca:	415b      	adcs	r3, r3
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cd2:	1812      	adds	r2, r2, r0
 8008cd4:	eb41 0303 	adc.w	r3, r1, r3
 8008cd8:	f04f 0400 	mov.w	r4, #0
 8008cdc:	f04f 0500 	mov.w	r5, #0
 8008ce0:	00dd      	lsls	r5, r3, #3
 8008ce2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ce6:	00d4      	lsls	r4, r2, #3
 8008ce8:	4622      	mov	r2, r4
 8008cea:	462b      	mov	r3, r5
 8008cec:	1814      	adds	r4, r2, r0
 8008cee:	653c      	str	r4, [r7, #80]	; 0x50
 8008cf0:	414b      	adcs	r3, r1
 8008cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	1891      	adds	r1, r2, r2
 8008d00:	61b9      	str	r1, [r7, #24]
 8008d02:	415b      	adcs	r3, r3
 8008d04:	61fb      	str	r3, [r7, #28]
 8008d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d0e:	f7f8 f817 	bl	8000d40 <__aeabi_uldivmod>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4b6c      	ldr	r3, [pc, #432]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008d18:	fba3 1302 	umull	r1, r3, r3, r2
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	2164      	movs	r1, #100	; 0x64
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	3332      	adds	r3, #50	; 0x32
 8008d2a:	4a67      	ldr	r2, [pc, #412]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	f003 0207 	and.w	r2, r3, #7
 8008d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4432      	add	r2, r6
 8008d3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d3e:	e0b9      	b.n	8008eb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d42:	461c      	mov	r4, r3
 8008d44:	f04f 0500 	mov.w	r5, #0
 8008d48:	4622      	mov	r2, r4
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	1891      	adds	r1, r2, r2
 8008d4e:	6139      	str	r1, [r7, #16]
 8008d50:	415b      	adcs	r3, r3
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d58:	1912      	adds	r2, r2, r4
 8008d5a:	eb45 0303 	adc.w	r3, r5, r3
 8008d5e:	f04f 0000 	mov.w	r0, #0
 8008d62:	f04f 0100 	mov.w	r1, #0
 8008d66:	00d9      	lsls	r1, r3, #3
 8008d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d6c:	00d0      	lsls	r0, r2, #3
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	eb12 0804 	adds.w	r8, r2, r4
 8008d76:	eb43 0905 	adc.w	r9, r3, r5
 8008d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f04f 0100 	mov.w	r1, #0
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	008b      	lsls	r3, r1, #2
 8008d8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d92:	0082      	lsls	r2, r0, #2
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 ffd2 	bl	8000d40 <__aeabi_uldivmod>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4b49      	ldr	r3, [pc, #292]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008da2:	fba3 2302 	umull	r2, r3, r3, r2
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	011e      	lsls	r6, r3, #4
 8008daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dac:	4618      	mov	r0, r3
 8008dae:	f04f 0100 	mov.w	r1, #0
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	1894      	adds	r4, r2, r2
 8008db8:	60bc      	str	r4, [r7, #8]
 8008dba:	415b      	adcs	r3, r3
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc2:	1812      	adds	r2, r2, r0
 8008dc4:	eb41 0303 	adc.w	r3, r1, r3
 8008dc8:	f04f 0400 	mov.w	r4, #0
 8008dcc:	f04f 0500 	mov.w	r5, #0
 8008dd0:	00dd      	lsls	r5, r3, #3
 8008dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dd6:	00d4      	lsls	r4, r2, #3
 8008dd8:	4622      	mov	r2, r4
 8008dda:	462b      	mov	r3, r5
 8008ddc:	1814      	adds	r4, r2, r0
 8008dde:	64bc      	str	r4, [r7, #72]	; 0x48
 8008de0:	414b      	adcs	r3, r1
 8008de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f04f 0100 	mov.w	r1, #0
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	008b      	lsls	r3, r1, #2
 8008df8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dfc:	0082      	lsls	r2, r0, #2
 8008dfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e02:	f7f7 ff9d 	bl	8000d40 <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2164      	movs	r1, #100	; 0x64
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a2a      	ldr	r2, [pc, #168]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e2a:	441e      	add	r6, r3
 8008e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f04f 0100 	mov.w	r1, #0
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	1894      	adds	r4, r2, r2
 8008e3a:	603c      	str	r4, [r7, #0]
 8008e3c:	415b      	adcs	r3, r3
 8008e3e:	607b      	str	r3, [r7, #4]
 8008e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e44:	1812      	adds	r2, r2, r0
 8008e46:	eb41 0303 	adc.w	r3, r1, r3
 8008e4a:	f04f 0400 	mov.w	r4, #0
 8008e4e:	f04f 0500 	mov.w	r5, #0
 8008e52:	00dd      	lsls	r5, r3, #3
 8008e54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e58:	00d4      	lsls	r4, r2, #3
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	eb12 0a00 	adds.w	sl, r2, r0
 8008e62:	eb43 0b01 	adc.w	fp, r3, r1
 8008e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f04f 0100 	mov.w	r1, #0
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	008b      	lsls	r3, r1, #2
 8008e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e7e:	0082      	lsls	r2, r0, #2
 8008e80:	4650      	mov	r0, sl
 8008e82:	4659      	mov	r1, fp
 8008e84:	f7f7 ff5c 	bl	8000d40 <__aeabi_uldivmod>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	2164      	movs	r1, #100	; 0x64
 8008e96:	fb01 f303 	mul.w	r3, r1, r3
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	3332      	adds	r3, #50	; 0x32
 8008ea0:	4a09      	ldr	r2, [pc, #36]	; (8008ec8 <UART_SetConfig+0x38c>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4432      	add	r2, r6
 8008eb2:	609a      	str	r2, [r3, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	377c      	adds	r7, #124	; 0x7c
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40011000 	.word	0x40011000
 8008ec4:	40011400 	.word	0x40011400
 8008ec8:	51eb851f 	.word	0x51eb851f

08008ecc <__libc_init_array>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4d0d      	ldr	r5, [pc, #52]	; (8008f04 <__libc_init_array+0x38>)
 8008ed0:	4c0d      	ldr	r4, [pc, #52]	; (8008f08 <__libc_init_array+0x3c>)
 8008ed2:	1b64      	subs	r4, r4, r5
 8008ed4:	10a4      	asrs	r4, r4, #2
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	42a6      	cmp	r6, r4
 8008eda:	d109      	bne.n	8008ef0 <__libc_init_array+0x24>
 8008edc:	4d0b      	ldr	r5, [pc, #44]	; (8008f0c <__libc_init_array+0x40>)
 8008ede:	4c0c      	ldr	r4, [pc, #48]	; (8008f10 <__libc_init_array+0x44>)
 8008ee0:	f000 f820 	bl	8008f24 <_init>
 8008ee4:	1b64      	subs	r4, r4, r5
 8008ee6:	10a4      	asrs	r4, r4, #2
 8008ee8:	2600      	movs	r6, #0
 8008eea:	42a6      	cmp	r6, r4
 8008eec:	d105      	bne.n	8008efa <__libc_init_array+0x2e>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef4:	4798      	blx	r3
 8008ef6:	3601      	adds	r6, #1
 8008ef8:	e7ee      	b.n	8008ed8 <__libc_init_array+0xc>
 8008efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efe:	4798      	blx	r3
 8008f00:	3601      	adds	r6, #1
 8008f02:	e7f2      	b.n	8008eea <__libc_init_array+0x1e>
 8008f04:	08008f5c 	.word	0x08008f5c
 8008f08:	08008f5c 	.word	0x08008f5c
 8008f0c:	08008f5c 	.word	0x08008f5c
 8008f10:	08008f60 	.word	0x08008f60

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <_init>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr

08008f30 <_fini>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr
